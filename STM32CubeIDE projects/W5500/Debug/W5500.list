
W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004184  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b8  080042b8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080042b8  080042b8  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042b8  080042b8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080042c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e74  2000009c  08004364  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f10  08004364  00020f10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e87f  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f3  00000000  00000000  0002e944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00030a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00031910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fbd  00000000  00000000  00032730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e84b  00000000  00000000  0004b6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d49  00000000  00000000  00059f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3c81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e9c  00000000  00000000  000e3cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004278 	.word	0x08004278

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08004278 	.word	0x08004278

0800014c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
//#pragma once
#include "W5500.h"

W5500::W5500(
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	807b      	strh	r3, [r7, #2]
		SPI_HandleTypeDef* hspi_m,
		GPIO_TypeDef* W5500_CS_GPIO_Port_m,
		uint16_t W5500_CS_Pin_m,
		GPIO_TypeDef* W5500_RST_GPIO_Port_m,
		uint16_t W5500_RST_Pin_m
		)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	3310      	adds	r3, #16
 800015e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000162:	2100      	movs	r1, #0
 8000164:	4618      	mov	r0, r3
 8000166:	f004 f87f 	bl	8004268 <memset>
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000174:	2100      	movs	r1, #0
 8000176:	4618      	mov	r0, r3
 8000178:	f004 f876 	bl	8004268 <memset>
{
	hspi_w = hspi_m;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	68ba      	ldr	r2, [r7, #8]
 8000180:	601a      	str	r2, [r3, #0]
	W5500_CS_GPIO_Port_w = W5500_CS_GPIO_Port_m;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	687a      	ldr	r2, [r7, #4]
 8000186:	605a      	str	r2, [r3, #4]
	W5500_CS_Pin_w = W5500_CS_Pin_m;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	887a      	ldrh	r2, [r7, #2]
 800018c:	819a      	strh	r2, [r3, #12]
	W5500_RST_GPIO_Port_w = W5500_RST_GPIO_Port_m;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	69ba      	ldr	r2, [r7, #24]
 8000192:	609a      	str	r2, [r3, #8]
	W5500_RST_Pin_w = W5500_RST_Pin_m;
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	8bba      	ldrh	r2, [r7, #28]
 8000198:	81da      	strh	r2, [r3, #14]
}
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}

080001a4 <_ZN5W5500D1Ev>:

W5500::~W5500()
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
{
}
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	4618      	mov	r0, r3
 80001b0:	370c      	adds	r7, #12
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <_ZN5W55005resetEv>:

// аппаратный сброс чипа
void W5500::reset()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	// для аппаратного сброса "тянем" вход RSTn к "0" на 1 мс
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_RESET);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	6898      	ldr	r0, [r3, #8]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	89db      	ldrh	r3, [r3, #14]
 80001c8:	2200      	movs	r2, #0
 80001ca:	4619      	mov	r1, r3
 80001cc:	f001 fdfc 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001d0:	2001      	movs	r0, #1
 80001d2:	f001 fa93 	bl	80016fc <HAL_Delay>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6898      	ldr	r0, [r3, #8]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	89db      	ldrh	r3, [r3, #14]
 80001de:	2201      	movs	r2, #1
 80001e0:	4619      	mov	r1, r3
 80001e2:	f001 fdf1 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001e6:	2001      	movs	r0, #1
 80001e8:	f001 fa88 	bl	80016fc <HAL_Delay>
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <_ZN5W550013softwareResetEv>:

// программный сброс чипа
void W5500::softwareReset()
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af02      	add	r7, sp, #8
 80001fa:	6078      	str	r0, [r7, #4]
	// для программного сброса устанавливаем бит RST регистра MR в "1"
	mosiBytes_w[0] = 0;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2200      	movs	r2, #0
 8000200:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_MR;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2200      	movs	r2, #0
 8000206:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2204      	movs	r2, #4
 800020c:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0b10000000;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2280      	movs	r2, #128	; 0x80
 8000212:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	6858      	ldr	r0, [r3, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	899b      	ldrh	r3, [r3, #12]
 800021c:	2200      	movs	r2, #0
 800021e:	4619      	mov	r1, r3
 8000220:	f001 fdd2 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 100);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	6818      	ldr	r0, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f103 0110 	add.w	r1, r3, #16
 800022e:	2364      	movs	r3, #100	; 0x64
 8000230:	2204      	movs	r2, #4
 8000232:	f002 fa99 	bl	8002768 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6858      	ldr	r0, [r3, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	899b      	ldrh	r3, [r3, #12]
 800023e:	2201      	movs	r2, #1
 8000240:	4619      	mov	r1, r3
 8000242:	f001 fdc1 	bl	8001dc8 <HAL_GPIO_WritePin>
	mosiBytes_w[2] = 0;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2200      	movs	r2, #0
 800024a:	749a      	strb	r2, [r3, #18]
	misoBytes_w[3] = 0b11111111;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	// ждём подтверждения сброса - бит RST регистра MR должен установиться в "0"
	while(misoBytes_w[3] & 0b10000000)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800025a:	b25b      	sxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	da0d      	bge.n	800027c <_ZN5W550013softwareResetEv+0x88>
	{
		HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	6818      	ldr	r0, [r3, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f103 0110 	add.w	r1, r3, #16
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000270:	2364      	movs	r3, #100	; 0x64
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2304      	movs	r3, #4
 8000276:	f002 fbb3 	bl	80029e0 <HAL_SPI_TransmitReceive>
	while(misoBytes_w[3] & 0b10000000)
 800027a:	e7eb      	b.n	8000254 <_ZN5W550013softwareResetEv+0x60>
	}
	return;
 800027c:	bf00      	nop
}
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <_ZN5W550016softwareResetPHYEv>:

// программный сброс PHY
void W5500::softwareResetPHY()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af02      	add	r7, sp, #8
 800028a:	6078      	str	r0, [r7, #4]
	// для программного сброса устанавливаем бит RST регистра PHYCFGR в "0"
	mosiBytes_w[0] = 0;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_PHYCFGR;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	222e      	movs	r2, #46	; 0x2e
 8000296:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2204      	movs	r2, #4
 800029c:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0b00111000;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2238      	movs	r2, #56	; 0x38
 80002a2:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6858      	ldr	r0, [r3, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	899b      	ldrh	r3, [r3, #12]
 80002ac:	2200      	movs	r2, #0
 80002ae:	4619      	mov	r1, r3
 80002b0:	f001 fd8a 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 100);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f103 0110 	add.w	r1, r3, #16
 80002be:	2364      	movs	r3, #100	; 0x64
 80002c0:	2204      	movs	r2, #4
 80002c2:	f002 fa51 	bl	8002768 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	6858      	ldr	r0, [r3, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	899b      	ldrh	r3, [r3, #12]
 80002ce:	2201      	movs	r2, #1
 80002d0:	4619      	mov	r1, r3
 80002d2:	f001 fd79 	bl	8001dc8 <HAL_GPIO_WritePin>
	mosiBytes_w[2] = 0;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	749a      	strb	r2, [r3, #18]
	misoBytes_w[3] = 0;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	// ждём подтверждения сброса - бит RST регистра PHYCFGR должен установиться в "1"
	while(!(misoBytes_w[3] & 0b10000000))
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0d      	blt.n	800030c <_ZN5W550016softwareResetPHYEv+0x88>
	{
		HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6818      	ldr	r0, [r3, #0]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f103 0110 	add.w	r1, r3, #16
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000300:	2364      	movs	r3, #100	; 0x64
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2304      	movs	r3, #4
 8000306:	f002 fb6b 	bl	80029e0 <HAL_SPI_TransmitReceive>
	while(!(misoBytes_w[3] & 0b10000000))
 800030a:	e7eb      	b.n	80002e4 <_ZN5W550016softwareResetPHYEv+0x60>
	}
	return;
 800030c:	bf00      	nop
}
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <_ZN5W550015readByteFromCRBEh>:

//---------------------------------------------------------------------------

// читаем байт из регистра блока CRB
uint8_t W5500::readByteFromCRB(uint8_t address)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af02      	add	r7, sp, #8
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
	mosiBytes_w[0] = 0;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2200      	movs	r2, #0
 8000324:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	78fa      	ldrb	r2, [r7, #3]
 800032a:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2200      	movs	r2, #0
 8000330:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6858      	ldr	r0, [r3, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	899b      	ldrh	r3, [r3, #12]
 800033a:	2200      	movs	r2, #0
 800033c:	4619      	mov	r1, r3
 800033e:	f001 fd43 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6818      	ldr	r0, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f103 0110 	add.w	r1, r3, #16
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000356:	9300      	str	r3, [sp, #0]
 8000358:	2304      	movs	r3, #4
 800035a:	f002 fb41 	bl	80029e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	6858      	ldr	r0, [r3, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	899b      	ldrh	r3, [r3, #12]
 8000366:	2201      	movs	r2, #1
 8000368:	4619      	mov	r1, r3
 800036a:	f001 fd2d 	bl	8001dc8 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000374:	4618      	mov	r0, r3
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <_ZN5W550016readArrayFromCRBEPhhh>:
	return temp.word;
}

// читаем массив байт из регистров блока CRB
void W5500::readArrayFromCRB(uint8_t* destinationArray, uint8_t sizeArray, uint8_t beginAddress)
{
 800037c:	b590      	push	{r4, r7, lr}
 800037e:	b089      	sub	sp, #36	; 0x24
 8000380:	af02      	add	r7, sp, #8
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	4611      	mov	r1, r2
 8000388:	461a      	mov	r2, r3
 800038a:	460b      	mov	r3, r1
 800038c:	71fb      	strb	r3, [r7, #7]
 800038e:	4613      	mov	r3, r2
 8000390:	71bb      	strb	r3, [r7, #6]
	mosiBytes_w[0] = 0;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	2200      	movs	r2, #0
 8000396:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	79ba      	ldrb	r2, [r7, #6]
 800039c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2200      	movs	r2, #0
 80003a2:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	6858      	ldr	r0, [r3, #4]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	899b      	ldrh	r3, [r3, #12]
 80003ac:	2200      	movs	r2, #0
 80003ae:	4619      	mov	r1, r3
 80003b0:	f001 fd0a 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, (sizeArray + 3), 1000);
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	6818      	ldr	r0, [r3, #0]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f103 0110 	add.w	r1, r3, #16
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	3303      	adds	r3, #3
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80003d0:	9400      	str	r4, [sp, #0]
 80003d2:	f002 fb05 	bl	80029e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	6858      	ldr	r0, [r3, #4]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	899b      	ldrh	r3, [r3, #12]
 80003de:	2201      	movs	r2, #1
 80003e0:	4619      	mov	r1, r3
 80003e2:	f001 fcf1 	bl	8001dc8 <HAL_GPIO_WritePin>
	for(int i = 0; i < sizeArray; ++i)
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	da0d      	bge.n	800040e <_ZN5W550016readArrayFromCRBEPhhh+0x92>
	{
		destinationArray[i] = misoBytes_w[i+3];
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	1cda      	adds	r2, r3, #3
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	68b9      	ldr	r1, [r7, #8]
 80003fa:	440b      	add	r3, r1
 80003fc:	68f9      	ldr	r1, [r7, #12]
 80003fe:	440a      	add	r2, r1
 8000400:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 8000404:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeArray; ++i)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3301      	adds	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	e7ed      	b.n	80003ea <_ZN5W550016readArrayFromCRBEPhhh+0x6e>
	}
	return;
 800040e:	bf00      	nop
}
 8000410:	371c      	adds	r7, #28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd90      	pop	{r4, r7, pc}

08000416 <_ZN5W550015writeArrayToCRBEPhhh>:
	return;
}

// записываем массив байт в регистры блока CRB
void W5500::writeArrayToCRB(uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b086      	sub	sp, #24
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	4611      	mov	r1, r2
 8000422:	461a      	mov	r2, r3
 8000424:	460b      	mov	r3, r1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	71bb      	strb	r3, [r7, #6]
	mosiBytes_w[0] = 0;
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	2200      	movs	r2, #0
 8000430:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	79ba      	ldrb	r2, [r7, #6]
 8000436:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2204      	movs	r2, #4
 800043c:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	429a      	cmp	r2, r3
 8000448:	da0d      	bge.n	8000466 <_ZN5W550015writeArrayToCRBEPhhh+0x50>
	{
		mosiBytes_w[i+3] = array[i];
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	441a      	add	r2, r3
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	3303      	adds	r3, #3
 8000454:	7811      	ldrb	r1, [r2, #0]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	4413      	add	r3, r2
 800045a:	460a      	mov	r2, r1
 800045c:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	3301      	adds	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	e7ed      	b.n	8000442 <_ZN5W550015writeArrayToCRBEPhhh+0x2c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6858      	ldr	r0, [r3, #4]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	899b      	ldrh	r3, [r3, #12]
 800046e:	2200      	movs	r2, #0
 8000470:	4619      	mov	r1, r3
 8000472:	f001 fca9 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f103 0110 	add.w	r1, r3, #16
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	b29b      	uxth	r3, r3
 8000484:	3303      	adds	r3, #3
 8000486:	b29a      	uxth	r2, r3
 8000488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800048c:	f002 f96c 	bl	8002768 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	6858      	ldr	r0, [r3, #4]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	2201      	movs	r2, #1
 800049a:	4619      	mov	r1, r3
 800049c:	f001 fc94 	bl	8001dc8 <HAL_GPIO_WritePin>
	return;
 80004a0:	bf00      	nop
}
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <_ZN5W550015readByteFromSRBEhh>:

// читаем байт из регистра блока SRB
uint8_t W5500::readByteFromSRB(uint8_t socket, uint8_t address)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]
 80004b4:	4613      	mov	r3, r2
 80004b6:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	78ba      	ldrb	r2, [r7, #2]
 80004c2:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	78fa      	ldrb	r2, [r7, #3]
 80004c8:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6858      	ldr	r0, [r3, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	899b      	ldrh	r3, [r3, #12]
 80004d2:	2200      	movs	r2, #0
 80004d4:	4619      	mov	r1, r3
 80004d6:	f001 fc77 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6818      	ldr	r0, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f103 0110 	add.w	r1, r3, #16
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80004ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2304      	movs	r3, #4
 80004f2:	f002 fa75 	bl	80029e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6858      	ldr	r0, [r3, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	899b      	ldrh	r3, [r3, #12]
 80004fe:	2201      	movs	r2, #1
 8000500:	4619      	mov	r1, r3
 8000502:	f001 fc61 	bl	8001dc8 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <_ZN5W550015readWordFromSRBEhh>:

// читаем слово (2 байта) из регистров блока SRB
uint16_t W5500::readWordFromSRB(uint8_t socket, uint8_t address)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
 8000520:	4613      	mov	r3, r2
 8000522:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	78ba      	ldrb	r2, [r7, #2]
 800052e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	78fa      	ldrb	r2, [r7, #3]
 8000534:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6858      	ldr	r0, [r3, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	899b      	ldrh	r3, [r3, #12]
 800053e:	2200      	movs	r2, #0
 8000540:	4619      	mov	r1, r3
 8000542:	f001 fc41 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 5, 1000);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f103 0110 	add.w	r1, r3, #16
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2305      	movs	r3, #5
 800055e:	f002 fa3f 	bl	80029e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6858      	ldr	r0, [r3, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	899b      	ldrh	r3, [r3, #12]
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	f001 fc2b 	bl	8001dc8 <HAL_GPIO_WritePin>
	word_w5500 temp;
	temp.byte[0] = misoBytes_w[4];
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8000578:	733b      	strb	r3, [r7, #12]
	temp.byte[1] = misoBytes_w[3];
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8000580:	737b      	strb	r3, [r7, #13]
	return temp.word;
 8000582:	89bb      	ldrh	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <_ZN5W550016readArrayFromSRBEhPhhh>:

// читаем массив байт из регистров блока SRB
void W5500::readArrayFromSRB(uint8_t socket, uint8_t* destinationArray, uint8_t sizeArray, uint8_t beginAddress)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b089      	sub	sp, #36	; 0x24
 8000590:	af02      	add	r7, sp, #8
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	461a      	mov	r2, r3
 8000598:	460b      	mov	r3, r1
 800059a:	72fb      	strb	r3, [r7, #11]
 800059c:	4613      	mov	r3, r2
 800059e:	72bb      	strb	r3, [r7, #10]
	mosiBytes_w[0] = 0;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80005ac:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	7afa      	ldrb	r2, [r7, #11]
 80005b2:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6858      	ldr	r0, [r3, #4]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	899b      	ldrh	r3, [r3, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	4619      	mov	r1, r3
 80005c0:	f001 fc02 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, (sizeArray + 3), 1000);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f103 0110 	add.w	r1, r3, #16
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80005d4:	7abb      	ldrb	r3, [r7, #10]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	3303      	adds	r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80005e0:	9400      	str	r4, [sp, #0]
 80005e2:	f002 f9fd 	bl	80029e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	6858      	ldr	r0, [r3, #4]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	899b      	ldrh	r3, [r3, #12]
 80005ee:	2201      	movs	r2, #1
 80005f0:	4619      	mov	r1, r3
 80005f2:	f001 fbe9 	bl	8001dc8 <HAL_GPIO_WritePin>
	for(int i = 0; i < sizeArray; ++i)
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	7abb      	ldrb	r3, [r7, #10]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	429a      	cmp	r2, r3
 8000600:	da0d      	bge.n	800061e <_ZN5W550016readArrayFromSRBEhPhhh+0x92>
	{
		destinationArray[i] = misoBytes_w[i+3];
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	1cda      	adds	r2, r3, #3
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	440b      	add	r3, r1
 800060c:	68f9      	ldr	r1, [r7, #12]
 800060e:	440a      	add	r2, r1
 8000610:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 8000614:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeArray; ++i)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	e7ed      	b.n	80005fa <_ZN5W550016readArrayFromSRBEhPhhh+0x6e>
	}
	return;
 800061e:	bf00      	nop
}
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd90      	pop	{r4, r7, pc}

08000626 <_ZN5W550014writeByteToSRBEhhh>:

// записываем байт в регистр блока SRB
void W5500::writeByteToSRB(uint8_t socket, uint8_t value, uint8_t address)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	4608      	mov	r0, r1
 8000630:	4611      	mov	r1, r2
 8000632:	461a      	mov	r2, r3
 8000634:	4603      	mov	r3, r0
 8000636:	70fb      	strb	r3, [r7, #3]
 8000638:	460b      	mov	r3, r1
 800063a:	70bb      	strb	r3, [r7, #2]
 800063c:	4613      	mov	r3, r2
 800063e:	707b      	strb	r3, [r7, #1]
	mosiBytes_w[0] = 0;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	787a      	ldrb	r2, [r7, #1]
 800064a:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = value;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	78ba      	ldrb	r2, [r7, #2]
 800065c:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6858      	ldr	r0, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	899b      	ldrh	r3, [r3, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	f001 fbad 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 1000);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f103 0110 	add.w	r1, r3, #16
 8000678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067c:	2204      	movs	r2, #4
 800067e:	f002 f873 	bl	8002768 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6858      	ldr	r0, [r3, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	899b      	ldrh	r3, [r3, #12]
 800068a:	2201      	movs	r2, #1
 800068c:	4619      	mov	r1, r3
 800068e:	f001 fb9b 	bl	8001dc8 <HAL_GPIO_WritePin>
	return;
 8000692:	bf00      	nop
}
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_ZN5W550014writeWordToSRBEhth>:

// записываем слово (2 байта) в регистры блока SRB
void W5500::writeWordToSRB(uint8_t socket, uint16_t value, uint8_t address)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	4608      	mov	r0, r1
 80006a4:	4611      	mov	r1, r2
 80006a6:	461a      	mov	r2, r3
 80006a8:	4603      	mov	r3, r0
 80006aa:	70fb      	strb	r3, [r7, #3]
 80006ac:	460b      	mov	r3, r1
 80006ae:	803b      	strh	r3, [r7, #0]
 80006b0:	4613      	mov	r3, r2
 80006b2:	70bb      	strb	r3, [r7, #2]
	word_w5500 temp;
	temp.word = value;
 80006b4:	883b      	ldrh	r3, [r7, #0]
 80006b6:	81bb      	strh	r3, [r7, #12]
	mosiBytes_w[0] = 0;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2200      	movs	r2, #0
 80006bc:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	78ba      	ldrb	r2, [r7, #2]
 80006c2:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = temp.byte[1];
 80006d0:	7b7a      	ldrb	r2, [r7, #13]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = temp.byte[0];
 80006d6:	7b3a      	ldrb	r2, [r7, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	751a      	strb	r2, [r3, #20]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6858      	ldr	r0, [r3, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	899b      	ldrh	r3, [r3, #12]
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	f001 fb6e 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 5, 1000);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 0110 	add.w	r1, r3, #16
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	2205      	movs	r2, #5
 80006fc:	f002 f834 	bl	8002768 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6858      	ldr	r0, [r3, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	899b      	ldrh	r3, [r3, #12]
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	f001 fb5c 	bl	8001dc8 <HAL_GPIO_WritePin>
	return;
 8000710:	bf00      	nop
}
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZN5W550015writeArrayToSRBEhPhhh>:

// записываем массив байт в регистры блока SRB
void W5500::writeArrayToSRB(uint8_t socket, uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	461a      	mov	r2, r3
 8000724:	460b      	mov	r3, r1
 8000726:	72fb      	strb	r3, [r7, #11]
 8000728:	4613      	mov	r3, r2
 800072a:	72bb      	strb	r3, [r7, #10]
	mosiBytes_w[0] = 0;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000738:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	b2da      	uxtb	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	7abb      	ldrb	r3, [r7, #10]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	429a      	cmp	r2, r3
 8000750:	da0d      	bge.n	800076e <_ZN5W550015writeArrayToSRBEhPhhh+0x56>
	{
		mosiBytes_w[i+3] = array[i];
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	441a      	add	r2, r3
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	3303      	adds	r3, #3
 800075c:	7811      	ldrb	r1, [r2, #0]
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	460a      	mov	r2, r1
 8000764:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	e7ed      	b.n	800074a <_ZN5W550015writeArrayToSRBEhPhhh+0x32>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	6858      	ldr	r0, [r3, #4]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	899b      	ldrh	r3, [r3, #12]
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	f001 fb25 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f103 0110 	add.w	r1, r3, #16
 8000788:	7abb      	ldrb	r3, [r7, #10]
 800078a:	b29b      	uxth	r3, r3
 800078c:	3303      	adds	r3, #3
 800078e:	b29a      	uxth	r2, r3
 8000790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000794:	f001 ffe8 	bl	8002768 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	6858      	ldr	r0, [r3, #4]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	899b      	ldrh	r3, [r3, #12]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	f001 fb10 	bl	8001dc8 <HAL_GPIO_WritePin>
	return;
 80007a8:	bf00      	nop
}
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZN5W550021readArrayFromRXbufferEhPht6word_y>:

//---------------------------------------------------------------------------

// читаем массив байт в буфер TX
void W5500::readArrayFromRXbuffer(uint8_t socket, uint8_t* destinationArray, uint16_t sizeArray, word_y beginAddress)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	461a      	mov	r2, r3
 80007bc:	460b      	mov	r3, r1
 80007be:	72fb      	strb	r3, [r7, #11]
 80007c0:	4613      	mov	r3, r2
 80007c2:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 80007c4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 80007cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket + 16);
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	3310      	adds	r3, #16
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6858      	ldr	r0, [r3, #4]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	899b      	ldrh	r3, [r3, #12]
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	f001 faed 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, (sizeArray + 3), 1000);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f103 0110 	add.w	r1, r3, #16
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80007fe:	893b      	ldrh	r3, [r7, #8]
 8000800:	3303      	adds	r3, #3
 8000802:	b29b      	uxth	r3, r3
 8000804:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000808:	9400      	str	r4, [sp, #0]
 800080a:	f002 f8e9 	bl	80029e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6858      	ldr	r0, [r3, #4]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	899b      	ldrh	r3, [r3, #12]
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	f001 fad5 	bl	8001dc8 <HAL_GPIO_WritePin>
	for(int i = 0; i < sizeArray; ++i)
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	893b      	ldrh	r3, [r7, #8]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	429a      	cmp	r2, r3
 8000828:	da0d      	bge.n	8000846 <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x96>
	{
		destinationArray[i] = misoBytes_w[i+3];
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	1cda      	adds	r2, r3, #3
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	440b      	add	r3, r1
 8000834:	68f9      	ldr	r1, [r7, #12]
 8000836:	440a      	add	r2, r1
 8000838:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 800083c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeArray; ++i)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e7ed      	b.n	8000822 <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x72>
	}
	return;
 8000846:	bf00      	nop
}
 8000848:	371c      	adds	r7, #28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd90      	pop	{r4, r7, pc}

0800084e <_ZN5W550020writeArrayToTXbufferEhPht6word_y>:


// записываем массив байт в буфер TX
void W5500::writeArrayToTXbuffer(uint8_t socket, uint8_t* array, uint16_t sizeArray, word_y beginAddress)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	461a      	mov	r2, r3
 800085a:	460b      	mov	r3, r1
 800085c:	72fb      	strb	r3, [r7, #11]
 800085e:	4613      	mov	r3, r2
 8000860:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 8000862:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 800086a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = ((socket + 8) | 0b00000100);
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	3308      	adds	r3, #8
 8000876:	b2db      	uxtb	r3, r3
 8000878:	b25b      	sxtb	r3, r3
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	b25b      	sxtb	r3, r3
 8000880:	b2da      	uxtb	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	893b      	ldrh	r3, [r7, #8]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	429a      	cmp	r2, r3
 8000890:	da0d      	bge.n	80008ae <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x60>
	{
		mosiBytes_w[i+3] = array[i];
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	441a      	add	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	3303      	adds	r3, #3
 800089c:	7811      	ldrb	r1, [r2, #0]
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	460a      	mov	r2, r1
 80008a4:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e7ed      	b.n	800088a <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x3c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	6858      	ldr	r0, [r3, #4]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	899b      	ldrh	r3, [r3, #12]
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	f001 fa85 	bl	8001dc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6818      	ldr	r0, [r3, #0]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f103 0110 	add.w	r1, r3, #16
 80008c8:	893b      	ldrh	r3, [r7, #8]
 80008ca:	3303      	adds	r3, #3
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	f001 ff49 	bl	8002768 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6858      	ldr	r0, [r3, #4]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	899b      	ldrh	r3, [r3, #12]
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	f001 fa71 	bl	8001dc8 <HAL_GPIO_WritePin>
	return;
 80008e6:	bf00      	nop
}
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <_ZN5W550013receivePacketEhPhPt>:

//---------------------------------------------------------------------------

// получаем данные по протоколу UDP
void W5500::receivePacket(uint8_t socket, uint8_t* dataForReceive, uint16_t* sizeArray)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b08a      	sub	sp, #40	; 0x28
 80008f2:	af02      	add	r7, sp, #8
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	460b      	mov	r3, r1
 80008fc:	72fb      	strb	r3, [r7, #11]
	// временные переменные для хранения значений регистров RX_RSR и RX_RD
	word_y valueRSR, valueRSRretry, valueRD;

	// читаем регистр RX_RSR (разница между значениями RX_WR и RX_RD)
	valueRSR.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80008fe:	7afb      	ldrb	r3, [r7, #11]
 8000900:	2226      	movs	r2, #38	; 0x26
 8000902:	4619      	mov	r1, r3
 8000904:	68f8      	ldr	r0, [r7, #12]
 8000906:	f7ff fe05 	bl	8000514 <_ZN5W550015readWordFromSRBEhh>
 800090a:	4603      	mov	r3, r0
 800090c:	83bb      	strh	r3, [r7, #28]
	// считываем еще раз
	valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 800090e:	7afb      	ldrb	r3, [r7, #11]
 8000910:	2226      	movs	r2, #38	; 0x26
 8000912:	4619      	mov	r1, r3
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f7ff fdfd 	bl	8000514 <_ZN5W550015readWordFromSRBEhh>
 800091a:	4603      	mov	r3, r0
 800091c:	833b      	strh	r3, [r7, #24]
	// сравниваем, тем самым исключая изменения в нём в момент считывания
	while (valueRSR.word != valueRSRretry.word)
 800091e:	8bba      	ldrh	r2, [r7, #28]
 8000920:	8b3b      	ldrh	r3, [r7, #24]
 8000922:	429a      	cmp	r2, r3
 8000924:	d00a      	beq.n	800093c <_ZN5W550013receivePacketEhPhPt+0x4e>
	{
		valueRSR.word = valueRSRretry.word;
 8000926:	8b3b      	ldrh	r3, [r7, #24]
 8000928:	83bb      	strh	r3, [r7, #28]
		valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	2226      	movs	r2, #38	; 0x26
 800092e:	4619      	mov	r1, r3
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff fdef 	bl	8000514 <_ZN5W550015readWordFromSRBEhh>
 8000936:	4603      	mov	r3, r0
 8000938:	833b      	strh	r3, [r7, #24]
	while (valueRSR.word != valueRSRretry.word)
 800093a:	e7f0      	b.n	800091e <_ZN5W550013receivePacketEhPhPt+0x30>
	}

	// читаем регистр RX_RD (указатель на начало полученных данных)
	valueRD.word = readWordFromSRB(socket, W5500_Sn_RX_RD);
 800093c:	7afb      	ldrb	r3, [r7, #11]
 800093e:	2228      	movs	r2, #40	; 0x28
 8000940:	4619      	mov	r1, r3
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f7ff fde6 	bl	8000514 <_ZN5W550015readWordFromSRBEhh>
 8000948:	4603      	mov	r3, r0
 800094a:	82bb      	strh	r3, [r7, #20]

	// читаем буфер RX
	readArrayFromRXbuffer(socket, dataForReceive, valueRSR.word, valueRD);
 800094c:	8bba      	ldrh	r2, [r7, #28]
 800094e:	7af9      	ldrb	r1, [r7, #11]
 8000950:	8abb      	ldrh	r3, [r7, #20]
 8000952:	f8ad 3000 	strh.w	r3, [sp]
 8000956:	4613      	mov	r3, r2
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f7ff ff28 	bl	80007b0 <_ZN5W550021readArrayFromRXbufferEhPht6word_y>

	// увеличиваем значение указателя на полученные данные на число считанных байт
	valueRD.word += valueRSR.word;
 8000960:	8aba      	ldrh	r2, [r7, #20]
 8000962:	8bbb      	ldrh	r3, [r7, #28]
 8000964:	4413      	add	r3, r2
 8000966:	b29b      	uxth	r3, r3
 8000968:	82bb      	strh	r3, [r7, #20]
	writeWordToSRB(socket, valueRD.word, W5500_Sn_RX_RD);
 800096a:	8aba      	ldrh	r2, [r7, #20]
 800096c:	7af9      	ldrb	r1, [r7, #11]
 800096e:	2328      	movs	r3, #40	; 0x28
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff fe92 	bl	800069a <_ZN5W550014writeWordToSRBEhth>

	// завершаем процесс чтения из буфера RX
	writeByteToSRB(socket, W5500_Sn_CR_RECV, W5500_Sn_CR);
 8000976:	7af9      	ldrb	r1, [r7, #11]
 8000978:	2301      	movs	r3, #1
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f7ff fe52 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>

	// записываем значение полученных байт
	*sizeArray = valueRSR.word;
 8000982:	8bba      	ldrh	r2, [r7, #28]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	801a      	strh	r2, [r3, #0]
	return;
 8000988:	bf00      	nop
}
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZN5W550010sendPacketEhPht>:

// отправляем данные по протоколу UDP
void W5500::sendPacket(uint8_t socket, uint8_t* dataForSend, uint16_t sizeArray)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	461a      	mov	r2, r3
 800099c:	460b      	mov	r3, r1
 800099e:	72fb      	strb	r3, [r7, #11]
 80009a0:	4613      	mov	r3, r2
 80009a2:	813b      	strh	r3, [r7, #8]
	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 80009a4:	7afb      	ldrb	r3, [r7, #11]
 80009a6:	2220      	movs	r2, #32
 80009a8:	4619      	mov	r1, r3
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fdb2 	bl	8000514 <_ZN5W550015readWordFromSRBEhh>
 80009b0:	4603      	mov	r3, r0
 80009b2:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 80009b4:	8abb      	ldrh	r3, [r7, #20]
 80009b6:	893a      	ldrh	r2, [r7, #8]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d823      	bhi.n	8000a04 <_ZN5W550010sendPacketEhPht+0x74>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 80009bc:	7afb      	ldrb	r3, [r7, #11]
 80009be:	2224      	movs	r2, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	68f8      	ldr	r0, [r7, #12]
 80009c4:	f7ff fda6 	bl	8000514 <_ZN5W550015readWordFromSRBEhh>
 80009c8:	4603      	mov	r3, r0
 80009ca:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, dataForSend, sizeArray, valueWR);
 80009cc:	893a      	ldrh	r2, [r7, #8]
 80009ce:	7af9      	ldrb	r1, [r7, #11]
 80009d0:	8a3b      	ldrh	r3, [r7, #16]
 80009d2:	f8ad 3000 	strh.w	r3, [sp]
 80009d6:	4613      	mov	r3, r2
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff ff37 	bl	800084e <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 80009e0:	8a3a      	ldrh	r2, [r7, #16]
 80009e2:	893b      	ldrh	r3, [r7, #8]
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 80009ea:	8a3a      	ldrh	r2, [r7, #16]
 80009ec:	7af9      	ldrb	r1, [r7, #11]
 80009ee:	2324      	movs	r3, #36	; 0x24
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fe52 	bl	800069a <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 80009f6:	7af9      	ldrb	r1, [r7, #11]
 80009f8:	2301      	movs	r3, #1
 80009fa:	2220      	movs	r2, #32
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fe12 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>
	return;
 8000a02:	e000      	b.n	8000a06 <_ZN5W550010sendPacketEhPht+0x76>
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000a04:	bf00      	nop
}
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 fe11 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f91d 	bl	8000c54 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f000 fa8d 	bl	8000f38 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000a1e:	f000 f969 	bl	8000cf4 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000a22:	f000 fa5b 	bl	8000edc <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 8000a26:	f000 f9fd 	bl	8000e24 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8000a2a:	f000 f99f 	bl	8000d6c <_ZL12MX_TIM3_Initv>
  //readFLASH();



  // Включаем чип W5500 через сброс
  ethernetA1.reset();
 8000a2e:	4874      	ldr	r0, [pc, #464]	; (8000c00 <main+0x1f4>)
 8000a30:	f7ff fbc2 	bl	80001b8 <_ZN5W55005resetEv>

  HAL_Delay(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f000 fe61 	bl	80016fc <HAL_Delay>
  ethernetA1.softwareResetPHY();
 8000a3a:	4871      	ldr	r0, [pc, #452]	; (8000c00 <main+0x1f4>)
 8000a3c:	f7ff fc22 	bl	8000284 <_ZN5W550016softwareResetPHYEv>
  HAL_Delay(100);
 8000a40:	2064      	movs	r0, #100	; 0x64
 8000a42:	f000 fe5b 	bl	80016fc <HAL_Delay>
  ethernetA1.softwareReset();
 8000a46:	486e      	ldr	r0, [pc, #440]	; (8000c00 <main+0x1f4>)
 8000a48:	f7ff fbd4 	bl	80001f4 <_ZN5W550013softwareResetEv>
  HAL_Delay(100);
 8000a4c:	2064      	movs	r0, #100	; 0x64
 8000a4e:	f000 fe55 	bl	80016fc <HAL_Delay>

  // Записываем "настройки" в блок регистров CRB
  ethernetA1.writeArrayToCRB(&crb.mr, 47, W5500_MR);
 8000a52:	2300      	movs	r3, #0
 8000a54:	222f      	movs	r2, #47	; 0x2f
 8000a56:	496b      	ldr	r1, [pc, #428]	; (8000c04 <main+0x1f8>)
 8000a58:	4869      	ldr	r0, [pc, #420]	; (8000c00 <main+0x1f4>)
 8000a5a:	f7ff fcdc 	bl	8000416 <_ZN5W550015writeArrayToCRBEPhhh>

  HAL_Delay(10);
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f000 fe4c 	bl	80016fc <HAL_Delay>

  // Устанавливаем режим UDP для сокета 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 8000a64:	2300      	movs	r3, #0
 8000a66:	2282      	movs	r2, #130	; 0x82
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4865      	ldr	r0, [pc, #404]	; (8000c00 <main+0x1f4>)
 8000a6c:	f7ff fddb 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>

  // Устанавливаем режим TCP для сокета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 8000a70:	2300      	movs	r3, #0
 8000a72:	2281      	movs	r2, #129	; 0x81
 8000a74:	2128      	movs	r1, #40	; 0x28
 8000a76:	4862      	ldr	r0, [pc, #392]	; (8000c00 <main+0x1f4>)
 8000a78:	f7ff fdd5 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывания при отправке для сокета 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 8000a7c:	232c      	movs	r3, #44	; 0x2c
 8000a7e:	22ef      	movs	r2, #239	; 0xef
 8000a80:	2108      	movs	r1, #8
 8000a82:	485f      	ldr	r0, [pc, #380]	; (8000c00 <main+0x1f4>)
 8000a84:	f7ff fdcf 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывания при отправке, соединении и разрыве для сокета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IMR_SEND_OK_OFF & W5500_Sn_IMR_DISCON_OFF & W5500_Sn_IMR_CON_OFF, W5500_Sn_IMR);
 8000a88:	232c      	movs	r3, #44	; 0x2c
 8000a8a:	22ec      	movs	r2, #236	; 0xec
 8000a8c:	2128      	movs	r1, #40	; 0x28
 8000a8e:	485c      	ldr	r0, [pc, #368]	; (8000c00 <main+0x1f4>)
 8000a90:	f7ff fdc9 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(10);
 8000a94:	200a      	movs	r0, #10
 8000a96:	f000 fe31 	bl	80016fc <HAL_Delay>

  // Записываем порты, MAC, IP в блок регистров SRB сокета 0
  ethernetA1.writeArrayToSRB(SOCKET0, &srb0.sNport0, 14, W5500_Sn_PORT);
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	230e      	movs	r3, #14
 8000aa0:	4a59      	ldr	r2, [pc, #356]	; (8000c08 <main+0x1fc>)
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	4856      	ldr	r0, [pc, #344]	; (8000c00 <main+0x1f4>)
 8000aa6:	f7ff fe37 	bl	8000718 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Записываем порты, MAC, IP в блок регистров SRB сокета 1
  ethernetA1.writeArrayToSRB(SOCKET1, &srb1.sNport0, 14, W5500_Sn_PORT);
 8000aaa:	2304      	movs	r3, #4
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	230e      	movs	r3, #14
 8000ab0:	4a56      	ldr	r2, [pc, #344]	; (8000c0c <main+0x200>)
 8000ab2:	2128      	movs	r1, #40	; 0x28
 8000ab4:	4852      	ldr	r0, [pc, #328]	; (8000c00 <main+0x1f4>)
 8000ab6:	f7ff fe2f 	bl	8000718 <_ZN5W550015writeArrayToSRBEhPhhh>

  HAL_Delay(10);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f000 fe1e 	bl	80016fc <HAL_Delay>

  // Открываем сокет 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	484e      	ldr	r0, [pc, #312]	; (8000c00 <main+0x1f4>)
 8000ac8:	f7ff fdad 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем сокет 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8000acc:	2301      	movs	r3, #1
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2128      	movs	r1, #40	; 0x28
 8000ad2:	484b      	ldr	r0, [pc, #300]	; (8000c00 <main+0x1f4>)
 8000ad4:	f7ff fda7 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 fe0f 	bl	80016fc <HAL_Delay>

  // проверяем что сокет 1 проиницилизирован и запускаем режим сервера
  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 8000ade:	2203      	movs	r2, #3
 8000ae0:	2128      	movs	r1, #40	; 0x28
 8000ae2:	4847      	ldr	r0, [pc, #284]	; (8000c00 <main+0x1f4>)
 8000ae4:	f7ff fce0 	bl	80004a8 <_ZN5W550015readByteFromSRBEhh>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b13      	cmp	r3, #19
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d005      	beq.n	8000b04 <main+0xf8>
  {
	  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8000af8:	2301      	movs	r3, #1
 8000afa:	2202      	movs	r2, #2
 8000afc:	2128      	movs	r1, #40	; 0x28
 8000afe:	4840      	ldr	r0, [pc, #256]	; (8000c00 <main+0x1f4>)
 8000b00:	f7ff fd91 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>
  }

  HAL_Delay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 fdf9 	bl	80016fc <HAL_Delay>
  //ethernetA1.readArrayFromSRB(SOCKET0, rxBytes, 48, W5500_Sn_MR);
  //HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
  //HAL_UART_Transmit_IT(&huart1, rxBytes, 48);

  // Разрешаем прием по UART
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4940      	ldr	r1, [pc, #256]	; (8000c10 <main+0x204>)
 8000b0e:	4841      	ldr	r0, [pc, #260]	; (8000c14 <main+0x208>)
 8000b10:	f002 ff63 	bl	80039da <HAL_UART_Receive_IT>

  //HAL_Delay(5000);
  //ethernetA1.sendDataUDP(SOCKET0, txPacket, 9);


  CLEAR_BIT(TIM3->SR, TIM_SR_UIF);
 8000b14:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <main+0x20c>)
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	4a3f      	ldr	r2, [pc, #252]	; (8000c18 <main+0x20c>)
 8000b1a:	f023 0301 	bic.w	r3, r3, #1
 8000b1e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(TIM4->SR, TIM_SR_UIF);
 8000b20:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <main+0x210>)
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	4a3d      	ldr	r2, [pc, #244]	; (8000c1c <main+0x210>)
 8000b26:	f023 0301 	bic.w	r3, r3, #1
 8000b2a:	6113      	str	r3, [r2, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(4000);
 8000b2c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000b30:	f000 fde4 	bl	80016fc <HAL_Delay>

	  ethernetA1.readArrayFromCRB(tempdata, 48, W5500_MR);
 8000b34:	2300      	movs	r3, #0
 8000b36:	2230      	movs	r2, #48	; 0x30
 8000b38:	4939      	ldr	r1, [pc, #228]	; (8000c20 <main+0x214>)
 8000b3a:	4831      	ldr	r0, [pc, #196]	; (8000c00 <main+0x1f4>)
 8000b3c:	f7ff fc1e 	bl	800037c <_ZN5W550016readArrayFromCRBEPhhh>
	  ethernetA1.readArrayFromSRB(SOCKET0, &tempdata[48], 48, W5500_Sn_MR);
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2330      	movs	r3, #48	; 0x30
 8000b46:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <main+0x218>)
 8000b48:	2108      	movs	r1, #8
 8000b4a:	482d      	ldr	r0, [pc, #180]	; (8000c00 <main+0x1f4>)
 8000b4c:	f7ff fd1e 	bl	800058c <_ZN5W550016readArrayFromSRBEhPhhh>
	  ethernetA1.readArrayFromSRB(SOCKET1, &tempdata[96], 48, W5500_Sn_MR);
 8000b50:	2300      	movs	r3, #0
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2330      	movs	r3, #48	; 0x30
 8000b56:	4a34      	ldr	r2, [pc, #208]	; (8000c28 <main+0x21c>)
 8000b58:	2128      	movs	r1, #40	; 0x28
 8000b5a:	4829      	ldr	r0, [pc, #164]	; (8000c00 <main+0x1f4>)
 8000b5c:	f7ff fd16 	bl	800058c <_ZN5W550016readArrayFromSRBEhPhhh>
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	4831      	ldr	r0, [pc, #196]	; (8000c2c <main+0x220>)
 8000b68:	f001 f92e 	bl	8001dc8 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit_IT(&huart1, tempdata, 144);
 8000b6c:	2290      	movs	r2, #144	; 0x90
 8000b6e:	492c      	ldr	r1, [pc, #176]	; (8000c20 <main+0x214>)
 8000b70:	4828      	ldr	r0, [pc, #160]	; (8000c14 <main+0x208>)
 8000b72:	f002 feee 	bl	8003952 <HAL_UART_Transmit_IT>
	  //{
	//	  ethernetA1.sendPacket(SOCKET1, txPacket, 9);
	  //}


	  if (socket1dataReady)
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <main+0x224>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01a      	beq.n	8000bb4 <main+0x1a8>
	  {
		  if(HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY)
 8000b7e:	4825      	ldr	r0, [pc, #148]	; (8000c14 <main+0x208>)
 8000b80:	f003 f91a 	bl	8003db8 <HAL_UART_GetState>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b20      	cmp	r3, #32
 8000b88:	bf0c      	ite	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	2300      	movne	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00f      	beq.n	8000bb4 <main+0x1a8>
		  {
			  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9a:	4824      	ldr	r0, [pc, #144]	; (8000c2c <main+0x220>)
 8000b9c:	f001 f914 	bl	8001dc8 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, receiveSocket1data, sizeOfReceiveSocket1data);
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <main+0x228>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4924      	ldr	r1, [pc, #144]	; (8000c38 <main+0x22c>)
 8000ba8:	481a      	ldr	r0, [pc, #104]	; (8000c14 <main+0x208>)
 8000baa:	f002 fed2 	bl	8003952 <HAL_UART_Transmit_IT>

			  socket1dataReady = false;
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <main+0x224>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
		  }
	  }


	  if (rxPacketIsReady)
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <main+0x230>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00a      	beq.n	8000bd2 <main+0x1c6>
			  }
		  }
		  */

		  // отправляем данные, принятые по UART, по UDP
		  ethernetA1.sendPacket(SOCKET0, rxBytesToParse, rxCounterToParse);
 8000bbc:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <main+0x234>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <main+0x238>)
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	480e      	ldr	r0, [pc, #56]	; (8000c00 <main+0x1f4>)
 8000bc8:	f7ff fee2 	bl	8000990 <_ZN5W550010sendPacketEhPht>


		  // сбрасываем флаг
		  rxPacketIsReady = false;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <main+0x230>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
	  }



	  if(misoReady)
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <main+0x23c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0a8      	beq.n	8000b2c <main+0x120>
	  {
		  //HAL_Delay(1000);
		  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <main+0x220>)
 8000be2:	f001 f8f1 	bl	8001dc8 <HAL_GPIO_WritePin>
		  HAL_UART_Transmit_IT(&huart1, &receiveData[8], (SizeOfReceiveData - 8) );
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <main+0x240>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	3b08      	subs	r3, #8
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4917      	ldr	r1, [pc, #92]	; (8000c50 <main+0x244>)
 8000bf2:	4808      	ldr	r0, [pc, #32]	; (8000c14 <main+0x208>)
 8000bf4:	f002 fead 	bl	8003952 <HAL_UART_Transmit_IT>
		  misoReady = false;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <main+0x23c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(4000);
 8000bfe:	e795      	b.n	8000b2c <main+0x120>
 8000c00:	20000cfc 	.word	0x20000cfc
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000034 	.word	0x20000034
 8000c0c:	20000064 	.word	0x20000064
 8000c10:	200002ea 	.word	0x200002ea
 8000c14:	200001a0 	.word	0x200001a0
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	40000800 	.word	0x40000800
 8000c20:	20000bfc 	.word	0x20000bfc
 8000c24:	20000c2c 	.word	0x20000c2c
 8000c28:	20000c5c 	.word	0x20000c5c
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	200003f2 	.word	0x200003f2
 8000c34:	20000bfa 	.word	0x20000bfa
 8000c38:	200003f4 	.word	0x200003f4
 8000c3c:	200003f1 	.word	0x200003f1
 8000c40:	200003f0 	.word	0x200003f0
 8000c44:	20000370 	.word	0x20000370
 8000c48:	200001e4 	.word	0x200001e4
 8000c4c:	200002e8 	.word	0x200002e8
 8000c50:	200001f0 	.word	0x200001f0

08000c54 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b090      	sub	sp, #64	; 0x40
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	2228      	movs	r2, #40	; 0x28
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fb00 	bl	8004268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 f8c3 	bl	8001e28 <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000cb2:	f000 fae3 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fb2b 	bl	800232c <HAL_RCC_ClockConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bf14      	ite	ne
 8000cdc:	2301      	movne	r3, #1
 8000cde:	2300      	moveq	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000ce6:	f000 fac9 	bl	800127c <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3740      	adds	r7, #64	; 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <_ZL12MX_SPI1_Initv+0x74>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d44:	4807      	ldr	r0, [pc, #28]	; (8000d64 <_ZL12MX_SPI1_Initv+0x70>)
 8000d46:	f001 fc8b 	bl	8002660 <HAL_SPI_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	bf14      	ite	ne
 8000d50:	2301      	movne	r3, #1
 8000d52:	2300      	moveq	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 fa8f 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000b8 	.word	0x200000b8
 8000d68:	40013000 	.word	0x40013000

08000d6c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000d8a:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <_ZL12MX_TIM3_Initv+0xb4>)
 8000d8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000d9c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000da0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dae:	481b      	ldr	r0, [pc, #108]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000db0:	f002 f962 	bl	8003078 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bf14      	ite	ne
 8000dba:	2301      	movne	r3, #1
 8000dbc:	2300      	moveq	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8000dc4:	f000 fa5a 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4811      	ldr	r0, [pc, #68]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000dd6:	f002 fb1f 	bl	8003418 <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf14      	ite	ne
 8000de0:	2301      	movne	r3, #1
 8000de2:	2300      	moveq	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8000dea:	f000 fa47 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4808      	ldr	r0, [pc, #32]	; (8000e1c <_ZL12MX_TIM3_Initv+0xb0>)
 8000dfc:	f002 fcec 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	2300      	moveq	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8000e10:	f000 fa34 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000110 	.word	0x20000110
 8000e20:	40000400 	.word	0x40000400

08000e24 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000e42:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000e44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000e48:	2203      	movs	r2, #3
 8000e4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000e54:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000e58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e66:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000e68:	f002 f906 	bl	8003078 <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf14      	ite	ne
 8000e72:	2301      	movne	r3, #1
 8000e74:	2300      	moveq	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8000e7c:	f000 f9fe 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000e8e:	f002 fac3 	bl	8003418 <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8000ea2:	f000 f9eb 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000eb4:	f002 fc90 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bf14      	ite	ne
 8000ebe:	2301      	movne	r3, #1
 8000ec0:	2300      	moveq	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8000ec8:	f000 f9d8 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000158 	.word	0x20000158
 8000ed8:	40000800 	.word	0x40000800

08000edc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ee8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f14:	f002 fcd0 	bl	80038b8 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	bf14      	ite	ne
 8000f1e:	2301      	movne	r3, #1
 8000f20:	2300      	moveq	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000f28:	f000 f9a8 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001a0 	.word	0x200001a0
 8000f34:	40013800 	.word	0x40013800

08000f38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4c:	4b41      	ldr	r3, [pc, #260]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a40      	ldr	r2, [pc, #256]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0320 	and.w	r3, r3, #32
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a34      	ldr	r2, [pc, #208]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b32      	ldr	r3, [pc, #200]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <_ZL12MX_GPIO_Initv+0x11c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4829      	ldr	r0, [pc, #164]	; (8001058 <_ZL12MX_GPIO_Initv+0x120>)
 8000fb2:	f000 ff09 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4827      	ldr	r0, [pc, #156]	; (8001058 <_ZL12MX_GPIO_Initv+0x120>)
 8000fbc:	f000 ff04 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000fc6:	4825      	ldr	r0, [pc, #148]	; (800105c <_ZL12MX_GPIO_Initv+0x124>)
 8000fc8:	f000 fefe 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <_ZL12MX_GPIO_Initv+0x128>)
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4821      	ldr	r0, [pc, #132]	; (8001064 <_ZL12MX_GPIO_Initv+0x12c>)
 8000fe0:	f000 fd6e 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 8000fe4:	2330      	movs	r3, #48	; 0x30
 8000fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4817      	ldr	r0, [pc, #92]	; (8001058 <_ZL12MX_GPIO_Initv+0x120>)
 8000ffc:	f000 fd60 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8001000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001006:	2311      	movs	r3, #17
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2302      	movs	r3, #2
 8001010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4619      	mov	r1, r3
 8001018:	4810      	ldr	r0, [pc, #64]	; (800105c <_ZL12MX_GPIO_Initv+0x124>)
 800101a:	f000 fd51 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 800101e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4619      	mov	r1, r3
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <_ZL12MX_GPIO_Initv+0x124>)
 8001038:	f000 fd42 	bl	8001ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	200a      	movs	r0, #10
 8001042:	f000 fc56 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001046:	200a      	movs	r0, #10
 8001048:	f000 fc6f 	bl	800192a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	40011000 	.word	0x40011000
 800105c:	40010c00 	.word	0x40010c00
 8001060:	10210000 	.word	0x10210000
 8001064:	40010800 	.word	0x40010800

08001068 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_UART_RxCpltCallback+0x5c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d121      	bne.n	80010bc <HAL_UART_RxCpltCallback+0x54>
  {
	  // включаем cветодиод "RX"
	  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <HAL_UART_RxCpltCallback+0x60>)
 8001080:	f000 fea2 	bl	8001dc8 <HAL_GPIO_WritePin>

	  // запускаем таймер TIM4, отсчитываем время свечения cветодиода "RX"
	  HAL_TIM_Base_Start_IT(&htim4);
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <HAL_UART_RxCpltCallback+0x64>)
 8001086:	f002 f86d 	bl	8003164 <HAL_TIM_Base_Start_IT>

	  //HAL_TIM_Base_Stop(&htim3);

	  // обнуляем счетчик таймера TIM3
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_UART_RxCpltCallback+0x68>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

	  // запускаем таймер TIM3, отсчитываем время до следующего пакета по RX
	  HAL_TIM_Base_Start_IT(&htim3);
 8001092:	480f      	ldr	r0, [pc, #60]	; (80010d0 <HAL_UART_RxCpltCallback+0x68>)
 8001094:	f002 f866 	bl	8003164 <HAL_TIM_Base_Start_IT>

	  // сохраняем полученный байт в буфер
	  rxBytes[rxCounter] = rxByte;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_UART_RxCpltCallback+0x6c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_UART_RxCpltCallback+0x70>)
 80010a0:	7819      	ldrb	r1, [r3, #0]
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_UART_RxCpltCallback+0x74>)
 80010a4:	5499      	strb	r1, [r3, r2]

	  //buf1.put(rxByte);

	  // инкрементируем счетчик полученных байт
	  rxCounter++;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_UART_RxCpltCallback+0x6c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_UART_RxCpltCallback+0x6c>)
 80010b0:	701a      	strb	r2, [r3, #0]

	  // снова ждем приема байта по UART1
	  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	4908      	ldr	r1, [pc, #32]	; (80010d8 <HAL_UART_RxCpltCallback+0x70>)
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <HAL_UART_RxCpltCallback+0x5c>)
 80010b8:	f002 fc8f 	bl	80039da <HAL_UART_Receive_IT>
  }
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200001a0 	.word	0x200001a0
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	20000158 	.word	0x20000158
 80010d0:	20000110 	.word	0x20000110
 80010d4:	2000036c 	.word	0x2000036c
 80010d8:	200002ea 	.word	0x200002ea
 80010dc:	200002ec 	.word	0x200002ec

080010e0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_UART_TxCpltCallback+0x24>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d105      	bne.n	80010fc <HAL_UART_TxCpltCallback+0x1c>
  {
	  // гаcим cветодиод "TX"
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <HAL_UART_TxCpltCallback+0x28>)
 80010f8:	f000 fe66 	bl	8001dc8 <HAL_GPIO_WritePin>
  }
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200001a0 	.word	0x200001a0
 8001108:	40010c00 	.word	0x40010c00

0800110c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from TIM3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d121      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		HAL_TIM_Base_Stop(&htim3);
 800111e:	481b      	ldr	r0, [pc, #108]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001120:	f001 fff9 	bl	8003116 <HAL_TIM_Base_Stop>
		//HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
		//HAL_UART_Transmit_IT(&huart1, rxBytes, rxCounter);
		for (int i = 0; i < rxCounter; ++i)
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4293      	cmp	r3, r2
 8001132:	da0c      	bge.n	800114e <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			rxBytesToParse[i] = rxBytes[i];
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	7819      	ldrb	r1, [r3, #0]
 800113c:	4a16      	ldr	r2, [pc, #88]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	460a      	mov	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < rxCounter; ++i)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e7ec      	b.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
		rxCounterToParse = rxCounter;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001154:	701a      	strb	r2, [r3, #0]

		// устанавливаем флаг о готовности пакета, принятого по UART
		rxPacketIsReady = true;
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]

		rxCounter = 0;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]

		//HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
	}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM4
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d108      	bne.n	800117e <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		HAL_TIM_Base_Stop(&htim4);
 800116c:	480e      	ldr	r0, [pc, #56]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800116e:	f001 ffd2 	bl	8003116 <HAL_TIM_Base_Stop>
		// гаcим cветодиод "RX"
		HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800117a:	f000 fe25 	bl	8001dc8 <HAL_GPIO_WritePin>
	}
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40000400 	.word	0x40000400
 800118c:	20000110 	.word	0x20000110
 8001190:	2000036c 	.word	0x2000036c
 8001194:	200002ec 	.word	0x200002ec
 8001198:	20000370 	.word	0x20000370
 800119c:	200003f0 	.word	0x200003f0
 80011a0:	200003f1 	.word	0x200003f1
 80011a4:	40000800 	.word	0x40000800
 80011a8:	20000158 	.word	0x20000158
 80011ac:	40010c00 	.word	0x40010c00

080011b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == W5500_INT_Pin)
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b10      	cmp	r3, #16
 80011be:	d14a      	bne.n	8001256 <HAL_GPIO_EXTI_Callback+0xa6>
	{
		// читаем флаги прерываний от сокетов
		uint8_t valueSIR = ethernetA1.readByteFromCRB(W5500_SIR);
 80011c0:	2117      	movs	r1, #23
 80011c2:	4827      	ldr	r0, [pc, #156]	; (8001260 <HAL_GPIO_EXTI_Callback+0xb0>)
 80011c4:	f7ff f8a6 	bl	8000314 <_ZN5W550015readByteFromCRBEh>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]
		uint8_t valueSn_IR {0};
 80011cc:	2300      	movs	r3, #0
 80011ce:	73bb      	strb	r3, [r7, #14]
		if (valueSIR)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d03f      	beq.n	8001256 <HAL_GPIO_EXTI_Callback+0xa6>
		{
			if (valueSIR & W5500_S0_INT)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01a      	beq.n	8001216 <HAL_GPIO_EXTI_Callback+0x66>
			{
				// читаем флаги прерываний сокета 0
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET0, W5500_Sn_IR);
 80011e0:	2202      	movs	r2, #2
 80011e2:	2108      	movs	r1, #8
 80011e4:	481e      	ldr	r0, [pc, #120]	; (8001260 <HAL_GPIO_EXTI_Callback+0xb0>)
 80011e6:	f7ff f95f 	bl	80004a8 <_ZN5W550015readByteFromSRBEhh>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00e      	beq.n	8001216 <HAL_GPIO_EXTI_Callback+0x66>
				{
					ethernetA1.receivePacket(SOCKET0, receiveData, &SizeOfReceiveData);
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_GPIO_EXTI_Callback+0xb4>)
 80011fa:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <HAL_GPIO_EXTI_Callback+0xb8>)
 80011fc:	2108      	movs	r1, #8
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001200:	f7ff fb75 	bl	80008ee <_ZN5W550013receivePacketEhPhPt>
					misoReady = true;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]

					// сбрасываем флаг прерывания RECV в регистре S0_IR
					ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IR_RECV, W5500_Sn_IR);
 800120a:	2302      	movs	r3, #2
 800120c:	2204      	movs	r2, #4
 800120e:	2108      	movs	r1, #8
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001212:	f7ff fa08 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>
				}
				// сбрасываем флаг прерывания в чипе W5500
				//ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IR_ALL, W5500_Sn_IR);
			}

			if (valueSIR & W5500_S1_INT)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01a      	beq.n	8001256 <HAL_GPIO_EXTI_Callback+0xa6>
			{
				// читаем флаги прерываний сокета 1
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_IR);
 8001220:	2202      	movs	r2, #2
 8001222:	2128      	movs	r1, #40	; 0x28
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001226:	f7ff f93f 	bl	80004a8 <_ZN5W550015readByteFromSRBEhh>
 800122a:	4603      	mov	r3, r0
 800122c:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <HAL_GPIO_EXTI_Callback+0xa6>
				{
					ethernetA1.receivePacket(SOCKET1, receiveSocket1data, &sizeOfReceiveSocket1data);
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_GPIO_EXTI_Callback+0xc0>)
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_GPIO_EXTI_Callback+0xc4>)
 800123c:	2128      	movs	r1, #40	; 0x28
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001240:	f7ff fb55 	bl	80008ee <_ZN5W550013receivePacketEhPhPt>
					socket1dataReady = true;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]



					// сбрасываем флаг прерывания RECV в регистре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_RECV, W5500_Sn_IR);
 800124a:	2302      	movs	r3, #2
 800124c:	2204      	movs	r2, #4
 800124e:	2128      	movs	r1, #40	; 0x28
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001252:	f7ff f9e8 	bl	8000626 <_ZN5W550014writeByteToSRBEhhh>
				// сбрасываем флаг прерывания в чипе W5500
				//ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IR_ALL, W5500_Sn_IR);
			}
		}
	}
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000cfc 	.word	0x20000cfc
 8001264:	200002e8 	.word	0x200002e8
 8001268:	200001e8 	.word	0x200001e8
 800126c:	200001e4 	.word	0x200001e4
 8001270:	20000bfa 	.word	0x20000bfa
 8001274:	200003f4 	.word	0x200003f4
 8001278:	200003f2 	.word	0x200003f2

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d10e      	bne.n	80012b6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	4293      	cmp	r3, r2
 80012a0:	d109      	bne.n	80012b6 <_Z41__static_initialization_and_destruction_0ii+0x2e>
W5500 ethernetA1(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);
 80012a2:	2310      	movs	r3, #16
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2320      	movs	r3, #32
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80012ae:	490a      	ldr	r1, [pc, #40]	; (80012d8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80012b2:	f7fe ff4b 	bl	800014c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d107      	bne.n	80012cc <_Z41__static_initialization_and_destruction_0ii+0x44>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d102      	bne.n	80012cc <_Z41__static_initialization_and_destruction_0ii+0x44>
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80012c8:	f7fe ff6c 	bl	80001a4 <_ZN5W5500D1Ev>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40011000 	.word	0x40011000
 80012d8:	200000b8 	.word	0x200000b8
 80012dc:	20000cfc 	.word	0x20000cfc

080012e0 <_GLOBAL__sub_I_hspi1>:
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff ffcd 	bl	8001288 <_Z41__static_initialization_and_destruction_0ii>
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_GLOBAL__sub_D_hspi1>:
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff ffc5 	bl	8001288 <_Z41__static_initialization_and_destruction_0ii>
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_MspInit>:
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_MspInit+0x5c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_MspInit+0x5c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_MspInit+0x60>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_MspInit+0x60>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6053      	str	r3, [r2, #4]
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <HAL_SPI_MspInit>:
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_SPI_MspInit+0x98>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d137      	bne.n	80013f4 <HAL_SPI_MspInit+0x90>
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_SPI_MspInit+0x9c>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_SPI_MspInit+0x9c>)
 800138a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_SPI_MspInit+0x9c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_SPI_MspInit+0x9c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_SPI_MspInit+0x9c>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_SPI_MspInit+0x9c>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	23a0      	movs	r3, #160	; 0xa0
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	2302      	movs	r3, #2
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	2303      	movs	r3, #3
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <HAL_SPI_MspInit+0xa0>)
 80013c8:	f000 fb7a 	bl	8001ac0 <HAL_GPIO_Init>
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4619      	mov	r1, r3
 80013de:	4809      	ldr	r0, [pc, #36]	; (8001404 <HAL_SPI_MspInit+0xa0>)
 80013e0:	f000 fb6e 	bl	8001ac0 <HAL_GPIO_Init>
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2023      	movs	r0, #35	; 0x23
 80013ea:	f000 fa82 	bl	80018f2 <HAL_NVIC_SetPriority>
 80013ee:	2023      	movs	r0, #35	; 0x23
 80013f0:	f000 fa9b 	bl	800192a <HAL_NVIC_EnableIRQ>
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40013000 	.word	0x40013000
 8001400:	40021000 	.word	0x40021000
 8001404:	40010800 	.word	0x40010800

08001408 <HAL_TIM_Base_MspInit>:
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <HAL_TIM_Base_MspInit+0x78>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d114      	bne.n	8001444 <HAL_TIM_Base_MspInit+0x3c>
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_TIM_Base_MspInit+0x7c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_TIM_Base_MspInit+0x7c>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_TIM_Base_MspInit+0x7c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	201d      	movs	r0, #29
 8001438:	f000 fa5b 	bl	80018f2 <HAL_NVIC_SetPriority>
 800143c:	201d      	movs	r0, #29
 800143e:	f000 fa74 	bl	800192a <HAL_NVIC_EnableIRQ>
 8001442:	e018      	b.n	8001476 <HAL_TIM_Base_MspInit+0x6e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_TIM_Base_MspInit+0x80>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d113      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x6e>
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_TIM_Base_MspInit+0x7c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_TIM_Base_MspInit+0x7c>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_TIM_Base_MspInit+0x7c>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201e      	movs	r0, #30
 800146c:	f000 fa41 	bl	80018f2 <HAL_NVIC_SetPriority>
 8001470:	201e      	movs	r0, #30
 8001472:	f000 fa5a 	bl	800192a <HAL_NVIC_EnableIRQ>
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40000400 	.word	0x40000400
 8001484:	40021000 	.word	0x40021000
 8001488:	40000800 	.word	0x40000800

0800148c <HAL_UART_MspInit>:
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_UART_MspInit+0x9c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d139      	bne.n	8001520 <HAL_UART_MspInit+0x94>
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_UART_MspInit+0xa0>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	2302      	movs	r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	2303      	movs	r3, #3
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4619      	mov	r1, r3
 80014f0:	480f      	ldr	r0, [pc, #60]	; (8001530 <HAL_UART_MspInit+0xa4>)
 80014f2:	f000 fae5 	bl	8001ac0 <HAL_GPIO_Init>
 80014f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_UART_MspInit+0xa4>)
 800150c:	f000 fad8 	bl	8001ac0 <HAL_GPIO_Init>
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2025      	movs	r0, #37	; 0x25
 8001516:	f000 f9ec 	bl	80018f2 <HAL_NVIC_SetPriority>
 800151a:	2025      	movs	r0, #37	; 0x25
 800151c:	f000 fa05 	bl	800192a <HAL_NVIC_EnableIRQ>
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40013800 	.word	0x40013800
 800152c:	40021000 	.word	0x40021000
 8001530:	40010800 	.word	0x40010800

08001534 <NMI_Handler>:
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <DebugMon_Handler>:
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
 800157a:	f000 f8a3 	bl	80016c4 <HAL_IncTick>
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}

08001582 <EXTI4_IRQHandler>:
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
 8001586:	2010      	movs	r0, #16
 8001588:	f000 fc36 	bl	8001df8 <HAL_GPIO_EXTI_IRQHandler>
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <TIM3_IRQHandler>:
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM3_IRQHandler+0x10>)
 8001596:	f001 fe37 	bl	8003208 <HAL_TIM_IRQHandler>
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000110 	.word	0x20000110

080015a4 <TIM4_IRQHandler>:
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM4_IRQHandler+0x10>)
 80015aa:	f001 fe2d 	bl	8003208 <HAL_TIM_IRQHandler>
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000158 	.word	0x20000158

080015b8 <SPI1_IRQHandler>:
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <SPI1_IRQHandler+0x10>)
 80015be:	f001 fbb1 	bl	8002d24 <HAL_SPI_IRQHandler>
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200000b8 	.word	0x200000b8

080015cc <USART1_IRQHandler>:
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <USART1_IRQHandler+0x10>)
 80015d2:	f002 fa33 	bl	8003a3c <HAL_UART_IRQHandler>
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200001a0 	.word	0x200001a0

080015e0 <SystemInit>:
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <Reset_Handler>:
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopFillZerobss+0x12>)
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <LoopFillZerobss+0x16>)
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <LoopFillZerobss+0x1a>)
 80015f2:	2300      	movs	r3, #0
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:
 80015f6:	58d4      	ldr	r4, [r2, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:
 80015fc:	18c4      	adds	r4, r0, r3
 80015fe:	428c      	cmp	r4, r1
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopFillZerobss+0x1e>)
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <LoopFillZerobss+0x22>)
 8001606:	2300      	movs	r3, #0
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:
 800160e:	42a2      	cmp	r2, r4
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>
 8001612:	f7ff ffe5 	bl	80015e0 <SystemInit>
 8001616:	f002 fe03 	bl	8004220 <__libc_init_array>
 800161a:	f7ff f9f7 	bl	8000a0c <main>
 800161e:	4770      	bx	lr
 8001620:	20000000 	.word	0x20000000
 8001624:	2000009c 	.word	0x2000009c
 8001628:	080042c8 	.word	0x080042c8
 800162c:	2000009c 	.word	0x2000009c
 8001630:	20000f10 	.word	0x20000f10

08001634 <ADC1_2_IRQHandler>:
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f947 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>
 8001654:	f7ff fe54 	bl	8001300 <HAL_MspInit>
 8001658:	2300      	movs	r3, #0
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f95f 	bl	8001946 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f927 	bl	80018f2 <HAL_NVIC_SetPriority>
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
 80016ae:	2301      	movs	r3, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000090 	.word	0x20000090
 80016bc:	20000098 	.word	0x20000098
 80016c0:	20000094 	.word	0x20000094

080016c4 <HAL_IncTick>:
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x1c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x20>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_IncTick+0x20>)
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000098 	.word	0x20000098
 80016e4:	20000f0c 	.word	0x20000f0c

080016e8 <HAL_GetTick>:
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <HAL_GetTick+0x10>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20000f0c 	.word	0x20000f0c

080016fc <HAL_Delay>:
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	f7ff fff0 	bl	80016e8 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	bf00      	nop
 8001724:	f7ff ffe0 	bl	80016e8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000098 	.word	0x20000098

08001744 <__NVIC_SetPriorityGrouping>:
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <__NVIC_EnableIRQ+0x34>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
 800188c:	4313      	orrs	r3, r2
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <SysTick_Config>:
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff90 	bl	80017e0 <__NVIC_SetPriority>
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff2d 	bl	8001744 <__NVIC_SetPriorityGrouping>
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	f7ff ff42 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff90 	bl	8001834 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5f 	bl	80017e0 <__NVIC_SetPriority>
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff35 	bl	80017a8 <__NVIC_EnableIRQ>
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_DMA_Abort>:
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001970:	2b02      	cmp	r3, #2
 8001972:	d008      	beq.n	8001986 <HAL_DMA_Abort+0x28>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2204      	movs	r2, #4
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2020 	strb.w	r2, [r3, #32]
 8001982:	2301      	movs	r3, #1
 8001984:	e020      	b.n	80019c8 <HAL_DMA_Abort+0x6a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 020e 	bic.w	r2, r2, #14
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2020 	strb.w	r2, [r3, #32]
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_DMA_Abort_IT>:
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d005      	beq.n	80019f6 <HAL_DMA_Abort_IT+0x22>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e051      	b.n	8001a9a <HAL_DMA_Abort_IT+0xc6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 020e 	bic.w	r2, r2, #14
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a22      	ldr	r2, [pc, #136]	; (8001aa4 <HAL_DMA_Abort_IT+0xd0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d029      	beq.n	8001a74 <HAL_DMA_Abort_IT+0xa0>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <HAL_DMA_Abort_IT+0xd4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d022      	beq.n	8001a70 <HAL_DMA_Abort_IT+0x9c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_DMA_Abort_IT+0xd8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d01a      	beq.n	8001a6a <HAL_DMA_Abort_IT+0x96>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_DMA_Abort_IT+0xdc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d012      	beq.n	8001a64 <HAL_DMA_Abort_IT+0x90>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <HAL_DMA_Abort_IT+0xe0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00a      	beq.n	8001a5e <HAL_DMA_Abort_IT+0x8a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_DMA_Abort_IT+0xe4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d102      	bne.n	8001a58 <HAL_DMA_Abort_IT+0x84>
 8001a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a56:	e00e      	b.n	8001a76 <HAL_DMA_Abort_IT+0xa2>
 8001a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a5c:	e00b      	b.n	8001a76 <HAL_DMA_Abort_IT+0xa2>
 8001a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a62:	e008      	b.n	8001a76 <HAL_DMA_Abort_IT+0xa2>
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	e005      	b.n	8001a76 <HAL_DMA_Abort_IT+0xa2>
 8001a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6e:	e002      	b.n	8001a76 <HAL_DMA_Abort_IT+0xa2>
 8001a70:	2310      	movs	r3, #16
 8001a72:	e000      	b.n	8001a76 <HAL_DMA_Abort_IT+0xa2>
 8001a74:	2301      	movs	r3, #1
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <HAL_DMA_Abort_IT+0xe8>)
 8001a78:	6053      	str	r3, [r2, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2020 	strb.w	r2, [r3, #32]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_DMA_Abort_IT+0xc6>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40020008 	.word	0x40020008
 8001aa8:	4002001c 	.word	0x4002001c
 8001aac:	40020030 	.word	0x40020030
 8001ab0:	40020044 	.word	0x40020044
 8001ab4:	40020058 	.word	0x40020058
 8001ab8:	4002006c 	.word	0x4002006c
 8001abc:	40020000 	.word	0x40020000

08001ac0 <HAL_GPIO_Init>:
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	e169      	b.n	8001da8 <HAL_GPIO_Init+0x2e8>
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8158 	bne.w	8001da2 <HAL_GPIO_Init+0x2e2>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a9a      	ldr	r2, [pc, #616]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d05e      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001afc:	4a98      	ldr	r2, [pc, #608]	; (8001d60 <HAL_GPIO_Init+0x2a0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d875      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b02:	4a98      	ldr	r2, [pc, #608]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d058      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b08:	4a96      	ldr	r2, [pc, #600]	; (8001d64 <HAL_GPIO_Init+0x2a4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d86f      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b0e:	4a96      	ldr	r2, [pc, #600]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d052      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b14:	4a94      	ldr	r2, [pc, #592]	; (8001d68 <HAL_GPIO_Init+0x2a8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d869      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b1a:	4a94      	ldr	r2, [pc, #592]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04c      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b20:	4a92      	ldr	r2, [pc, #584]	; (8001d6c <HAL_GPIO_Init+0x2ac>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d863      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b26:	4a92      	ldr	r2, [pc, #584]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d046      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b2c:	4a90      	ldr	r2, [pc, #576]	; (8001d70 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d85d      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d82a      	bhi.n	8001b8c <HAL_GPIO_Init+0xcc>
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d859      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <HAL_GPIO_Init+0x80>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001b95 	.word	0x08001b95
 8001b48:	08001ba7 	.word	0x08001ba7
 8001b4c:	08001be9 	.word	0x08001be9
 8001b50:	08001bef 	.word	0x08001bef
 8001b54:	08001bef 	.word	0x08001bef
 8001b58:	08001bef 	.word	0x08001bef
 8001b5c:	08001bef 	.word	0x08001bef
 8001b60:	08001bef 	.word	0x08001bef
 8001b64:	08001bef 	.word	0x08001bef
 8001b68:	08001bef 	.word	0x08001bef
 8001b6c:	08001bef 	.word	0x08001bef
 8001b70:	08001bef 	.word	0x08001bef
 8001b74:	08001bef 	.word	0x08001bef
 8001b78:	08001bef 	.word	0x08001bef
 8001b7c:	08001bef 	.word	0x08001bef
 8001b80:	08001bef 	.word	0x08001bef
 8001b84:	08001b9d 	.word	0x08001b9d
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	4a79      	ldr	r2, [pc, #484]	; (8001d74 <HAL_GPIO_Init+0x2b4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b92:	e02c      	b.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	e029      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	e024      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	3308      	adds	r3, #8
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	e01f      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	e01a      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_GPIO_Init+0x108>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	623b      	str	r3, [r7, #32]
 8001bc6:	e013      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_GPIO_Init+0x11c>
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	e009      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
 8001bee:	bf00      	nop
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d801      	bhi.n	8001bfa <HAL_GPIO_Init+0x13a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_Init+0x13e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2bff      	cmp	r3, #255	; 0xff
 8001c04:	d802      	bhi.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x152>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3b08      	subs	r3, #8
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	210f      	movs	r1, #15
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	6a39      	ldr	r1, [r7, #32]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80b1 	beq.w	8001da2 <HAL_GPIO_Init+0x2e2>
 8001c40:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <HAL_GPIO_Init+0x2bc>)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a40      	ldr	r2, [pc, #256]	; (8001d80 <HAL_GPIO_Init+0x2c0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1e8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1e4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3d      	ldr	r2, [pc, #244]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1e0>
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1ee>
 8001cac:	2300      	movs	r3, #0
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	492f      	ldr	r1, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x2bc>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	492c      	ldr	r1, [pc, #176]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x234>
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4928      	ldr	r1, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x24e>
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4922      	ldr	r1, [pc, #136]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x25c>
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	491e      	ldr	r1, [pc, #120]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x276>
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	4918      	ldr	r1, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x284>
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4914      	ldr	r1, [pc, #80]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d021      	beq.n	8001d94 <HAL_GPIO_Init+0x2d4>
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
 8001d5c:	e021      	b.n	8001da2 <HAL_GPIO_Init+0x2e2>
 8001d5e:	bf00      	nop
 8001d60:	10320000 	.word	0x10320000
 8001d64:	10310000 	.word	0x10310000
 8001d68:	10220000 	.word	0x10220000
 8001d6c:	10210000 	.word	0x10210000
 8001d70:	10120000 	.word	0x10120000
 8001d74:	10110000 	.word	0x10110000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40011400 	.word	0x40011400
 8001d90:	40010400 	.word	0x40010400
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <HAL_GPIO_Init+0x304>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60cb      	str	r3, [r1, #12]
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f47f ae8e 	bne.w	8001ad4 <HAL_GPIO_Init+0x14>
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	372c      	adds	r7, #44	; 0x2c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_WritePin>:
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	707b      	strb	r3, [r7, #1]
 8001dd8:	787b      	ldrb	r3, [r7, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_WritePin+0x1e>
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	e003      	b.n	8001dee <HAL_GPIO_WritePin+0x26>
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	041a      	lsls	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_GPIO_EXTI_IRQHandler>:
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	6153      	str	r3, [r2, #20]
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f9ca 	bl	80011b0 <HAL_GPIO_EXTI_Callback>
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40010400 	.word	0x40010400

08001e28 <HAL_RCC_OscConfig>:
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e272      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8087 	beq.w	8001f56 <HAL_RCC_OscConfig+0x12e>
 8001e48:	4b92      	ldr	r3, [pc, #584]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d00c      	beq.n	8001e6e <HAL_RCC_OscConfig+0x46>
 8001e54:	4b8f      	ldr	r3, [pc, #572]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d112      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5e>
 8001e60:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d10b      	bne.n	8001e86 <HAL_RCC_OscConfig+0x5e>
 8001e6e:	4b89      	ldr	r3, [pc, #548]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d06c      	beq.n	8001f54 <HAL_RCC_OscConfig+0x12c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d168      	bne.n	8001f54 <HAL_RCC_OscConfig+0x12c>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e24c      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x76>
 8001e90:	4b80      	ldr	r3, [pc, #512]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a7f      	ldr	r2, [pc, #508]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e02e      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x98>
 8001ea6:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a7a      	ldr	r2, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b78      	ldr	r3, [pc, #480]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a77      	ldr	r2, [pc, #476]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xbc>
 8001eca:	4b72      	ldr	r3, [pc, #456]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a71      	ldr	r2, [pc, #452]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a6e      	ldr	r2, [pc, #440]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xd4>
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6a      	ldr	r2, [pc, #424]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b68      	ldr	r3, [pc, #416]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a67      	ldr	r2, [pc, #412]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0x104>
 8001f04:	f7ff fbf0 	bl	80016e8 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xf6>
 8001f0c:	f7ff fbec 	bl	80016e8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xf6>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e200      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8001f1e:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xe4>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x12e>
 8001f2c:	f7ff fbdc 	bl	80016e8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x11e>
 8001f34:	f7ff fbd8 	bl	80016e8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x11e>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1ec      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8001f46:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x10c>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x12e>
 8001f54:	bf00      	nop
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d063      	beq.n	800202a <HAL_RCC_OscConfig+0x202>
 8001f62:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_OscConfig+0x15e>
 8001f6e:	4b49      	ldr	r3, [pc, #292]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x18c>
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x18c>
 8001f86:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x176>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x176>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1c0      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4939      	ldr	r1, [pc, #228]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
 8001fb2:	e03a      	b.n	800202a <HAL_RCC_OscConfig+0x202>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1d6>
 8001fbc:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f7ff fb91 	bl	80016e8 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x1b4>
 8001fca:	f7ff fb8d 	bl	80016e8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x1b4>
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1a1      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x1a2>
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4927      	ldr	r1, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x202>
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_RCC_OscConfig+0x270>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f7ff fb70 	bl	80016e8 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1f6>
 800200c:	f7ff fb6c 	bl	80016e8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1f6>
 800201a:	2303      	movs	r3, #3
 800201c:	e180      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1e4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d03a      	beq.n	80020ac <HAL_RCC_OscConfig+0x284>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d019      	beq.n	8002072 <HAL_RCC_OscConfig+0x24a>
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_RCC_OscConfig+0x274>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f7ff fb50 	bl	80016e8 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x236>
 800204c:	f7ff fb4c 	bl	80016e8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x236>
 800205a:	2303      	movs	r3, #3
 800205c:	e160      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_OscConfig+0x26c>)
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x224>
 800206a:	2001      	movs	r0, #1
 800206c:	f000 fada 	bl	8002624 <RCC_Delay>
 8002070:	e01c      	b.n	80020ac <HAL_RCC_OscConfig+0x284>
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_RCC_OscConfig+0x274>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f7ff fb36 	bl	80016e8 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]
 800207e:	e00f      	b.n	80020a0 <HAL_RCC_OscConfig+0x278>
 8002080:	f7ff fb32 	bl	80016e8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d908      	bls.n	80020a0 <HAL_RCC_OscConfig+0x278>
 800208e:	2303      	movs	r3, #3
 8002090:	e146      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	42420000 	.word	0x42420000
 800209c:	42420480 	.word	0x42420480
 80020a0:	4b92      	ldr	r3, [pc, #584]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e9      	bne.n	8002080 <HAL_RCC_OscConfig+0x258>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a6 	beq.w	8002206 <HAL_RCC_OscConfig+0x3de>
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10d      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2be>
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a87      	ldr	r2, [pc, #540]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	61d3      	str	r3, [r2, #28]
 80020d6:	4b85      	ldr	r3, [pc, #532]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
 80020e6:	4b82      	ldr	r3, [pc, #520]	; (80022f0 <HAL_RCC_OscConfig+0x4c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_RCC_OscConfig+0x2fc>
 80020f2:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <HAL_RCC_OscConfig+0x4c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a7e      	ldr	r2, [pc, #504]	; (80022f0 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	f7ff faf3 	bl	80016e8 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x2f0>
 8002106:	f7ff faef 	bl	80016e8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x2f0>
 8002114:	2303      	movs	r3, #3
 8002116:	e103      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8002118:	4b75      	ldr	r3, [pc, #468]	; (80022f0 <HAL_RCC_OscConfig+0x4c8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x2de>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x312>
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a6e      	ldr	r2, [pc, #440]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	e02d      	b.n	8002196 <HAL_RCC_OscConfig+0x36e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x334>
 8002142:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a69      	ldr	r2, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a66      	ldr	r2, [pc, #408]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	e01c      	b.n	8002196 <HAL_RCC_OscConfig+0x36e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x356>
 8002164:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a60      	ldr	r2, [pc, #384]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	4b5e      	ldr	r3, [pc, #376]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a5d      	ldr	r2, [pc, #372]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e00b      	b.n	8002196 <HAL_RCC_OscConfig+0x36e>
 800217e:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a5a      	ldr	r2, [pc, #360]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	4b58      	ldr	r3, [pc, #352]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d015      	beq.n	80021ca <HAL_RCC_OscConfig+0x3a2>
 800219e:	f7ff faa3 	bl	80016e8 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x394>
 80021a6:	f7ff fa9f 	bl	80016e8 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x394>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0b1      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ee      	beq.n	80021a6 <HAL_RCC_OscConfig+0x37e>
 80021c8:	e014      	b.n	80021f4 <HAL_RCC_OscConfig+0x3cc>
 80021ca:	f7ff fa8d 	bl	80016e8 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
 80021d2:	f7ff fa89 	bl	80016e8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
 80021e4:	2303      	movs	r3, #3
 80021e6:	e09b      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 80021e8:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ee      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3aa>
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCC_OscConfig+0x3de>
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8087 	beq.w	800231e <HAL_RCC_OscConfig+0x4f6>
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	d061      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4b8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d146      	bne.n	80022b2 <HAL_RCC_OscConfig+0x48a>
 8002224:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f7ff fa5d 	bl	80016e8 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x41c>
 8002232:	f7ff fa59 	bl	80016e8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x41c>
 8002240:	2303      	movs	r3, #3
 8002242:	e06d      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 8002244:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x40a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d108      	bne.n	800226c <HAL_RCC_OscConfig+0x444>
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4921      	ldr	r1, [pc, #132]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a19      	ldr	r1, [r3, #32]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	430b      	orrs	r3, r1
 800227e:	491b      	ldr	r1, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f7ff fa2d 	bl	80016e8 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x47c>
 8002292:	f7ff fa29 	bl	80016e8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x47c>
 80022a0:	2303      	movs	r3, #3
 80022a2:	e03d      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x46a>
 80022b0:	e035      	b.n	800231e <HAL_RCC_OscConfig+0x4f6>
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f7ff fa16 	bl	80016e8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x4aa>
 80022c0:	f7ff fa12 	bl	80016e8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x4aa>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e026      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x498>
 80022de:	e01e      	b.n	800231e <HAL_RCC_OscConfig+0x4f6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4d0>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e019      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
 80022f4:	42420060 	.word	0x42420060
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_OscConfig+0x500>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x4f2>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x4f6>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_RCC_OscConfig+0x4f8>
 800231e:	2300      	movs	r3, #0
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_RCC_ClockConfig>:
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
 800233c:	2301      	movs	r3, #1
 800233e:	e0d0      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x44>
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4965      	ldr	r1, [pc, #404]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x44>
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x92>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x68>
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002392:	6053      	str	r3, [r2, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x80>
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023aa:	6053      	str	r3, [r2, #4]
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d040      	beq.n	800244c <HAL_RCC_ClockConfig+0x120>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xb6>
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d115      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xce>
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e073      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
 80023fa:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xde>
 8002406:	2301      	movs	r3, #1
 8002408:	e06b      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4936      	ldr	r1, [pc, #216]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
 800241c:	f7ff f964 	bl	80016e8 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x10e>
 8002424:	f7ff f960 	bl	80016e8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x10e>
 8002436:	2303      	movs	r3, #3
 8002438:	e053      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xf8>
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d210      	bcs.n	800247c <HAL_RCC_ClockConfig+0x150>
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 0207 	bic.w	r2, r3, #7
 8002462:	4922      	ldr	r1, [pc, #136]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x150>
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1b6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x16e>
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x18e>
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
 80024ba:	f000 f821 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490a      	ldr	r1, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1cc>)
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1d0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f8c2 	bl	8001664 <HAL_InitTick>
 80024e0:	2300      	movs	r3, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000
 80024f0:	40021000 	.word	0x40021000
 80024f4:	080042a0 	.word	0x080042a0
 80024f8:	20000090 	.word	0x20000090
 80024fc:	20000094 	.word	0x20000094

08002500 <HAL_RCC_GetSysClockFreq>:
 8002500:	b490      	push	{r4, r7}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_GetSysClockFreq+0xac>)
 8002508:	1d3c      	adds	r4, r7, #4
 800250a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002510:	f240 2301 	movw	r3, #513	; 0x201
 8002514:	803b      	strh	r3, [r7, #0]
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x40>
 800253a:	2b08      	cmp	r3, #8
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x46>
 800253e:	e02b      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x98>
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	e02b      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x9e>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3328      	adds	r3, #40	; 0x28
 8002550:	443b      	add	r3, r7
 8002552:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d012      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0c5b      	lsrs	r3, r3, #17
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	3328      	adds	r3, #40	; 0x28
 800256e:	443b      	add	r3, r7
 8002570:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800257a:	fb03 f202 	mul.w	r2, r3, r2
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
 8002586:	e004      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x92>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	623b      	str	r3, [r7, #32]
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x9e>
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	bf00      	nop
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	4618      	mov	r0, r3
 80025a2:	3728      	adds	r7, #40	; 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc90      	pop	{r4, r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	08004290 	.word	0x08004290
 80025b0:	40021000 	.word	0x40021000
 80025b4:	00b71b00 	.word	0x00b71b00
 80025b8:	003d0900 	.word	0x003d0900
 80025bc:	007a1200 	.word	0x007a1200

080025c0 <HAL_RCC_GetHCLKFreq>:
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4b02      	ldr	r3, [pc, #8]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000090 	.word	0x20000090

080025d4 <HAL_RCC_GetPCLK1Freq>:
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	f7ff fff2 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	080042b0 	.word	0x080042b0

080025fc <HAL_RCC_GetPCLK2Freq>:
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
 8002600:	f7ff ffde 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0adb      	lsrs	r3, r3, #11
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	080042b0 	.word	0x080042b0

08002624 <RCC_Delay>:
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <RCC_Delay+0x34>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <RCC_Delay+0x38>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a5b      	lsrs	r3, r3, #9
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	bf00      	nop
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	60fa      	str	r2, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f9      	bne.n	8002640 <RCC_Delay+0x1c>
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000090 	.word	0x20000090
 800265c:	10624dd3 	.word	0x10624dd3

08002660 <HAL_SPI_Init>:
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_SPI_Init+0x12>
 800266e:	2301      	movs	r3, #1
 8002670:	e076      	b.n	8002760 <HAL_SPI_Init+0x100>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <HAL_SPI_Init+0x2c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002682:	d009      	beq.n	8002698 <HAL_SPI_Init+0x38>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
 800268a:	e005      	b.n	8002698 <HAL_SPI_Init+0x38>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_SPI_Init+0x58>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fe56 	bl	8001364 <HAL_SPI_MspInit>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	ea42 0103 	orr.w	r1, r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	0c1a      	lsrs	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f002 0204 	and.w	r2, r2, #4
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800274e:	61da      	str	r2, [r3, #28]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800275e:	2300      	movs	r3, #0
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_SPI_Transmit>:
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	80fb      	strh	r3, [r7, #6]
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_SPI_Transmit+0x22>
 8002786:	2302      	movs	r3, #2
 8002788:	e126      	b.n	80029d8 <HAL_SPI_Transmit+0x270>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002792:	f7fe ffa9 	bl	80016e8 <HAL_GetTick>
 8002796:	61b8      	str	r0, [r7, #24]
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	82fb      	strh	r3, [r7, #22]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d002      	beq.n	80027ae <HAL_SPI_Transmit+0x46>
 80027a8:	2302      	movs	r3, #2
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e10b      	b.n	80029c6 <HAL_SPI_Transmit+0x25e>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_Transmit+0x52>
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_SPI_Transmit+0x58>
 80027ba:	2301      	movs	r3, #1
 80027bc:	77fb      	strb	r3, [r7, #31]
 80027be:	e102      	b.n	80029c6 <HAL_SPI_Transmit+0x25e>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2203      	movs	r2, #3
 80027c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	869a      	strh	r2, [r3, #52]	; 0x34
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	86da      	strh	r2, [r3, #54]	; 0x36
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	879a      	strh	r2, [r3, #60]	; 0x3c
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002806:	d10f      	bne.n	8002828 <HAL_SPI_Transmit+0xc0>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b40      	cmp	r3, #64	; 0x40
 8002834:	d007      	beq.n	8002846 <HAL_SPI_Transmit+0xde>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800284e:	d14b      	bne.n	80028e8 <HAL_SPI_Transmit+0x180>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_SPI_Transmit+0xf6>
 8002858:	8afb      	ldrh	r3, [r7, #22]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d13e      	bne.n	80028dc <HAL_SPI_Transmit+0x174>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	881a      	ldrh	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	1c9a      	adds	r2, r3, #2
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	86da      	strh	r2, [r3, #54]	; 0x36
 8002882:	e02b      	b.n	80028dc <HAL_SPI_Transmit+0x174>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	d112      	bne.n	80028b8 <HAL_SPI_Transmit+0x150>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	1c9a      	adds	r2, r3, #2
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80028b6:	e011      	b.n	80028dc <HAL_SPI_Transmit+0x174>
 80028b8:	f7fe ff16 	bl	80016e8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d803      	bhi.n	80028d0 <HAL_SPI_Transmit+0x168>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d102      	bne.n	80028d6 <HAL_SPI_Transmit+0x16e>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_SPI_Transmit+0x174>
 80028d6:	2303      	movs	r3, #3
 80028d8:	77fb      	strb	r3, [r7, #31]
 80028da:	e074      	b.n	80029c6 <HAL_SPI_Transmit+0x25e>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ce      	bne.n	8002884 <HAL_SPI_Transmit+0x11c>
 80028e6:	e04c      	b.n	8002982 <HAL_SPI_Transmit+0x21a>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_SPI_Transmit+0x18e>
 80028f0:	8afb      	ldrh	r3, [r7, #22]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d140      	bne.n	8002978 <HAL_SPI_Transmit+0x210>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	86da      	strh	r2, [r3, #54]	; 0x36
 800291c:	e02c      	b.n	8002978 <HAL_SPI_Transmit+0x210>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b02      	cmp	r3, #2
 800292a:	d113      	bne.n	8002954 <HAL_SPI_Transmit+0x1ec>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	7812      	ldrb	r2, [r2, #0]
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	86da      	strh	r2, [r3, #54]	; 0x36
 8002952:	e011      	b.n	8002978 <HAL_SPI_Transmit+0x210>
 8002954:	f7fe fec8 	bl	80016e8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d803      	bhi.n	800296c <HAL_SPI_Transmit+0x204>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d102      	bne.n	8002972 <HAL_SPI_Transmit+0x20a>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <HAL_SPI_Transmit+0x210>
 8002972:	2303      	movs	r3, #3
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e026      	b.n	80029c6 <HAL_SPI_Transmit+0x25e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1cd      	bne.n	800291e <HAL_SPI_Transmit+0x1b6>
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	6839      	ldr	r1, [r7, #0]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fb58 	bl	800303c <SPI_EndRxTxTransaction>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_SPI_Transmit+0x230>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_SPI_Transmit+0x24e>
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_SPI_Transmit+0x25c>
 80029be:	2301      	movs	r3, #1
 80029c0:	77fb      	strb	r3, [r7, #31]
 80029c2:	e000      	b.n	80029c6 <HAL_SPI_Transmit+0x25e>
 80029c4:	bf00      	nop
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80029d6:	7ffb      	ldrb	r3, [r7, #31]
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_SPI_TransmitReceive>:
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	; 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	807b      	strh	r3, [r7, #2]
 80029ee:	2301      	movs	r3, #1
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_SPI_TransmitReceive+0x26>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e18a      	b.n	8002d1c <HAL_SPI_TransmitReceive+0x33c>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a0e:	f7fe fe6b 	bl	80016e8 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	; 0x24
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	837b      	strh	r3, [r7, #26]
 8002a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d00f      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x70>
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a36:	d107      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x68>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x68>
 8002a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d003      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x70>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a4e:	e15b      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x328>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x82>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x82>
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x8a>
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a68:	e14e      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x328>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d003      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x9e>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2205      	movs	r2, #5
 8002a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	887a      	ldrh	r2, [r7, #2]
 8002a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	879a      	strh	r2, [r3, #60]	; 0x3c
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	869a      	strh	r2, [r3, #52]	; 0x34
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d007      	beq.n	8002ad2 <HAL_SPI_TransmitReceive+0xf2>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ada:	d178      	bne.n	8002bce <HAL_SPI_TransmitReceive+0x1ee>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x10a>
 8002ae4:	8b7b      	ldrh	r3, [r7, #26]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d166      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x1d8>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	881a      	ldrh	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	1c9a      	adds	r2, r3, #2
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b0e:	e053      	b.n	8002bb8 <HAL_SPI_TransmitReceive+0x1d8>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d11b      	bne.n	8002b56 <HAL_SPI_TransmitReceive+0x176>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d016      	beq.n	8002b56 <HAL_SPI_TransmitReceive+0x176>
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d113      	bne.n	8002b56 <HAL_SPI_TransmitReceive+0x176>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	881a      	ldrh	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	1c9a      	adds	r2, r3, #2
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d119      	bne.n	8002b98 <HAL_SPI_TransmitReceive+0x1b8>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <HAL_SPI_TransmitReceive+0x1b8>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b78:	b292      	uxth	r2, r2
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b94:	2301      	movs	r3, #1
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b98:	f7fe fda6 	bl	80016e8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d807      	bhi.n	8002bb8 <HAL_SPI_TransmitReceive+0x1d8>
 8002ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d003      	beq.n	8002bb8 <HAL_SPI_TransmitReceive+0x1d8>
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bb6:	e0a7      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x328>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1a6      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x130>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1a1      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x130>
 8002bcc:	e07c      	b.n	8002cc8 <HAL_SPI_TransmitReceive+0x2e8>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x1fc>
 8002bd6:	8b7b      	ldrh	r3, [r7, #26]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d16b      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x2d4>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c02:	e057      	b.n	8002cb4 <HAL_SPI_TransmitReceive+0x2d4>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d11c      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x26c>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d017      	beq.n	8002c4c <HAL_SPI_TransmitReceive+0x26c>
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d114      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x26c>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d119      	bne.n	8002c8e <HAL_SPI_TransmitReceive+0x2ae>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d014      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x2ae>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8e:	f7fe fd2b 	bl	80016e8 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d803      	bhi.n	8002ca6 <HAL_SPI_TransmitReceive+0x2c6>
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d102      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x2cc>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d103      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x2d4>
 8002cac:	2303      	movs	r3, #3
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb2:	e029      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x328>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1a2      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x224>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d19d      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x224>
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f9b5 	bl	800303c <SPI_EndRxTxTransaction>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_SPI_TransmitReceive+0x306>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ce4:	e010      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x328>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <HAL_SPI_TransmitReceive+0x326>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	e000      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x328>
 8002d06:	bf00      	nop
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3730      	adds	r7, #48	; 0x30
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_SPI_IRQHandler>:
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10f      	bne.n	8002d68 <HAL_SPI_IRQHandler+0x44>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_SPI_IRQHandler+0x44>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_SPI_IRQHandler+0x44>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
 8002d66:	e0be      	b.n	8002ee6 <HAL_SPI_IRQHandler+0x1c2>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_SPI_IRQHandler+0x66>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	09db      	lsrs	r3, r3, #7
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <HAL_SPI_IRQHandler+0x66>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e0ad      	b.n	8002ee6 <HAL_SPI_IRQHandler+0x1c2>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_SPI_IRQHandler+0x80>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80a1 	beq.w	8002ee6 <HAL_SPI_IRQHandler+0x1c2>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 809a 	beq.w	8002ee6 <HAL_SPI_IRQHandler+0x1c2>
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d023      	beq.n	8002e06 <HAL_SPI_IRQHandler+0xe2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d011      	beq.n	8002dee <HAL_SPI_IRQHandler+0xca>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f043 0204 	orr.w	r2, r3, #4
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	e00b      	b.n	8002e06 <HAL_SPI_IRQHandler+0xe2>
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	e06f      	b.n	8002ee6 <HAL_SPI_IRQHandler+0x1c2>
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <HAL_SPI_IRQHandler+0x118>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d04f      	beq.n	8002ee4 <HAL_SPI_IRQHandler+0x1c0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_SPI_IRQHandler+0x14c>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d034      	beq.n	8002eda <HAL_SPI_IRQHandler+0x1b6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0203 	bic.w	r2, r2, #3
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d011      	beq.n	8002eac <HAL_SPI_IRQHandler+0x188>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	4a17      	ldr	r2, [pc, #92]	; (8002eec <HAL_SPI_IRQHandler+0x1c8>)
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fd9d 	bl	80019d4 <HAL_DMA_Abort_IT>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_SPI_IRQHandler+0x188>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d016      	beq.n	8002ee2 <HAL_SPI_IRQHandler+0x1be>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb8:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <HAL_SPI_IRQHandler+0x1c8>)
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fd87 	bl	80019d4 <HAL_DMA_Abort_IT>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_SPI_IRQHandler+0x1be>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
 8002ed8:	e003      	b.n	8002ee2 <HAL_SPI_IRQHandler+0x1be>
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f808 	bl	8002ef0 <HAL_SPI_ErrorCallback>
 8002ee0:	e000      	b.n	8002ee4 <HAL_SPI_IRQHandler+0x1c0>
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	08002f03 	.word	0x08002f03

08002ef0 <HAL_SPI_ErrorCallback>:
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <SPI_DMAAbortOnError>:
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff ffe7 	bl	8002ef0 <HAL_SPI_ErrorCallback>
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <SPI_WaitFlagStateUntilTimeout>:
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
 8002f3c:	f7fe fbd4 	bl	80016e8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	f7fe fbcc 	bl	80016e8 <HAL_GetTick>
 8002f50:	61b8      	str	r0, [r7, #24]
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	0d1b      	lsrs	r3, r3, #20
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e054      	b.n	800300e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d050      	beq.n	800300e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8002f6c:	f7fe fbbc 	bl	80016e8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d902      	bls.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d13d      	bne.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0xd2>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f9a:	d111      	bne.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	d004      	beq.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0x84>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d107      	bne.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc8:	d10f      	bne.n	8002fea <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e017      	b.n	800302e <SPI_WaitFlagStateUntilTimeout+0x102>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3b01      	subs	r3, #1
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	429a      	cmp	r2, r3
 800302a:	d19b      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x38>
 800302c:	2300      	movs	r3, #0
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000090 	.word	0x20000090

0800303c <SPI_EndRxTxTransaction>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff ff6a 	bl	8002f2c <SPI_WaitFlagStateUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <SPI_EndRxTxTransaction+0x32>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
 800306a:	2303      	movs	r3, #3
 800306c:	e000      	b.n	8003070 <SPI_EndRxTxTransaction+0x34>
 800306e:	2300      	movs	r3, #0
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_Base_Init>:
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_TIM_Base_Init+0x12>
 8003086:	2301      	movs	r3, #1
 8003088:	e041      	b.n	800310e <HAL_TIM_Base_Init+0x96>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_TIM_Base_Init+0x2c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe f9b2 	bl	8001408 <HAL_TIM_Base_MspInit>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f000 fa96 	bl	80035e8 <TIM_Base_SetConfig>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800310c:	2300      	movs	r3, #0
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_TIM_Base_Stop>:
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	f241 1311 	movw	r3, #4369	; 0x1111
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_TIM_Base_Stop+0x38>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a1a      	ldr	r2, [r3, #32]
 8003134:	f240 4344 	movw	r3, #1092	; 0x444
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_TIM_Base_Stop+0x38>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003156:	2300      	movs	r3, #0
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
	...

08003164 <HAL_TIM_Base_Start_IT>:
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d001      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x18>
 8003178:	2301      	movs	r3, #1
 800317a:	e03a      	b.n	80031f2 <HAL_TIM_Base_Start_IT+0x8e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_TIM_Base_Start_IT+0x98>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00e      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x58>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a6:	d009      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x58>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a14      	ldr	r2, [pc, #80]	; (8003200 <HAL_TIM_Base_Start_IT+0x9c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x58>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <HAL_TIM_Base_Start_IT+0xa0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_TIM_Base_Start_IT+0x7c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d010      	beq.n	80031f0 <HAL_TIM_Base_Start_IT+0x8c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e007      	b.n	80031f0 <HAL_TIM_Base_Start_IT+0x8c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	2300      	movs	r3, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800

08003208 <HAL_TIM_IRQHandler>:
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	d122      	bne.n	8003264 <HAL_TIM_IRQHandler+0x5c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b02      	cmp	r3, #2
 800322a:	d11b      	bne.n	8003264 <HAL_TIM_IRQHandler+0x5c>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0202 	mvn.w	r2, #2
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	771a      	strb	r2, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0x4a>
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f9b1 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0x56>
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9a4 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f9b3 	bl	80035c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d122      	bne.n	80032b8 <HAL_TIM_IRQHandler+0xb0>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b04      	cmp	r3, #4
 800327e:	d11b      	bne.n	80032b8 <HAL_TIM_IRQHandler+0xb0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0204 	mvn.w	r2, #4
 8003288:	611a      	str	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	771a      	strb	r2, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x9e>
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f987 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0xaa>
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f97a 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f989 	bl	80035c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d122      	bne.n	800330c <HAL_TIM_IRQHandler+0x104>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d11b      	bne.n	800330c <HAL_TIM_IRQHandler+0x104>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0208 	mvn.w	r2, #8
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2204      	movs	r2, #4
 80032e2:	771a      	strb	r2, [r3, #28]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_TIM_IRQHandler+0xf2>
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f95d 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 80032f8:	e005      	b.n	8003306 <HAL_TIM_IRQHandler+0xfe>
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f950 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f95f 	bl	80035c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b10      	cmp	r3, #16
 8003318:	d122      	bne.n	8003360 <HAL_TIM_IRQHandler+0x158>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b10      	cmp	r3, #16
 8003326:	d11b      	bne.n	8003360 <HAL_TIM_IRQHandler+0x158>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0210 	mvn.w	r2, #16
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2208      	movs	r2, #8
 8003336:	771a      	strb	r2, [r3, #28]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x146>
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f933 	bl	80035b2 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x152>
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f926 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f935 	bl	80035c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d10e      	bne.n	800338c <HAL_TIM_IRQHandler+0x184>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d107      	bne.n	800338c <HAL_TIM_IRQHandler+0x184>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0201 	mvn.w	r2, #1
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fec0 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d10e      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x1b0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d107      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x1b0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033b0:	611a      	str	r2, [r3, #16]
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fa77 	bl	80038a6 <HAL_TIMEx_BreakCallback>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x1dc>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033dc:	611a      	str	r2, [r3, #16]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f8f9 	bl	80035d6 <HAL_TIM_TriggerCallback>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_IRQHandler+0x208>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_IRQHandler+0x208>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0220 	mvn.w	r2, #32
 8003408:	611a      	str	r2, [r3, #16]
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa42 	bl	8003894 <HAL_TIMEx_CommutCallback>
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_ConfigClockSource>:
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_TIM_ConfigClockSource+0x18>
 800342c:	2302      	movs	r3, #2
 800342e:	e0b3      	b.n	8003598 <HAL_TIM_ConfigClockSource+0x180>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003468:	d03e      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0xd0>
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346e:	f200 8087 	bhi.w	8003580 <HAL_TIM_ConfigClockSource+0x168>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	f000 8085 	beq.w	8003584 <HAL_TIM_ConfigClockSource+0x16c>
 800347a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347e:	d87f      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x168>
 8003480:	2b70      	cmp	r3, #112	; 0x70
 8003482:	d01a      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0xa2>
 8003484:	2b70      	cmp	r3, #112	; 0x70
 8003486:	d87b      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x168>
 8003488:	2b60      	cmp	r3, #96	; 0x60
 800348a:	d050      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x116>
 800348c:	2b60      	cmp	r3, #96	; 0x60
 800348e:	d877      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x168>
 8003490:	2b50      	cmp	r3, #80	; 0x50
 8003492:	d03c      	beq.n	800350e <HAL_TIM_ConfigClockSource+0xf6>
 8003494:	2b50      	cmp	r3, #80	; 0x50
 8003496:	d873      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x168>
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d058      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x136>
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d86f      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x168>
 80034a0:	2b30      	cmp	r3, #48	; 0x30
 80034a2:	d064      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x156>
 80034a4:	2b30      	cmp	r3, #48	; 0x30
 80034a6:	d86b      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x168>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d060      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x156>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d867      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x168>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d05c      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x156>
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d05a      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x156>
 80034b8:	e062      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x168>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f000 f966 	bl	800379a <TIM_ETR_SetConfig>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	e04e      	b.n	8003586 <HAL_TIM_ConfigClockSource+0x16e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6899      	ldr	r1, [r3, #8]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f000 f94f 	bl	800379a <TIM_ETR_SetConfig>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	e03b      	b.n	8003586 <HAL_TIM_ConfigClockSource+0x16e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	461a      	mov	r2, r3
 800351c:	f000 f8c6 	bl	80036ac <TIM_TI1_ConfigInputStage>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2150      	movs	r1, #80	; 0x50
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f91d 	bl	8003766 <TIM_ITRx_SetConfig>
 800352c:	e02b      	b.n	8003586 <HAL_TIM_ConfigClockSource+0x16e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	461a      	mov	r2, r3
 800353c:	f000 f8e4 	bl	8003708 <TIM_TI2_ConfigInputStage>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2160      	movs	r1, #96	; 0x60
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f90d 	bl	8003766 <TIM_ITRx_SetConfig>
 800354c:	e01b      	b.n	8003586 <HAL_TIM_ConfigClockSource+0x16e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	461a      	mov	r2, r3
 800355c:	f000 f8a6 	bl	80036ac <TIM_TI1_ConfigInputStage>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2140      	movs	r1, #64	; 0x40
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f8fd 	bl	8003766 <TIM_ITRx_SetConfig>
 800356c:	e00b      	b.n	8003586 <HAL_TIM_ConfigClockSource+0x16e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f000 f8f4 	bl	8003766 <TIM_ITRx_SetConfig>
 800357e:	e002      	b.n	8003586 <HAL_TIM_ConfigClockSource+0x16e>
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <HAL_TIM_ConfigClockSource+0x16e>
 8003584:	bf00      	nop
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003596:	2300      	movs	r3, #0
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_OC_DelayElapsedCallback>:
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <HAL_TIM_IC_CaptureCallback>:
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <HAL_TIM_TriggerCallback>:
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <TIM_Base_SetConfig>:
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <TIM_Base_SetConfig+0xb8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00b      	beq.n	8003618 <TIM_Base_SetConfig+0x30>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003606:	d007      	beq.n	8003618 <TIM_Base_SetConfig+0x30>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <TIM_Base_SetConfig+0xbc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d003      	beq.n	8003618 <TIM_Base_SetConfig+0x30>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <TIM_Base_SetConfig+0xc0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d108      	bne.n	800362a <TIM_Base_SetConfig+0x42>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <TIM_Base_SetConfig+0xb8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00b      	beq.n	800364a <TIM_Base_SetConfig+0x62>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003638:	d007      	beq.n	800364a <TIM_Base_SetConfig+0x62>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <TIM_Base_SetConfig+0xbc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <TIM_Base_SetConfig+0x62>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <TIM_Base_SetConfig+0xc0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d108      	bne.n	800365c <TIM_Base_SetConfig+0x74>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	629a      	str	r2, [r3, #40]	; 0x28
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a07      	ldr	r2, [pc, #28]	; (80036a0 <TIM_Base_SetConfig+0xb8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d103      	bne.n	8003690 <TIM_Base_SetConfig+0xa8>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	615a      	str	r2, [r3, #20]
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800

080036ac <TIM_TI1_ConfigInputStage>:
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0201 	bic.w	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	621a      	str	r2, [r3, #32]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f023 030a 	bic.w	r3, r3, #10
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	619a      	str	r2, [r3, #24]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	621a      	str	r2, [r3, #32]
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <TIM_TI2_ConfigInputStage>:
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f023 0210 	bic.w	r2, r3, #16
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	031b      	lsls	r3, r3, #12
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	621a      	str	r2, [r3, #32]
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <TIM_ITRx_SetConfig>:
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	f043 0307 	orr.w	r3, r3, #7
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <TIM_ETR_SetConfig>:
 800379a:	b480      	push	{r7}
 800379c:	b087      	sub	sp, #28
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	431a      	orrs	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e046      	b.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a16      	ldr	r2, [pc, #88]	; (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d009      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a10      	ldr	r2, [pc, #64]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10c      	bne.n	800386c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	4313      	orrs	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800387c:	2300      	movs	r3, #0
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800

08003894 <HAL_TIMEx_CommutCallback>:
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <HAL_TIMEx_BreakCallback>:
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e03f      	b.n	800394a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fdd4 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fc01 	bl	8004104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	d130      	bne.n	80039ce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Transmit_IT+0x26>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e029      	b.n	80039d0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_UART_Transmit_IT+0x38>
 8003986:	2302      	movs	r3, #2
 8003988:	e022      	b.n	80039d0 <HAL_UART_Transmit_IT+0x7e>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2221      	movs	r2, #33	; 0x21
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	e000      	b.n	80039d0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80039ce:	2302      	movs	r3, #2
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d11d      	bne.n	8003a30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_UART_Receive_IT+0x26>
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e016      	b.n	8003a32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Receive_IT+0x38>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e00f      	b.n	8003a32 <HAL_UART_Receive_IT+0x58>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f9e3 	bl	8003df2 <UART_Start_Receive_IT>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	e000      	b.n	8003a32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_UART_IRQHandler+0x52>
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fa93 	bl	8003fb2 <UART_Receive_IT>
      return;
 8003a8c:	e17b      	b.n	8003d86 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80b1 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x1bc>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_UART_IRQHandler+0x70>
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80a6 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_UART_IRQHandler+0x90>
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_UART_IRQHandler+0xb0>
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f043 0202 	orr.w	r2, r3, #2
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_UART_IRQHandler+0xd0>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	f043 0204 	orr.w	r2, r3, #4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00f      	beq.n	8003b36 <HAL_UART_IRQHandler+0xfa>
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <HAL_UART_IRQHandler+0xee>
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0208 	orr.w	r2, r3, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 811e 	beq.w	8003d7c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_UART_IRQHandler+0x11e>
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fa2c 	bl	8003fb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <HAL_UART_IRQHandler+0x146>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d031      	beq.n	8003be6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f96e 	bl	8003e64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d023      	beq.n	8003bde <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d013      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	4a76      	ldr	r2, [pc, #472]	; (8003d8c <HAL_UART_IRQHandler+0x350>)
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd ff0a 	bl	80019d4 <HAL_DMA_Abort_IT>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	e00e      	b.n	8003bf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8da 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	e00a      	b.n	8003bf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8d6 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	e006      	b.n	8003bf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8d2 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bf2:	e0c3      	b.n	8003d7c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf4:	bf00      	nop
    return;
 8003bf6:	e0c1      	b.n	8003d7c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 80a1 	bne.w	8003d44 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 809b 	beq.w	8003d44 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8095 	beq.w	8003d44 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d04e      	beq.n	8003cdc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c48:	8a3b      	ldrh	r3, [r7, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8098 	beq.w	8003d80 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c54:	8a3a      	ldrh	r2, [r7, #16]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	f080 8092 	bcs.w	8003d80 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8a3a      	ldrh	r2, [r7, #16]
 8003c60:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d02b      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c7a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0210 	bic.w	r2, r2, #16
 8003cb8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd fe4d 	bl	800195e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f864 	bl	8003da2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003cda:	e051      	b.n	8003d80 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d047      	beq.n	8003d84 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003cf4:	8a7b      	ldrh	r3, [r7, #18]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d044      	beq.n	8003d84 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d08:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0210 	bic.w	r2, r2, #16
 8003d36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d38:	8a7b      	ldrh	r3, [r7, #18]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f830 	bl	8003da2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d42:	e01f      	b.n	8003d84 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_UART_IRQHandler+0x324>
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f8c3 	bl	8003ee4 <UART_Transmit_IT>
    return;
 8003d5e:	e012      	b.n	8003d86 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <HAL_UART_IRQHandler+0x34a>
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f904 	bl	8003f82 <UART_EndTransmit_IT>
    return;
 8003d7a:	e004      	b.n	8003d86 <HAL_UART_IRQHandler+0x34a>
    return;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d84:	bf00      	nop
  }
}
 8003d86:	3728      	adds	r7, #40	; 0x28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	08003ebd 	.word	0x08003ebd

08003d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	4313      	orrs	r3, r2
 8003de6:	b2db      	uxtb	r3, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	88fa      	ldrh	r2, [r7, #6]
 8003e0a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2222      	movs	r2, #34	; 0x22
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e36:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0220 	orr.w	r2, r2, #32
 8003e56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d107      	bne.n	8003ea4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0210 	bic.w	r2, r2, #16
 8003ea2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ff5a 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b21      	cmp	r3, #33	; 0x21
 8003ef6:	d13e      	bne.n	8003f76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d114      	bne.n	8003f2c <UART_Transmit_IT+0x48>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d110      	bne.n	8003f2c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]
 8003f2a:	e008      	b.n	8003f3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	1c59      	adds	r1, r3, #1
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6211      	str	r1, [r2, #32]
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd f89c 	bl	80010e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b086      	sub	sp, #24
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b22      	cmp	r3, #34	; 0x22
 8003fc4:	f040 8099 	bne.w	80040fa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d117      	bne.n	8004002 <UART_Receive_IT+0x50>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8004000:	e026      	b.n	8004050 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d007      	beq.n	8004026 <UART_Receive_IT+0x74>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <UART_Receive_IT+0x82>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e008      	b.n	8004046 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004040:	b2da      	uxtb	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29b      	uxth	r3, r3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4619      	mov	r1, r3
 800405e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004060:	2b00      	cmp	r3, #0
 8004062:	d148      	bne.n	80040f6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0220 	bic.w	r2, r2, #32
 8004072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d123      	bne.n	80040ec <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0210 	bic.w	r2, r2, #16
 80040b8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d10a      	bne.n	80040de <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fe5c 	bl	8003da2 <HAL_UARTEx_RxEventCallback>
 80040ea:	e002      	b.n	80040f2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7fc ffbb 	bl	8001068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e002      	b.n	80040fc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800413e:	f023 030c 	bic.w	r3, r3, #12
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	430b      	orrs	r3, r1
 800414a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <UART_SetConfig+0x114>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d103      	bne.n	8004174 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800416c:	f7fe fa46 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	e002      	b.n	800417a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004174:	f7fe fa2e 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8004178:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009a      	lsls	r2, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <UART_SetConfig+0x118>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	0119      	lsls	r1, r3, #4
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009a      	lsls	r2, r3, #2
 80041a4:	441a      	add	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <UART_SetConfig+0x118>)
 80041b2:	fba3 0302 	umull	r0, r3, r3, r2
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2064      	movs	r0, #100	; 0x64
 80041ba:	fb00 f303 	mul.w	r3, r0, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	3332      	adds	r3, #50	; 0x32
 80041c4:	4a15      	ldr	r2, [pc, #84]	; (800421c <UART_SetConfig+0x118>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d0:	4419      	add	r1, r3
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009a      	lsls	r2, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <UART_SetConfig+0x118>)
 80041ea:	fba3 0302 	umull	r0, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2064      	movs	r0, #100	; 0x64
 80041f2:	fb00 f303 	mul.w	r3, r0, r3
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	3332      	adds	r3, #50	; 0x32
 80041fc:	4a07      	ldr	r2, [pc, #28]	; (800421c <UART_SetConfig+0x118>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	f003 020f 	and.w	r2, r3, #15
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	440a      	add	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40013800 	.word	0x40013800
 800421c:	51eb851f 	.word	0x51eb851f

08004220 <__libc_init_array>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	2600      	movs	r6, #0
 8004224:	4d0c      	ldr	r5, [pc, #48]	; (8004258 <__libc_init_array+0x38>)
 8004226:	4c0d      	ldr	r4, [pc, #52]	; (800425c <__libc_init_array+0x3c>)
 8004228:	1b64      	subs	r4, r4, r5
 800422a:	10a4      	asrs	r4, r4, #2
 800422c:	42a6      	cmp	r6, r4
 800422e:	d109      	bne.n	8004244 <__libc_init_array+0x24>
 8004230:	f000 f822 	bl	8004278 <_init>
 8004234:	2600      	movs	r6, #0
 8004236:	4d0a      	ldr	r5, [pc, #40]	; (8004260 <__libc_init_array+0x40>)
 8004238:	4c0a      	ldr	r4, [pc, #40]	; (8004264 <__libc_init_array+0x44>)
 800423a:	1b64      	subs	r4, r4, r5
 800423c:	10a4      	asrs	r4, r4, #2
 800423e:	42a6      	cmp	r6, r4
 8004240:	d105      	bne.n	800424e <__libc_init_array+0x2e>
 8004242:	bd70      	pop	{r4, r5, r6, pc}
 8004244:	f855 3b04 	ldr.w	r3, [r5], #4
 8004248:	4798      	blx	r3
 800424a:	3601      	adds	r6, #1
 800424c:	e7ee      	b.n	800422c <__libc_init_array+0xc>
 800424e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004252:	4798      	blx	r3
 8004254:	3601      	adds	r6, #1
 8004256:	e7f2      	b.n	800423e <__libc_init_array+0x1e>
 8004258:	080042b8 	.word	0x080042b8
 800425c:	080042b8 	.word	0x080042b8
 8004260:	080042b8 	.word	0x080042b8
 8004264:	080042c0 	.word	0x080042c0

08004268 <memset>:
 8004268:	4603      	mov	r3, r0
 800426a:	4402      	add	r2, r0
 800426c:	4293      	cmp	r3, r2
 800426e:	d100      	bne.n	8004272 <memset+0xa>
 8004270:	4770      	bx	lr
 8004272:	f803 1b01 	strb.w	r1, [r3], #1
 8004276:	e7f9      	b.n	800426c <memset+0x4>

08004278 <_init>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr

08004284 <_fini>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr


W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f8  080055f8  00020444  2**0
                  CONTENTS
  4 .ARM          00000000  080055f8  080055f8  00020444  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055f8  080055f8  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  08005608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f28  20000444  08005a4c  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000236c  08005a4c  0002236c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f818  00000000  00000000  0002046d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233d  00000000  00000000  0002fc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00031fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00032ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1db  00000000  00000000  00033d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff5a  00000000  00000000  0004df3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7c9  00000000  00000000  0005de95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec65e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  000ec6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000444 	.word	0x20000444
 8000128:	00000000 	.word	0x00000000
 800012c:	080054b4 	.word	0x080054b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000448 	.word	0x20000448
 8000148:	080054b4 	.word	0x080054b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
//#pragma once
#include "W5500.h"

W5500::W5500(
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	807b      	strh	r3, [r7, #2]
		SPI_HandleTypeDef* hspi_m,
		GPIO_TypeDef* W5500_CS_GPIO_Port_m,
		uint16_t W5500_CS_Pin_m,
		GPIO_TypeDef* W5500_RST_GPIO_Port_m,
		uint16_t W5500_RST_Pin_m
		)
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	3310      	adds	r3, #16
 800016e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f005 f90f 	bl	8005398 <memset>
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f005 f906 	bl	8005398 <memset>
{
	hspi_w = hspi_m;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	68ba      	ldr	r2, [r7, #8]
 8000190:	601a      	str	r2, [r3, #0]
	W5500_CS_GPIO_Port_w = W5500_CS_GPIO_Port_m;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	605a      	str	r2, [r3, #4]
	W5500_CS_Pin_w = W5500_CS_Pin_m;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	887a      	ldrh	r2, [r7, #2]
 800019c:	819a      	strh	r2, [r3, #12]
	W5500_RST_GPIO_Port_w = W5500_RST_GPIO_Port_m;
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	69ba      	ldr	r2, [r7, #24]
 80001a2:	609a      	str	r2, [r3, #8]
	W5500_RST_Pin_w = W5500_RST_Pin_m;
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	8bba      	ldrh	r2, [r7, #28]
 80001a8:	81da      	strh	r2, [r3, #14]
}
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	4618      	mov	r0, r3
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <_ZN5W5500D1Ev>:

W5500::~W5500()
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
{
}
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	4618      	mov	r0, r3
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <_ZN5W55005resetEv>:

// аппаратный сброс чипа
void W5500::reset()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// для аппаратного сброса "тянем" вход RSTn к "0" на 1 мс
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_RESET);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6898      	ldr	r0, [r3, #8]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	89db      	ldrh	r3, [r3, #14]
 80001d8:	2200      	movs	r2, #0
 80001da:	4619      	mov	r1, r3
 80001dc:	f002 fe82 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f002 fb19 	bl	8002818 <HAL_Delay>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	6898      	ldr	r0, [r3, #8]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	89db      	ldrh	r3, [r3, #14]
 80001ee:	2201      	movs	r2, #1
 80001f0:	4619      	mov	r1, r3
 80001f2:	f002 fe77 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f002 fb0e 	bl	8002818 <HAL_Delay>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <_ZN5W550015readByteFromCRBEh>:

//---------------------------------------------------------------------------

// читаем байт из регистра блока CRB
uint8_t W5500::readByteFromCRB(uint8_t address)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af02      	add	r7, sp, #8
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	mosiBytes_w[0] = 0;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	78fa      	ldrb	r2, [r7, #3]
 800021a:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	6858      	ldr	r0, [r3, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	899b      	ldrh	r3, [r3, #12]
 800022a:	2200      	movs	r2, #0
 800022c:	4619      	mov	r1, r3
 800022e:	f002 fe59 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f103 0110 	add.w	r1, r3, #16
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2304      	movs	r3, #4
 800024a:	f003 fc57 	bl	8003afc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6858      	ldr	r0, [r3, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	899b      	ldrh	r3, [r3, #12]
 8000256:	2201      	movs	r2, #1
 8000258:	4619      	mov	r1, r3
 800025a:	f002 fe43 	bl	8002ee4 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <_ZN5W550015writeArrayToCRBEPhhh>:
	return;
}

// записываем массив байт в регистры блока CRB
void W5500::writeArrayToCRB(uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	460b      	mov	r3, r1
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	4613      	mov	r3, r2
 8000280:	71bb      	strb	r3, [r7, #6]
	mosiBytes_w[0] = 0;
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2200      	movs	r2, #0
 8000286:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	79ba      	ldrb	r2, [r7, #6]
 800028c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	2204      	movs	r2, #4
 8000292:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	429a      	cmp	r2, r3
 800029e:	da0d      	bge.n	80002bc <_ZN5W550015writeArrayToCRBEPhhh+0x50>
	{
		mosiBytes_w[i+3] = array[i];
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	441a      	add	r2, r3
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3303      	adds	r3, #3
 80002aa:	7811      	ldrb	r1, [r2, #0]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	4413      	add	r3, r2
 80002b0:	460a      	mov	r2, r1
 80002b2:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	3301      	adds	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	e7ed      	b.n	8000298 <_ZN5W550015writeArrayToCRBEPhhh+0x2c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	6858      	ldr	r0, [r3, #4]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	899b      	ldrh	r3, [r3, #12]
 80002c4:	2200      	movs	r2, #0
 80002c6:	4619      	mov	r1, r3
 80002c8:	f002 fe0c 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f103 0110 	add.w	r1, r3, #16
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	3303      	adds	r3, #3
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	f003 facf 	bl	8003884 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	6858      	ldr	r0, [r3, #4]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	899b      	ldrh	r3, [r3, #12]
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	f002 fdf7 	bl	8002ee4 <HAL_GPIO_WritePin>
	return;
 80002f6:	bf00      	nop
}
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <_ZN5W550015readByteFromSRBEhh>:

// читаем байт из регистра блока SRB
uint8_t W5500::readByteFromSRB(uint8_t socket, uint8_t address)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b084      	sub	sp, #16
 8000302:	af02      	add	r7, sp, #8
 8000304:	6078      	str	r0, [r7, #4]
 8000306:	460b      	mov	r3, r1
 8000308:	70fb      	strb	r3, [r7, #3]
 800030a:	4613      	mov	r3, r2
 800030c:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	78ba      	ldrb	r2, [r7, #2]
 8000318:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	78fa      	ldrb	r2, [r7, #3]
 800031e:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6858      	ldr	r0, [r3, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	899b      	ldrh	r3, [r3, #12]
 8000328:	2200      	movs	r2, #0
 800032a:	4619      	mov	r1, r3
 800032c:	f002 fdda 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6818      	ldr	r0, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f103 0110 	add.w	r1, r3, #16
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2304      	movs	r3, #4
 8000348:	f003 fbd8 	bl	8003afc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6858      	ldr	r0, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	899b      	ldrh	r3, [r3, #12]
 8000354:	2201      	movs	r2, #1
 8000356:	4619      	mov	r1, r3
 8000358:	f002 fdc4 	bl	8002ee4 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <_ZN5W550015readWordFromSRBEhh>:

// читаем слово (2 байта) из регистров блока SRB
uint16_t W5500::readWordFromSRB(uint8_t socket, uint8_t address)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b086      	sub	sp, #24
 800036e:	af02      	add	r7, sp, #8
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	460b      	mov	r3, r1
 8000374:	70fb      	strb	r3, [r7, #3]
 8000376:	4613      	mov	r3, r2
 8000378:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	78ba      	ldrb	r2, [r7, #2]
 8000384:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	78fa      	ldrb	r2, [r7, #3]
 800038a:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6858      	ldr	r0, [r3, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	899b      	ldrh	r3, [r3, #12]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	f002 fda4 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 5, 1000);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6818      	ldr	r0, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f103 0110 	add.w	r1, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80003ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2305      	movs	r3, #5
 80003b4:	f003 fba2 	bl	8003afc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6858      	ldr	r0, [r3, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	899b      	ldrh	r3, [r3, #12]
 80003c0:	2201      	movs	r2, #1
 80003c2:	4619      	mov	r1, r3
 80003c4:	f002 fd8e 	bl	8002ee4 <HAL_GPIO_WritePin>
	word_w5500 temp;
	temp.byte[0] = misoBytes_w[4];
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80003ce:	733b      	strb	r3, [r7, #12]
	temp.byte[1] = misoBytes_w[3];
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80003d6:	737b      	strb	r3, [r7, #13]
	return temp.word;
 80003d8:	89bb      	ldrh	r3, [r7, #12]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <_ZN5W550014writeByteToSRBEhhh>:
	return;
}

// записываем байт в регистр блока SRB
void W5500::writeByteToSRB(uint8_t socket, uint8_t value, uint8_t address)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b082      	sub	sp, #8
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	4608      	mov	r0, r1
 80003ec:	4611      	mov	r1, r2
 80003ee:	461a      	mov	r2, r3
 80003f0:	4603      	mov	r3, r0
 80003f2:	70fb      	strb	r3, [r7, #3]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70bb      	strb	r3, [r7, #2]
 80003f8:	4613      	mov	r3, r2
 80003fa:	707b      	strb	r3, [r7, #1]
	mosiBytes_w[0] = 0;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	787a      	ldrb	r2, [r7, #1]
 8000406:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	b2da      	uxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = value;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	78ba      	ldrb	r2, [r7, #2]
 8000418:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6858      	ldr	r0, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	899b      	ldrh	r3, [r3, #12]
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	f002 fd5d 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 1000);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f103 0110 	add.w	r1, r3, #16
 8000434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000438:	2204      	movs	r2, #4
 800043a:	f003 fa23 	bl	8003884 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6858      	ldr	r0, [r3, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	899b      	ldrh	r3, [r3, #12]
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	f002 fd4b 	bl	8002ee4 <HAL_GPIO_WritePin>
	return;
 800044e:	bf00      	nop
}
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_ZN5W550014writeWordToSRBEhth>:

// записываем слово (2 байта) в регистры блока SRB
void W5500::writeWordToSRB(uint8_t socket, uint16_t value, uint8_t address)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b084      	sub	sp, #16
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	4608      	mov	r0, r1
 8000460:	4611      	mov	r1, r2
 8000462:	461a      	mov	r2, r3
 8000464:	4603      	mov	r3, r0
 8000466:	70fb      	strb	r3, [r7, #3]
 8000468:	460b      	mov	r3, r1
 800046a:	803b      	strh	r3, [r7, #0]
 800046c:	4613      	mov	r3, r2
 800046e:	70bb      	strb	r3, [r7, #2]
	word_w5500 temp;
	temp.word = value;
 8000470:	883b      	ldrh	r3, [r7, #0]
 8000472:	81bb      	strh	r3, [r7, #12]
	mosiBytes_w[0] = 0;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	78ba      	ldrb	r2, [r7, #2]
 800047e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	b2da      	uxtb	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = temp.byte[1];
 800048c:	7b7a      	ldrb	r2, [r7, #13]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = temp.byte[0];
 8000492:	7b3a      	ldrb	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	751a      	strb	r2, [r3, #20]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6858      	ldr	r0, [r3, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	899b      	ldrh	r3, [r3, #12]
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	f002 fd1e 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 5, 1000);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f103 0110 	add.w	r1, r3, #16
 80004b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b6:	2205      	movs	r2, #5
 80004b8:	f003 f9e4 	bl	8003884 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6858      	ldr	r0, [r3, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	899b      	ldrh	r3, [r3, #12]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	f002 fd0c 	bl	8002ee4 <HAL_GPIO_WritePin>
	return;
 80004cc:	bf00      	nop
}
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_ZN5W550015writeArrayToSRBEhPhhh>:

// записываем массив байт в регистры блока SRB
void W5500::writeArrayToSRB(uint8_t socket, uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	461a      	mov	r2, r3
 80004e0:	460b      	mov	r3, r1
 80004e2:	72fb      	strb	r3, [r7, #11]
 80004e4:	4613      	mov	r3, r2
 80004e6:	72bb      	strb	r3, [r7, #10]
	mosiBytes_w[0] = 0;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2200      	movs	r2, #0
 80004ec:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004f4:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	7abb      	ldrb	r3, [r7, #10]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	429a      	cmp	r2, r3
 800050c:	da0d      	bge.n	800052a <_ZN5W550015writeArrayToSRBEhPhhh+0x56>
	{
		mosiBytes_w[i+3] = array[i];
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	441a      	add	r2, r3
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3303      	adds	r3, #3
 8000518:	7811      	ldrb	r1, [r2, #0]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	460a      	mov	r2, r1
 8000520:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e7ed      	b.n	8000506 <_ZN5W550015writeArrayToSRBEhPhhh+0x32>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6858      	ldr	r0, [r3, #4]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	899b      	ldrh	r3, [r3, #12]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	f002 fcd5 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f103 0110 	add.w	r1, r3, #16
 8000544:	7abb      	ldrb	r3, [r7, #10]
 8000546:	b29b      	uxth	r3, r3
 8000548:	3303      	adds	r3, #3
 800054a:	b29a      	uxth	r2, r3
 800054c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000550:	f003 f998 	bl	8003884 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	899b      	ldrh	r3, [r3, #12]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f002 fcc0 	bl	8002ee4 <HAL_GPIO_WritePin>
	return;
 8000564:	bf00      	nop
}
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <_ZN5W550021readArrayFromRXbufferEhPht6word_y>:

//---------------------------------------------------------------------------

// читаем массив байт в буфер TX
void W5500::readArrayFromRXbuffer(uint8_t socket, uint8_t* destinationArray, uint16_t sizeArray, word_y beginAddress)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b089      	sub	sp, #36	; 0x24
 8000570:	af02      	add	r7, sp, #8
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	72fb      	strb	r3, [r7, #11]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 8000580:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 8000588:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket + 16);
 8000590:	7afb      	ldrb	r3, [r7, #11]
 8000592:	3310      	adds	r3, #16
 8000594:	b2da      	uxtb	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6858      	ldr	r0, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	899b      	ldrh	r3, [r3, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	f002 fc9d 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, (sizeArray + 3), 1000);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0110 	add.w	r1, r3, #16
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80005ba:	893b      	ldrh	r3, [r7, #8]
 80005bc:	3303      	adds	r3, #3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80005c4:	9400      	str	r4, [sp, #0]
 80005c6:	f003 fa99 	bl	8003afc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6858      	ldr	r0, [r3, #4]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f002 fc85 	bl	8002ee4 <HAL_GPIO_WritePin>
	for(int i = 0; i < sizeArray; ++i)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	893b      	ldrh	r3, [r7, #8]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	da0d      	bge.n	8000602 <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x96>
	{
		destinationArray[i] = misoBytes_w[i+3];
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	1cda      	adds	r2, r3, #3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	68f9      	ldr	r1, [r7, #12]
 80005f2:	440a      	add	r2, r1
 80005f4:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 80005f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeArray; ++i)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e7ed      	b.n	80005de <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x72>
	}
	return;
 8000602:	bf00      	nop
}
 8000604:	371c      	adds	r7, #28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd90      	pop	{r4, r7, pc}

0800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>:


// записываем массив байт в буфер TX
void W5500::writeArrayToTXbuffer(uint8_t socket, uint8_t* array, uint16_t sizeArray, word_y beginAddress)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	461a      	mov	r2, r3
 8000616:	460b      	mov	r3, r1
 8000618:	72fb      	strb	r3, [r7, #11]
 800061a:	4613      	mov	r3, r2
 800061c:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 800061e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 8000626:	f897 2020 	ldrb.w	r2, [r7, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = ((socket + 8) | 0b00000100);
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	3308      	adds	r3, #8
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b25b      	sxtb	r3, r3
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	893b      	ldrh	r3, [r7, #8]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	429a      	cmp	r2, r3
 800064c:	da0d      	bge.n	800066a <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x60>
	{
		mosiBytes_w[i+3] = array[i];
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	441a      	add	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3303      	adds	r3, #3
 8000658:	7811      	ldrb	r1, [r2, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e7ed      	b.n	8000646 <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x3c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6858      	ldr	r0, [r3, #4]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	f002 fc35 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f103 0110 	add.w	r1, r3, #16
 8000684:	893b      	ldrh	r3, [r7, #8]
 8000686:	3303      	adds	r3, #3
 8000688:	b29a      	uxth	r2, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	f003 f8f9 	bl	8003884 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6858      	ldr	r0, [r3, #4]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	899b      	ldrh	r3, [r3, #12]
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	f002 fc21 	bl	8002ee4 <HAL_GPIO_WritePin>
	return;
 80006a2:	bf00      	nop
}
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_ZN5W550013receivePacketEhPhPt>:

//---------------------------------------------------------------------------

// получаем данные по протоколу UDP
void W5500::receivePacket(uint8_t socket, uint8_t* dataForReceive, uint16_t* sizeArray)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b08a      	sub	sp, #40	; 0x28
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	460b      	mov	r3, r1
 80006b8:	72fb      	strb	r3, [r7, #11]
	// временные переменные для хранения значений регистров RX_RSR и RX_RD
	word_y valueRSR, valueRSRretry, valueRD;

	// читаем регистр RX_RSR (разница между значениями RX_WR и RX_RD)
	valueRSR.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2226      	movs	r2, #38	; 0x26
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff fe52 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006c6:	4603      	mov	r3, r0
 80006c8:	83bb      	strh	r3, [r7, #28]
	// считываем еще раз
	valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	2226      	movs	r2, #38	; 0x26
 80006ce:	4619      	mov	r1, r3
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff fe4a 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006d6:	4603      	mov	r3, r0
 80006d8:	833b      	strh	r3, [r7, #24]
	// сравниваем, тем самым исключая изменения в нём в момент считывания
	while (valueRSR.word != valueRSRretry.word)
 80006da:	8bba      	ldrh	r2, [r7, #28]
 80006dc:	8b3b      	ldrh	r3, [r7, #24]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d00a      	beq.n	80006f8 <_ZN5W550013receivePacketEhPhPt+0x4e>
	{
		valueRSR.word = valueRSRretry.word;
 80006e2:	8b3b      	ldrh	r3, [r7, #24]
 80006e4:	83bb      	strh	r3, [r7, #28]
		valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	2226      	movs	r2, #38	; 0x26
 80006ea:	4619      	mov	r1, r3
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff fe3c 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	833b      	strh	r3, [r7, #24]
	while (valueRSR.word != valueRSRretry.word)
 80006f6:	e7f0      	b.n	80006da <_ZN5W550013receivePacketEhPhPt+0x30>
	}

	// читаем регистр RX_RD (указатель на начало полученных данных)
	valueRD.word = readWordFromSRB(socket, W5500_Sn_RX_RD);
 80006f8:	7afb      	ldrb	r3, [r7, #11]
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	4619      	mov	r1, r3
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff fe33 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000704:	4603      	mov	r3, r0
 8000706:	82bb      	strh	r3, [r7, #20]

	// читаем буфер RX
	readArrayFromRXbuffer(socket, dataForReceive, valueRSR.word, valueRD);
 8000708:	8bba      	ldrh	r2, [r7, #28]
 800070a:	7af9      	ldrb	r1, [r7, #11]
 800070c:	8abb      	ldrh	r3, [r7, #20]
 800070e:	f8ad 3000 	strh.w	r3, [sp]
 8000712:	4613      	mov	r3, r2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff28 	bl	800056c <_ZN5W550021readArrayFromRXbufferEhPht6word_y>

	// увеличиваем значение указателя на полученные данные на число считанных байт
	valueRD.word += valueRSR.word;
 800071c:	8aba      	ldrh	r2, [r7, #20]
 800071e:	8bbb      	ldrh	r3, [r7, #28]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	82bb      	strh	r3, [r7, #20]
	writeWordToSRB(socket, valueRD.word, W5500_Sn_RX_RD);
 8000726:	8aba      	ldrh	r2, [r7, #20]
 8000728:	7af9      	ldrb	r1, [r7, #11]
 800072a:	2328      	movs	r3, #40	; 0x28
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff fe92 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// завершаем процесс чтения из буфера RX
	writeByteToSRB(socket, W5500_Sn_CR_RECV, W5500_Sn_CR);
 8000732:	7af9      	ldrb	r1, [r7, #11]
 8000734:	2301      	movs	r3, #1
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff fe52 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

	// записываем значение полученных байт
	*sizeArray = valueRSR.word;
 800073e:	8bba      	ldrh	r2, [r7, #28]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	801a      	strh	r2, [r3, #0]
	return;
 8000744:	bf00      	nop
}
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <_ZN5W550010sendPacketEhPht>:

// отправляем данные по протоколу UDP
void W5500::sendPacket(uint8_t socket, uint8_t* dataForSend, uint16_t sizeArray)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af02      	add	r7, sp, #8
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	461a      	mov	r2, r3
 8000758:	460b      	mov	r3, r1
 800075a:	72fb      	strb	r3, [r7, #11]
 800075c:	4613      	mov	r3, r2
 800075e:	813b      	strh	r3, [r7, #8]
	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	2220      	movs	r2, #32
 8000764:	4619      	mov	r1, r3
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f7ff fdff 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 800076c:	4603      	mov	r3, r0
 800076e:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000770:	8abb      	ldrh	r3, [r7, #20]
 8000772:	893a      	ldrh	r2, [r7, #8]
 8000774:	429a      	cmp	r2, r3
 8000776:	d823      	bhi.n	80007c0 <_ZN5W550010sendPacketEhPht+0x74>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 8000778:	7afb      	ldrb	r3, [r7, #11]
 800077a:	2224      	movs	r2, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff fdf3 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000784:	4603      	mov	r3, r0
 8000786:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, dataForSend, sizeArray, valueWR);
 8000788:	893a      	ldrh	r2, [r7, #8]
 800078a:	7af9      	ldrb	r1, [r7, #11]
 800078c:	8a3b      	ldrh	r3, [r7, #16]
 800078e:	f8ad 3000 	strh.w	r3, [sp]
 8000792:	4613      	mov	r3, r2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff ff37 	bl	800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 800079c:	8a3a      	ldrh	r2, [r7, #16]
 800079e:	893b      	ldrh	r3, [r7, #8]
 80007a0:	4413      	add	r3, r2
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 80007a6:	8a3a      	ldrh	r2, [r7, #16]
 80007a8:	7af9      	ldrb	r1, [r7, #11]
 80007aa:	2324      	movs	r3, #36	; 0x24
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff fe52 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 80007b2:	7af9      	ldrb	r1, [r7, #11]
 80007b4:	2301      	movs	r3, #1
 80007b6:	2220      	movs	r2, #32
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff fe12 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
	return;
 80007be:	e000      	b.n	80007c2 <_ZN5W550010sendPacketEhPht+0x76>
	if((uint16_t)sizeArray > valueFSR.word) return;
 80007c0:	bf00      	nop
}
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZN5W550010sendStringEhPc>:

// отправляем строку
void W5500::sendString(uint8_t socket, char* stringForSend)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	460b      	mov	r3, r1
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	72fb      	strb	r3, [r7, #11]
	// вычисляем размер передаваемой строки
	uint16_t sizeArray = strlen(stringForSend);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fcb8 	bl	800014c <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	82fb      	strh	r3, [r7, #22]

	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	2220      	movs	r2, #32
 80007e4:	4619      	mov	r1, r3
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff fdbf 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80007ec:	4603      	mov	r3, r0
 80007ee:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 80007f0:	8abb      	ldrh	r3, [r7, #20]
 80007f2:	8afa      	ldrh	r2, [r7, #22]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d823      	bhi.n	8000840 <_ZN5W550010sendStringEhPc+0x78>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	2224      	movs	r2, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff fdb3 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000804:	4603      	mov	r3, r0
 8000806:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, (uint8_t*)stringForSend, sizeArray, valueWR);
 8000808:	8afa      	ldrh	r2, [r7, #22]
 800080a:	7af9      	ldrb	r1, [r7, #11]
 800080c:	8a3b      	ldrh	r3, [r7, #16]
 800080e:	f8ad 3000 	strh.w	r3, [sp]
 8000812:	4613      	mov	r3, r2
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff fef7 	bl	800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 800081c:	8a3a      	ldrh	r2, [r7, #16]
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	4413      	add	r3, r2
 8000822:	b29b      	uxth	r3, r3
 8000824:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 8000826:	8a3a      	ldrh	r2, [r7, #16]
 8000828:	7af9      	ldrb	r1, [r7, #11]
 800082a:	2324      	movs	r3, #36	; 0x24
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff fe12 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 8000832:	7af9      	ldrb	r1, [r7, #11]
 8000834:	2301      	movs	r3, #1
 8000836:	2220      	movs	r2, #32
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fdd2 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
	return;
 800083e:	e000      	b.n	8000842 <_ZN5W550010sendStringEhPc+0x7a>
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000840:	bf00      	nop
}
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <_Z10int2letterRc>:

extern uint32_t receivedDataTelnet[];
extern char receivedMACTelnet[];

void int2letter(char& digit)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	  if (digit <= 9) digit += 48;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d806      	bhi.n	8000866 <_Z10int2letterRc+0x1e>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3330      	adds	r3, #48	; 0x30
 800085e:	b2da      	uxtb	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	701a      	strb	r2, [r3, #0]
	  else digit += 55;
	  return;
 8000864:	e006      	b.n	8000874 <_Z10int2letterRc+0x2c>
	  else digit += 55;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3337      	adds	r3, #55	; 0x37
 800086c:	b2da      	uxtb	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	701a      	strb	r2, [r3, #0]
	  return;
 8000872:	bf00      	nop
}
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <_Z10letter2intRKc>:

uint8_t letter2int(const char& digit)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if (digit >= '0' && digit <= '9')
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b2f      	cmp	r3, #47	; 0x2f
 800088a:	d908      	bls.n	800089e <_Z10letter2intRKc+0x22>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b39      	cmp	r3, #57	; 0x39
 8000892:	d804      	bhi.n	800089e <_Z10letter2intRKc+0x22>
	{
		return digit - 48;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3b30      	subs	r3, #48	; 0x30
 800089a:	b2db      	uxtb	r3, r3
 800089c:	e01a      	b.n	80008d4 <_Z10letter2intRKc+0x58>
	}
	else if (digit >= 'A' && digit <= 'F')
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b40      	cmp	r3, #64	; 0x40
 80008a4:	d908      	bls.n	80008b8 <_Z10letter2intRKc+0x3c>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b46      	cmp	r3, #70	; 0x46
 80008ac:	d804      	bhi.n	80008b8 <_Z10letter2intRKc+0x3c>
	{
		return digit - 55;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	3b37      	subs	r3, #55	; 0x37
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	e00d      	b.n	80008d4 <_Z10letter2intRKc+0x58>
	}
	else if (digit >= 'a' && digit <= 'f')
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b60      	cmp	r3, #96	; 0x60
 80008be:	d908      	bls.n	80008d2 <_Z10letter2intRKc+0x56>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b66      	cmp	r3, #102	; 0x66
 80008c6:	d804      	bhi.n	80008d2 <_Z10letter2intRKc+0x56>
	{
		return digit - 87;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	3b57      	subs	r3, #87	; 0x57
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	e000      	b.n	80008d4 <_Z10letter2intRKc+0x58>
	}
	else return 0;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
	...

080008e0 <_Z8fillTextv>:

void fillText()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	  textConnected[53] = crb.sipr0/100 + 48;
 80008e4:	4bb4      	ldr	r3, [pc, #720]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 80008e6:	7bdb      	ldrb	r3, [r3, #15]
 80008e8:	4ab4      	ldr	r2, [pc, #720]	; (8000bbc <_Z8fillTextv+0x2dc>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	3330      	adds	r3, #48	; 0x30
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4bb2      	ldr	r3, [pc, #712]	; (8000bc0 <_Z8fillTextv+0x2e0>)
 80008f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	  textConnected[54] = (crb.sipr0/10)%10 + 48;
 80008fc:	4bae      	ldr	r3, [pc, #696]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 80008fe:	7bdb      	ldrb	r3, [r3, #15]
 8000900:	4ab0      	ldr	r2, [pc, #704]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	08db      	lsrs	r3, r3, #3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4bae      	ldr	r3, [pc, #696]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 800090c:	fba3 1302 	umull	r1, r3, r3, r2
 8000910:	08d9      	lsrs	r1, r3, #3
 8000912:	460b      	mov	r3, r1
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	440b      	add	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3330      	adds	r3, #48	; 0x30
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4ba7      	ldr	r3, [pc, #668]	; (8000bc0 <_Z8fillTextv+0x2e0>)
 8000924:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	  textConnected[55] = crb.sipr0%10 + 48;
 8000928:	4ba3      	ldr	r3, [pc, #652]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 800092a:	7bda      	ldrb	r2, [r3, #15]
 800092c:	4ba5      	ldr	r3, [pc, #660]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 800092e:	fba3 1302 	umull	r1, r3, r3, r2
 8000932:	08d9      	lsrs	r1, r3, #3
 8000934:	460b      	mov	r3, r1
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3330      	adds	r3, #48	; 0x30
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b9e      	ldr	r3, [pc, #632]	; (8000bc0 <_Z8fillTextv+0x2e0>)
 8000946:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	  text0[27] = crb.sipr1/100 + 48;
 800094a:	4b9b      	ldr	r3, [pc, #620]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 800094c:	7c1b      	ldrb	r3, [r3, #16]
 800094e:	4a9b      	ldr	r2, [pc, #620]	; (8000bbc <_Z8fillTextv+0x2dc>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	095b      	lsrs	r3, r3, #5
 8000956:	b2db      	uxtb	r3, r3
 8000958:	3330      	adds	r3, #48	; 0x30
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b9a      	ldr	r3, [pc, #616]	; (8000bc8 <_Z8fillTextv+0x2e8>)
 800095e:	76da      	strb	r2, [r3, #27]
	  text0[28] = (crb.sipr1/10)%10 + 48;
 8000960:	4b95      	ldr	r3, [pc, #596]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000962:	7c1b      	ldrb	r3, [r3, #16]
 8000964:	4a97      	ldr	r2, [pc, #604]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	08db      	lsrs	r3, r3, #3
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b95      	ldr	r3, [pc, #596]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000970:	fba3 1302 	umull	r1, r3, r3, r2
 8000974:	08d9      	lsrs	r1, r3, #3
 8000976:	460b      	mov	r3, r1
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	3330      	adds	r3, #48	; 0x30
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b90      	ldr	r3, [pc, #576]	; (8000bc8 <_Z8fillTextv+0x2e8>)
 8000988:	771a      	strb	r2, [r3, #28]
	  text0[29] = crb.sipr1%10 + 48;
 800098a:	4b8b      	ldr	r3, [pc, #556]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 800098c:	7c1a      	ldrb	r2, [r3, #16]
 800098e:	4b8d      	ldr	r3, [pc, #564]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000990:	fba3 1302 	umull	r1, r3, r3, r2
 8000994:	08d9      	lsrs	r1, r3, #3
 8000996:	460b      	mov	r3, r1
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	440b      	add	r3, r1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3330      	adds	r3, #48	; 0x30
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b88      	ldr	r3, [pc, #544]	; (8000bc8 <_Z8fillTextv+0x2e8>)
 80009a8:	775a      	strb	r2, [r3, #29]
	  text1[27] = crb.sipr2/100 + 48;
 80009aa:	4b83      	ldr	r3, [pc, #524]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 80009ac:	7c5b      	ldrb	r3, [r3, #17]
 80009ae:	4a83      	ldr	r2, [pc, #524]	; (8000bbc <_Z8fillTextv+0x2dc>)
 80009b0:	fba2 2303 	umull	r2, r3, r2, r3
 80009b4:	095b      	lsrs	r3, r3, #5
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	3330      	adds	r3, #48	; 0x30
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <_Z8fillTextv+0x2ec>)
 80009be:	76da      	strb	r2, [r3, #27]
	  text1[28] = (crb.sipr2/10)%10 + 48;
 80009c0:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 80009c2:	7c5b      	ldrb	r3, [r3, #17]
 80009c4:	4a7f      	ldr	r2, [pc, #508]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b7d      	ldr	r3, [pc, #500]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 80009d0:	fba3 1302 	umull	r1, r3, r3, r2
 80009d4:	08d9      	lsrs	r1, r3, #3
 80009d6:	460b      	mov	r3, r1
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	440b      	add	r3, r1
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	3330      	adds	r3, #48	; 0x30
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <_Z8fillTextv+0x2ec>)
 80009e8:	771a      	strb	r2, [r3, #28]
	  text1[29] = crb.sipr2%10 + 48;
 80009ea:	4b73      	ldr	r3, [pc, #460]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 80009ec:	7c5a      	ldrb	r2, [r3, #17]
 80009ee:	4b75      	ldr	r3, [pc, #468]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 80009f0:	fba3 1302 	umull	r1, r3, r3, r2
 80009f4:	08d9      	lsrs	r1, r3, #3
 80009f6:	460b      	mov	r3, r1
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	3330      	adds	r3, #48	; 0x30
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b71      	ldr	r3, [pc, #452]	; (8000bcc <_Z8fillTextv+0x2ec>)
 8000a08:	775a      	strb	r2, [r3, #29]
	  text2[27] = crb.sipr3/100 + 48;
 8000a0a:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000a0c:	7c9b      	ldrb	r3, [r3, #18]
 8000a0e:	4a6b      	ldr	r2, [pc, #428]	; (8000bbc <_Z8fillTextv+0x2dc>)
 8000a10:	fba2 2303 	umull	r2, r3, r2, r3
 8000a14:	095b      	lsrs	r3, r3, #5
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3330      	adds	r3, #48	; 0x30
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <_Z8fillTextv+0x2f0>)
 8000a1e:	76da      	strb	r2, [r3, #27]
	  text2[28] = (crb.sipr3/10)%10 + 48;
 8000a20:	4b65      	ldr	r3, [pc, #404]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000a22:	7c9b      	ldrb	r3, [r3, #18]
 8000a24:	4a67      	ldr	r2, [pc, #412]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000a30:	fba3 1302 	umull	r1, r3, r3, r2
 8000a34:	08d9      	lsrs	r1, r3, #3
 8000a36:	460b      	mov	r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	3330      	adds	r3, #48	; 0x30
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <_Z8fillTextv+0x2f0>)
 8000a48:	771a      	strb	r2, [r3, #28]
	  text2[29] = crb.sipr3%10 + 48;
 8000a4a:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000a4c:	7c9a      	ldrb	r2, [r3, #18]
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000a50:	fba3 1302 	umull	r1, r3, r3, r2
 8000a54:	08d9      	lsrs	r1, r3, #3
 8000a56:	460b      	mov	r3, r1
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	3330      	adds	r3, #48	; 0x30
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b5a      	ldr	r3, [pc, #360]	; (8000bd0 <_Z8fillTextv+0x2f0>)
 8000a68:	775a      	strb	r2, [r3, #29]

	  text3[36] = crb.subr0/100 + 48;
 8000a6a:	4b53      	ldr	r3, [pc, #332]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000a6c:	795b      	ldrb	r3, [r3, #5]
 8000a6e:	4a53      	ldr	r2, [pc, #332]	; (8000bbc <_Z8fillTextv+0x2dc>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	095b      	lsrs	r3, r3, #5
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	3330      	adds	r3, #48	; 0x30
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b55      	ldr	r3, [pc, #340]	; (8000bd4 <_Z8fillTextv+0x2f4>)
 8000a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  text3[37] = (crb.subr0/10)%10 + 48;
 8000a82:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000a84:	795b      	ldrb	r3, [r3, #5]
 8000a86:	4a4f      	ldr	r2, [pc, #316]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000a92:	fba3 1302 	umull	r1, r3, r3, r2
 8000a96:	08d9      	lsrs	r1, r3, #3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	3330      	adds	r3, #48	; 0x30
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <_Z8fillTextv+0x2f4>)
 8000aaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  text3[38] = crb.subr0%10 + 48;
 8000aae:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000ab0:	795a      	ldrb	r2, [r3, #5]
 8000ab2:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab8:	08d9      	lsrs	r1, r3, #3
 8000aba:	460b      	mov	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	440b      	add	r3, r1
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	3330      	adds	r3, #48	; 0x30
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <_Z8fillTextv+0x2f4>)
 8000acc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  text4[36] = crb.subr1/100 + 48;
 8000ad0:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000ad2:	799b      	ldrb	r3, [r3, #6]
 8000ad4:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <_Z8fillTextv+0x2dc>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	3330      	adds	r3, #48	; 0x30
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <_Z8fillTextv+0x2f8>)
 8000ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  text4[37] = (crb.subr1/10)%10 + 48;
 8000ae8:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000aea:	799b      	ldrb	r3, [r3, #6]
 8000aec:	4a35      	ldr	r2, [pc, #212]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	08db      	lsrs	r3, r3, #3
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000af8:	fba3 1302 	umull	r1, r3, r3, r2
 8000afc:	08d9      	lsrs	r1, r3, #3
 8000afe:	460b      	mov	r3, r1
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	3330      	adds	r3, #48	; 0x30
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <_Z8fillTextv+0x2f8>)
 8000b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  text4[38] = crb.subr1%10 + 48;
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000b16:	799a      	ldrb	r2, [r3, #6]
 8000b18:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b1e:	08d9      	lsrs	r1, r3, #3
 8000b20:	460b      	mov	r3, r1
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	3330      	adds	r3, #48	; 0x30
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <_Z8fillTextv+0x2f8>)
 8000b32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  text5[36] = crb.subr2/100 + 48;
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000b38:	79db      	ldrb	r3, [r3, #7]
 8000b3a:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <_Z8fillTextv+0x2dc>)
 8000b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b40:	095b      	lsrs	r3, r3, #5
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3330      	adds	r3, #48	; 0x30
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <_Z8fillTextv+0x2fc>)
 8000b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  text5[37] = (crb.subr2/10)%10 + 48;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000b50:	79db      	ldrb	r3, [r3, #7]
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b62:	08d9      	lsrs	r1, r3, #3
 8000b64:	460b      	mov	r3, r1
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	440b      	add	r3, r1
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	3330      	adds	r3, #48	; 0x30
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <_Z8fillTextv+0x2fc>)
 8000b76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  text5[38] = crb.subr2%10 + 48;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000b7c:	79da      	ldrb	r2, [r3, #7]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_Z8fillTextv+0x2e4>)
 8000b80:	fba3 1302 	umull	r1, r3, r3, r2
 8000b84:	08d9      	lsrs	r1, r3, #3
 8000b86:	460b      	mov	r3, r1
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3330      	adds	r3, #48	; 0x30
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_Z8fillTextv+0x2fc>)
 8000b98:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  text6[36] = crb.subr3/100 + 48;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <_Z8fillTextv+0x2d8>)
 8000b9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <_Z8fillTextv+0x2dc>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3330      	adds	r3, #48	; 0x30
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <_Z8fillTextv+0x300>)
 8000bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000bb4:	e016      	b.n	8000be4 <_Z8fillTextv+0x304>
 8000bb6:	bf00      	nop
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	51eb851f 	.word	0x51eb851f
 8000bc0:	200000c0 	.word	0x200000c0
 8000bc4:	cccccccd 	.word	0xcccccccd
 8000bc8:	200000fc 	.word	0x200000fc
 8000bcc:	20000120 	.word	0x20000120
 8000bd0:	20000144 	.word	0x20000144
 8000bd4:	20000168 	.word	0x20000168
 8000bd8:	20000194 	.word	0x20000194
 8000bdc:	200001c0 	.word	0x200001c0
 8000be0:	200001ec 	.word	0x200001ec
	  text6[37] = (crb.subr3/10)%10 + 48;
 8000be4:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000be6:	7a1b      	ldrb	r3, [r3, #8]
 8000be8:	4a4d      	ldr	r2, [pc, #308]	; (8000d20 <_Z8fillTextv+0x440>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	08db      	lsrs	r3, r3, #3
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <_Z8fillTextv+0x440>)
 8000bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8000bf8:	08d9      	lsrs	r1, r3, #3
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	3330      	adds	r3, #48	; 0x30
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <_Z8fillTextv+0x444>)
 8000c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  text6[38] = crb.subr3%10 + 48;
 8000c10:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000c12:	7a1a      	ldrb	r2, [r3, #8]
 8000c14:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <_Z8fillTextv+0x440>)
 8000c16:	fba3 1302 	umull	r1, r3, r3, r2
 8000c1a:	08d9      	lsrs	r1, r3, #3
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	3330      	adds	r3, #48	; 0x30
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <_Z8fillTextv+0x444>)
 8000c2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	  text7[30] = crb.shar0 / 16;
 8000c32:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	091b      	lsrs	r3, r3, #4
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <_Z8fillTextv+0x448>)
 8000c3c:	779a      	strb	r2, [r3, #30]
	  int2letter(text7[30]);
 8000c3e:	483b      	ldr	r0, [pc, #236]	; (8000d2c <_Z8fillTextv+0x44c>)
 8000c40:	f7ff fe02 	bl	8000848 <_Z10int2letterRc>
	  text7[31] = crb.shar0 % 16;
 8000c44:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000c46:	7a5b      	ldrb	r3, [r3, #9]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <_Z8fillTextv+0x448>)
 8000c50:	77da      	strb	r2, [r3, #31]
	  int2letter(text7[31]);
 8000c52:	4837      	ldr	r0, [pc, #220]	; (8000d30 <_Z8fillTextv+0x450>)
 8000c54:	f7ff fdf8 	bl	8000848 <_Z10int2letterRc>

	  text8[30] = crb.shar1 / 16;
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000c5a:	7a9b      	ldrb	r3, [r3, #10]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <_Z8fillTextv+0x454>)
 8000c62:	779a      	strb	r2, [r3, #30]
	  int2letter(text8[30]);
 8000c64:	4834      	ldr	r0, [pc, #208]	; (8000d38 <_Z8fillTextv+0x458>)
 8000c66:	f7ff fdef 	bl	8000848 <_Z10int2letterRc>
	  text8[31] = crb.shar1 % 16;
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000c6c:	7a9b      	ldrb	r3, [r3, #10]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <_Z8fillTextv+0x454>)
 8000c76:	77da      	strb	r2, [r3, #31]
	  int2letter(text8[31]);
 8000c78:	4830      	ldr	r0, [pc, #192]	; (8000d3c <_Z8fillTextv+0x45c>)
 8000c7a:	f7ff fde5 	bl	8000848 <_Z10int2letterRc>

	  text9[30] = crb.shar2 / 16;
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000c80:	7adb      	ldrb	r3, [r3, #11]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <_Z8fillTextv+0x460>)
 8000c88:	779a      	strb	r2, [r3, #30]
	  int2letter(text9[30]);
 8000c8a:	482e      	ldr	r0, [pc, #184]	; (8000d44 <_Z8fillTextv+0x464>)
 8000c8c:	f7ff fddc 	bl	8000848 <_Z10int2letterRc>
	  text9[31] = crb.shar2 % 16;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000c92:	7adb      	ldrb	r3, [r3, #11]
 8000c94:	f003 030f 	and.w	r3, r3, #15
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <_Z8fillTextv+0x460>)
 8000c9c:	77da      	strb	r2, [r3, #31]
	  int2letter(text9[31]);
 8000c9e:	482a      	ldr	r0, [pc, #168]	; (8000d48 <_Z8fillTextv+0x468>)
 8000ca0:	f7ff fdd2 	bl	8000848 <_Z10int2letterRc>

	  text10[30] = crb.shar3 / 16;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000ca6:	7b1b      	ldrb	r3, [r3, #12]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <_Z8fillTextv+0x46c>)
 8000cae:	779a      	strb	r2, [r3, #30]
	  int2letter(text10[30]);
 8000cb0:	4827      	ldr	r0, [pc, #156]	; (8000d50 <_Z8fillTextv+0x470>)
 8000cb2:	f7ff fdc9 	bl	8000848 <_Z10int2letterRc>
	  text10[31] = crb.shar3 % 16;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000cb8:	7b1b      	ldrb	r3, [r3, #12]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <_Z8fillTextv+0x46c>)
 8000cc2:	77da      	strb	r2, [r3, #31]
	  int2letter(text10[31]);
 8000cc4:	4823      	ldr	r0, [pc, #140]	; (8000d54 <_Z8fillTextv+0x474>)
 8000cc6:	f7ff fdbf 	bl	8000848 <_Z10int2letterRc>

	  text11[30] = crb.shar4 / 16;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000ccc:	7b5b      	ldrb	r3, [r3, #13]
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <_Z8fillTextv+0x478>)
 8000cd4:	779a      	strb	r2, [r3, #30]
	  int2letter(text11[30]);
 8000cd6:	4821      	ldr	r0, [pc, #132]	; (8000d5c <_Z8fillTextv+0x47c>)
 8000cd8:	f7ff fdb6 	bl	8000848 <_Z10int2letterRc>
	  text11[31] = crb.shar4 % 16;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000cde:	7b5b      	ldrb	r3, [r3, #13]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <_Z8fillTextv+0x478>)
 8000ce8:	77da      	strb	r2, [r3, #31]
	  int2letter(text11[31]);
 8000cea:	481d      	ldr	r0, [pc, #116]	; (8000d60 <_Z8fillTextv+0x480>)
 8000cec:	f7ff fdac 	bl	8000848 <_Z10int2letterRc>

	  text12[30] = crb.shar5 / 16;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000cf2:	7b9b      	ldrb	r3, [r3, #14]
 8000cf4:	091b      	lsrs	r3, r3, #4
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <_Z8fillTextv+0x484>)
 8000cfa:	779a      	strb	r2, [r3, #30]
	  int2letter(text12[30]);
 8000cfc:	481a      	ldr	r0, [pc, #104]	; (8000d68 <_Z8fillTextv+0x488>)
 8000cfe:	f7ff fda3 	bl	8000848 <_Z10int2letterRc>
	  text12[31] = crb.shar5 % 16;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <_Z8fillTextv+0x43c>)
 8000d04:	7b9b      	ldrb	r3, [r3, #14]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_Z8fillTextv+0x484>)
 8000d0e:	77da      	strb	r2, [r3, #31]
	  int2letter(text12[31]);
 8000d10:	4816      	ldr	r0, [pc, #88]	; (8000d6c <_Z8fillTextv+0x48c>)
 8000d12:	f7ff fd99 	bl	8000848 <_Z10int2letterRc>
	  return;
 8000d16:	bf00      	nop
}
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	cccccccd 	.word	0xcccccccd
 8000d24:	200001ec 	.word	0x200001ec
 8000d28:	20000218 	.word	0x20000218
 8000d2c:	20000236 	.word	0x20000236
 8000d30:	20000237 	.word	0x20000237
 8000d34:	2000023c 	.word	0x2000023c
 8000d38:	2000025a 	.word	0x2000025a
 8000d3c:	2000025b 	.word	0x2000025b
 8000d40:	20000260 	.word	0x20000260
 8000d44:	2000027e 	.word	0x2000027e
 8000d48:	2000027f 	.word	0x2000027f
 8000d4c:	20000284 	.word	0x20000284
 8000d50:	200002a2 	.word	0x200002a2
 8000d54:	200002a3 	.word	0x200002a3
 8000d58:	200002a8 	.word	0x200002a8
 8000d5c:	200002c6 	.word	0x200002c6
 8000d60:	200002c7 	.word	0x200002c7
 8000d64:	200002cc 	.word	0x200002cc
 8000d68:	200002ea 	.word	0x200002ea
 8000d6c:	200002eb 	.word	0x200002eb

08000d70 <_Z10fillText13v>:

void fillText13()
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	if (receivedDataTelnet[0] > 0 && receivedDataTelnet[0] < 256)
 8000d74:	4b8c      	ldr	r3, [pc, #560]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d036      	beq.n	8000dea <_Z10fillText13v+0x7a>
 8000d7c:	4b8a      	ldr	r3, [pc, #552]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2bff      	cmp	r3, #255	; 0xff
 8000d82:	d832      	bhi.n	8000dea <_Z10fillText13v+0x7a>
	{
		text13[35] = receivedDataTelnet[0] / 100 + 48;
 8000d84:	4b88      	ldr	r3, [pc, #544]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a88      	ldr	r2, [pc, #544]	; (8000fac <_Z10fillText13v+0x23c>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	3330      	adds	r3, #48	; 0x30
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b86      	ldr	r3, [pc, #536]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000d98:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		text13[36] = (receivedDataTelnet[0] / 10) % 10 + 48;
 8000d9c:	4b82      	ldr	r3, [pc, #520]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a84      	ldr	r2, [pc, #528]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	08d9      	lsrs	r1, r3, #3
 8000da8:	4b82      	ldr	r3, [pc, #520]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000daa:	fba3 2301 	umull	r2, r3, r3, r1
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	1aca      	subs	r2, r1, r3
 8000dba:	b2d3      	uxtb	r3, r2
 8000dbc:	3330      	adds	r3, #48	; 0x30
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b7b      	ldr	r3, [pc, #492]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		text13[37] = receivedDataTelnet[0] % 10 + 48;
 8000dc6:	4b78      	ldr	r3, [pc, #480]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	4b7a      	ldr	r3, [pc, #488]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000dcc:	fba3 2301 	umull	r2, r3, r3, r1
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	1aca      	subs	r2, r1, r3
 8000ddc:	b2d3      	uxtb	r3, r2
 8000dde:	3330      	adds	r3, #48	; 0x30
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b73      	ldr	r3, [pc, #460]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000de8:	e00e      	b.n	8000e08 <_Z10fillText13v+0x98>
	}
	else
	{
		text13[35] = '0';
 8000dea:	4b71      	ldr	r3, [pc, #452]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000dec:	2230      	movs	r2, #48	; 0x30
 8000dee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		text13[36] = '0';
 8000df2:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000df4:	2230      	movs	r2, #48	; 0x30
 8000df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		text13[37] = '0';
 8000dfa:	4b6d      	ldr	r3, [pc, #436]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000dfc:	2230      	movs	r2, #48	; 0x30
 8000dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		receivedDataTelnet[0] = 0;
 8000e02:	4b69      	ldr	r3, [pc, #420]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
	}

	if (receivedDataTelnet[1] > 0 && receivedDataTelnet[1] < 256)
 8000e08:	4b67      	ldr	r3, [pc, #412]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d036      	beq.n	8000e7e <_Z10fillText13v+0x10e>
 8000e10:	4b65      	ldr	r3, [pc, #404]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2bff      	cmp	r3, #255	; 0xff
 8000e16:	d832      	bhi.n	8000e7e <_Z10fillText13v+0x10e>
	{
		text13[39] = receivedDataTelnet[1] / 100 + 48;
 8000e18:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a63      	ldr	r2, [pc, #396]	; (8000fac <_Z10fillText13v+0x23c>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3330      	adds	r3, #48	; 0x30
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b61      	ldr	r3, [pc, #388]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000e2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		text13[40] = (receivedDataTelnet[1] / 10) % 10 + 48;
 8000e30:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	4a5f      	ldr	r2, [pc, #380]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	08d9      	lsrs	r1, r3, #3
 8000e3c:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	1aca      	subs	r2, r1, r3
 8000e4e:	b2d3      	uxtb	r3, r2
 8000e50:	3330      	adds	r3, #48	; 0x30
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b56      	ldr	r3, [pc, #344]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		text13[41] = receivedDataTelnet[1] % 10 + 48;
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000e5c:	6859      	ldr	r1, [r3, #4]
 8000e5e:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000e60:	fba3 2301 	umull	r2, r3, r3, r1
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	1aca      	subs	r2, r1, r3
 8000e70:	b2d3      	uxtb	r3, r2
 8000e72:	3330      	adds	r3, #48	; 0x30
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b4e      	ldr	r3, [pc, #312]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000e78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000e7c:	e00e      	b.n	8000e9c <_Z10fillText13v+0x12c>
	}
	else
	{
		text13[39] = '0';
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000e80:	2230      	movs	r2, #48	; 0x30
 8000e82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		text13[40] = '0';
 8000e86:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000e88:	2230      	movs	r2, #48	; 0x30
 8000e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		text13[41] = '0';
 8000e8e:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000e90:	2230      	movs	r2, #48	; 0x30
 8000e92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		receivedDataTelnet[1] = 0;
 8000e96:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
	}

	if (receivedDataTelnet[2] > 0 && receivedDataTelnet[2] < 256)
 8000e9c:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d036      	beq.n	8000f12 <_Z10fillText13v+0x1a2>
 8000ea4:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2bff      	cmp	r3, #255	; 0xff
 8000eaa:	d832      	bhi.n	8000f12 <_Z10fillText13v+0x1a2>
	{
		text13[43] = receivedDataTelnet[2] / 100 + 48;
 8000eac:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	4a3e      	ldr	r2, [pc, #248]	; (8000fac <_Z10fillText13v+0x23c>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3330      	adds	r3, #48	; 0x30
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000ec0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		text13[44] = (receivedDataTelnet[2] / 10) % 10 + 48;
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	08d9      	lsrs	r1, r3, #3
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1aca      	subs	r2, r1, r3
 8000ee2:	b2d3      	uxtb	r3, r2
 8000ee4:	3330      	adds	r3, #48	; 0x30
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000eea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		text13[45] = receivedDataTelnet[2] % 10 + 48;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000ef0:	6899      	ldr	r1, [r3, #8]
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000ef4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	1aca      	subs	r2, r1, r3
 8000f04:	b2d3      	uxtb	r3, r2
 8000f06:	3330      	adds	r3, #48	; 0x30
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000f0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000f10:	e00e      	b.n	8000f30 <_Z10fillText13v+0x1c0>
	}
	else
	{
		text13[43] = '0';
 8000f12:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000f14:	2230      	movs	r2, #48	; 0x30
 8000f16:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		text13[44] = '0';
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000f1c:	2230      	movs	r2, #48	; 0x30
 8000f1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		text13[45] = '0';
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000f24:	2230      	movs	r2, #48	; 0x30
 8000f26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		receivedDataTelnet[2] = 0;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
	}

	if (receivedDataTelnet[3] > 0 && receivedDataTelnet[3] < 256)
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d03f      	beq.n	8000fb8 <_Z10fillText13v+0x248>
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2bff      	cmp	r3, #255	; 0xff
 8000f3e:	d83b      	bhi.n	8000fb8 <_Z10fillText13v+0x248>
	{
		text13[47] = receivedDataTelnet[3] / 100 + 48;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	4a19      	ldr	r2, [pc, #100]	; (8000fac <_Z10fillText13v+0x23c>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	3330      	adds	r3, #48	; 0x30
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000f54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		text13[48] = (receivedDataTelnet[3] / 10) % 10 + 48;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	08d9      	lsrs	r1, r3, #3
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000f66:	fba3 2301 	umull	r2, r3, r3, r1
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	1aca      	subs	r2, r1, r3
 8000f76:	b2d3      	uxtb	r3, r2
 8000f78:	3330      	adds	r3, #48	; 0x30
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000f7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		text13[49] = receivedDataTelnet[3] % 10 + 48;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <_Z10fillText13v+0x238>)
 8000f84:	68d9      	ldr	r1, [r3, #12]
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <_Z10fillText13v+0x244>)
 8000f88:	fba3 2301 	umull	r2, r3, r3, r1
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	1aca      	subs	r2, r1, r3
 8000f98:	b2d3      	uxtb	r3, r2
 8000f9a:	3330      	adds	r3, #48	; 0x30
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <_Z10fillText13v+0x240>)
 8000fa0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000fa4:	e017      	b.n	8000fd6 <_Z10fillText13v+0x266>
 8000fa6:	bf00      	nop
 8000fa8:	20002108 	.word	0x20002108
 8000fac:	51eb851f 	.word	0x51eb851f
 8000fb0:	200002f0 	.word	0x200002f0
 8000fb4:	cccccccd 	.word	0xcccccccd
	}
	else
	{
		text13[47] = '0';
 8000fb8:	4ba6      	ldr	r3, [pc, #664]	; (8001254 <_Z10fillText13v+0x4e4>)
 8000fba:	2230      	movs	r2, #48	; 0x30
 8000fbc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		text13[48] = '0';
 8000fc0:	4ba4      	ldr	r3, [pc, #656]	; (8001254 <_Z10fillText13v+0x4e4>)
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		text13[49] = '0';
 8000fc8:	4ba2      	ldr	r3, [pc, #648]	; (8001254 <_Z10fillText13v+0x4e4>)
 8000fca:	2230      	movs	r2, #48	; 0x30
 8000fcc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		receivedDataTelnet[3] = 0;
 8000fd0:	4ba1      	ldr	r3, [pc, #644]	; (8001258 <_Z10fillText13v+0x4e8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
	}

	if (receivedDataTelnet[4] > 0 && receivedDataTelnet[4] < 256)
 8000fd6:	4ba0      	ldr	r3, [pc, #640]	; (8001258 <_Z10fillText13v+0x4e8>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d036      	beq.n	800104c <_Z10fillText13v+0x2dc>
 8000fde:	4b9e      	ldr	r3, [pc, #632]	; (8001258 <_Z10fillText13v+0x4e8>)
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	2bff      	cmp	r3, #255	; 0xff
 8000fe4:	d832      	bhi.n	800104c <_Z10fillText13v+0x2dc>
	{
		text13[73] = receivedDataTelnet[4] / 100 + 48;
 8000fe6:	4b9c      	ldr	r3, [pc, #624]	; (8001258 <_Z10fillText13v+0x4e8>)
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	4a9c      	ldr	r2, [pc, #624]	; (800125c <_Z10fillText13v+0x4ec>)
 8000fec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff0:	095b      	lsrs	r3, r3, #5
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	3330      	adds	r3, #48	; 0x30
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b96      	ldr	r3, [pc, #600]	; (8001254 <_Z10fillText13v+0x4e4>)
 8000ffa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		text13[74] = (receivedDataTelnet[4] / 10) % 10 + 48;
 8000ffe:	4b96      	ldr	r3, [pc, #600]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	4a97      	ldr	r2, [pc, #604]	; (8001260 <_Z10fillText13v+0x4f0>)
 8001004:	fba2 2303 	umull	r2, r3, r2, r3
 8001008:	08d9      	lsrs	r1, r3, #3
 800100a:	4b95      	ldr	r3, [pc, #596]	; (8001260 <_Z10fillText13v+0x4f0>)
 800100c:	fba3 2301 	umull	r2, r3, r3, r1
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	1aca      	subs	r2, r1, r3
 800101c:	b2d3      	uxtb	r3, r2
 800101e:	3330      	adds	r3, #48	; 0x30
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b8c      	ldr	r3, [pc, #560]	; (8001254 <_Z10fillText13v+0x4e4>)
 8001024:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		text13[75] = receivedDataTelnet[4] % 10 + 48;
 8001028:	4b8b      	ldr	r3, [pc, #556]	; (8001258 <_Z10fillText13v+0x4e8>)
 800102a:	6919      	ldr	r1, [r3, #16]
 800102c:	4b8c      	ldr	r3, [pc, #560]	; (8001260 <_Z10fillText13v+0x4f0>)
 800102e:	fba3 2301 	umull	r2, r3, r3, r1
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	1aca      	subs	r2, r1, r3
 800103e:	b2d3      	uxtb	r3, r2
 8001040:	3330      	adds	r3, #48	; 0x30
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b83      	ldr	r3, [pc, #524]	; (8001254 <_Z10fillText13v+0x4e4>)
 8001046:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800104a:	e00e      	b.n	800106a <_Z10fillText13v+0x2fa>
	}
	else
	{
		text13[77] = '0';
 800104c:	4b81      	ldr	r3, [pc, #516]	; (8001254 <_Z10fillText13v+0x4e4>)
 800104e:	2230      	movs	r2, #48	; 0x30
 8001050:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		text13[78] = '0';
 8001054:	4b7f      	ldr	r3, [pc, #508]	; (8001254 <_Z10fillText13v+0x4e4>)
 8001056:	2230      	movs	r2, #48	; 0x30
 8001058:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		text13[79] = '0';
 800105c:	4b7d      	ldr	r3, [pc, #500]	; (8001254 <_Z10fillText13v+0x4e4>)
 800105e:	2230      	movs	r2, #48	; 0x30
 8001060:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		receivedDataTelnet[4] = 0;
 8001064:	4b7c      	ldr	r3, [pc, #496]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
	}

	if (receivedDataTelnet[5] > 0 && receivedDataTelnet[5] < 256)
 800106a:	4b7b      	ldr	r3, [pc, #492]	; (8001258 <_Z10fillText13v+0x4e8>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d036      	beq.n	80010e0 <_Z10fillText13v+0x370>
 8001072:	4b79      	ldr	r3, [pc, #484]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	2bff      	cmp	r3, #255	; 0xff
 8001078:	d832      	bhi.n	80010e0 <_Z10fillText13v+0x370>
	{
		text13[77] = receivedDataTelnet[5] / 100 + 48;
 800107a:	4b77      	ldr	r3, [pc, #476]	; (8001258 <_Z10fillText13v+0x4e8>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a77      	ldr	r2, [pc, #476]	; (800125c <_Z10fillText13v+0x4ec>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	095b      	lsrs	r3, r3, #5
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3330      	adds	r3, #48	; 0x30
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b71      	ldr	r3, [pc, #452]	; (8001254 <_Z10fillText13v+0x4e4>)
 800108e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		text13[78] = (receivedDataTelnet[5] / 10) % 10 + 48;
 8001092:	4b71      	ldr	r3, [pc, #452]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a72      	ldr	r2, [pc, #456]	; (8001260 <_Z10fillText13v+0x4f0>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	08d9      	lsrs	r1, r3, #3
 800109e:	4b70      	ldr	r3, [pc, #448]	; (8001260 <_Z10fillText13v+0x4f0>)
 80010a0:	fba3 2301 	umull	r2, r3, r3, r1
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	1aca      	subs	r2, r1, r3
 80010b0:	b2d3      	uxtb	r3, r2
 80010b2:	3330      	adds	r3, #48	; 0x30
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <_Z10fillText13v+0x4e4>)
 80010b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		text13[79] = receivedDataTelnet[5] % 10 + 48;
 80010bc:	4b66      	ldr	r3, [pc, #408]	; (8001258 <_Z10fillText13v+0x4e8>)
 80010be:	6959      	ldr	r1, [r3, #20]
 80010c0:	4b67      	ldr	r3, [pc, #412]	; (8001260 <_Z10fillText13v+0x4f0>)
 80010c2:	fba3 2301 	umull	r2, r3, r3, r1
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	1aca      	subs	r2, r1, r3
 80010d2:	b2d3      	uxtb	r3, r2
 80010d4:	3330      	adds	r3, #48	; 0x30
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <_Z10fillText13v+0x4e4>)
 80010da:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80010de:	e00e      	b.n	80010fe <_Z10fillText13v+0x38e>
	}
	else
	{
		text13[77] = '0';
 80010e0:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <_Z10fillText13v+0x4e4>)
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		text13[78] = '0';
 80010e8:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <_Z10fillText13v+0x4e4>)
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		text13[79] = '0';
 80010f0:	4b58      	ldr	r3, [pc, #352]	; (8001254 <_Z10fillText13v+0x4e4>)
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		receivedDataTelnet[5] = 0;
 80010f8:	4b57      	ldr	r3, [pc, #348]	; (8001258 <_Z10fillText13v+0x4e8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
	}

	if (receivedDataTelnet[6] > 0 && receivedDataTelnet[6] < 256)
 80010fe:	4b56      	ldr	r3, [pc, #344]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d036      	beq.n	8001174 <_Z10fillText13v+0x404>
 8001106:	4b54      	ldr	r3, [pc, #336]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2bff      	cmp	r3, #255	; 0xff
 800110c:	d832      	bhi.n	8001174 <_Z10fillText13v+0x404>
	{
		text13[81] = receivedDataTelnet[6] / 100 + 48;
 800110e:	4b52      	ldr	r3, [pc, #328]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a52      	ldr	r2, [pc, #328]	; (800125c <_Z10fillText13v+0x4ec>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	095b      	lsrs	r3, r3, #5
 800111a:	b2db      	uxtb	r3, r3
 800111c:	3330      	adds	r3, #48	; 0x30
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <_Z10fillText13v+0x4e4>)
 8001122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		text13[82] = (receivedDataTelnet[6] / 10) % 10 + 48;
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a4d      	ldr	r2, [pc, #308]	; (8001260 <_Z10fillText13v+0x4f0>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	08d9      	lsrs	r1, r3, #3
 8001132:	4b4b      	ldr	r3, [pc, #300]	; (8001260 <_Z10fillText13v+0x4f0>)
 8001134:	fba3 2301 	umull	r2, r3, r3, r1
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	1aca      	subs	r2, r1, r3
 8001144:	b2d3      	uxtb	r3, r2
 8001146:	3330      	adds	r3, #48	; 0x30
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b42      	ldr	r3, [pc, #264]	; (8001254 <_Z10fillText13v+0x4e4>)
 800114c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		text13[83] = receivedDataTelnet[6] % 10 + 48;
 8001150:	4b41      	ldr	r3, [pc, #260]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001152:	6999      	ldr	r1, [r3, #24]
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <_Z10fillText13v+0x4f0>)
 8001156:	fba3 2301 	umull	r2, r3, r3, r1
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	1aca      	subs	r2, r1, r3
 8001166:	b2d3      	uxtb	r3, r2
 8001168:	3330      	adds	r3, #48	; 0x30
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <_Z10fillText13v+0x4e4>)
 800116e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8001172:	e00e      	b.n	8001192 <_Z10fillText13v+0x422>
	}
	else
	{
		text13[81] = '0';
 8001174:	4b37      	ldr	r3, [pc, #220]	; (8001254 <_Z10fillText13v+0x4e4>)
 8001176:	2230      	movs	r2, #48	; 0x30
 8001178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		text13[82] = '0';
 800117c:	4b35      	ldr	r3, [pc, #212]	; (8001254 <_Z10fillText13v+0x4e4>)
 800117e:	2230      	movs	r2, #48	; 0x30
 8001180:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		text13[83] = '0';
 8001184:	4b33      	ldr	r3, [pc, #204]	; (8001254 <_Z10fillText13v+0x4e4>)
 8001186:	2230      	movs	r2, #48	; 0x30
 8001188:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		receivedDataTelnet[6] = 0;
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <_Z10fillText13v+0x4e8>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
	}

	if (receivedDataTelnet[7] > 0 && receivedDataTelnet[7] < 256)
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d036      	beq.n	8001208 <_Z10fillText13v+0x498>
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <_Z10fillText13v+0x4e8>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2bff      	cmp	r3, #255	; 0xff
 80011a0:	d832      	bhi.n	8001208 <_Z10fillText13v+0x498>
	{
		text13[85] = receivedDataTelnet[7] / 100 + 48;
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <_Z10fillText13v+0x4e8>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <_Z10fillText13v+0x4ec>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	095b      	lsrs	r3, r3, #5
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	3330      	adds	r3, #48	; 0x30
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <_Z10fillText13v+0x4e4>)
 80011b6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		text13[86] = (receivedDataTelnet[7] / 10) % 10 + 48;
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <_Z10fillText13v+0x4e8>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a28      	ldr	r2, [pc, #160]	; (8001260 <_Z10fillText13v+0x4f0>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	08d9      	lsrs	r1, r3, #3
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <_Z10fillText13v+0x4f0>)
 80011c8:	fba3 2301 	umull	r2, r3, r3, r1
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	1aca      	subs	r2, r1, r3
 80011d8:	b2d3      	uxtb	r3, r2
 80011da:	3330      	adds	r3, #48	; 0x30
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <_Z10fillText13v+0x4e4>)
 80011e0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		text13[87] = receivedDataTelnet[7] % 10 + 48;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <_Z10fillText13v+0x4e8>)
 80011e6:	69d9      	ldr	r1, [r3, #28]
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <_Z10fillText13v+0x4f0>)
 80011ea:	fba3 2301 	umull	r2, r3, r3, r1
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	1aca      	subs	r2, r1, r3
 80011fa:	b2d3      	uxtb	r3, r2
 80011fc:	3330      	adds	r3, #48	; 0x30
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <_Z10fillText13v+0x4e4>)
 8001202:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001206:	e00e      	b.n	8001226 <_Z10fillText13v+0x4b6>
	}
	else
	{
		text13[85] = '0';
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <_Z10fillText13v+0x4e4>)
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		text13[86] = '0';
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <_Z10fillText13v+0x4e4>)
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		text13[87] = '0';
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <_Z10fillText13v+0x4e4>)
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		receivedDataTelnet[7] = 0;
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <_Z10fillText13v+0x4e8>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
	}

	if ((receivedMACTelnet[0] >= '0' && receivedMACTelnet[0] <= '9') || (receivedMACTelnet[0] >= 'A' && receivedMACTelnet[0] <= 'F'))
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <_Z10fillText13v+0x4f4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b2f      	cmp	r3, #47	; 0x2f
 800122c:	d903      	bls.n	8001236 <_Z10fillText13v+0x4c6>
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <_Z10fillText13v+0x4f4>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b39      	cmp	r3, #57	; 0x39
 8001234:	d907      	bls.n	8001246 <_Z10fillText13v+0x4d6>
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <_Z10fillText13v+0x4f4>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b40      	cmp	r3, #64	; 0x40
 800123c:	d914      	bls.n	8001268 <_Z10fillText13v+0x4f8>
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <_Z10fillText13v+0x4f4>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b46      	cmp	r3, #70	; 0x46
 8001244:	d810      	bhi.n	8001268 <_Z10fillText13v+0x4f8>
	{
		text13[102] = receivedMACTelnet[0];
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <_Z10fillText13v+0x4f4>)
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	4b02      	ldr	r3, [pc, #8]	; (8001254 <_Z10fillText13v+0x4e4>)
 800124c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8001250:	e011      	b.n	8001276 <_Z10fillText13v+0x506>
 8001252:	bf00      	nop
 8001254:	200002f0 	.word	0x200002f0
 8001258:	20002108 	.word	0x20002108
 800125c:	51eb851f 	.word	0x51eb851f
 8001260:	cccccccd 	.word	0xcccccccd
 8001264:	20002148 	.word	0x20002148
	}
	else
	{
		text13[102] = '0';
 8001268:	4b82      	ldr	r3, [pc, #520]	; (8001474 <_Z10fillText13v+0x704>)
 800126a:	2230      	movs	r2, #48	; 0x30
 800126c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		receivedMACTelnet[0] = '0';
 8001270:	4b81      	ldr	r3, [pc, #516]	; (8001478 <_Z10fillText13v+0x708>)
 8001272:	2230      	movs	r2, #48	; 0x30
 8001274:	701a      	strb	r2, [r3, #0]
	}
	if ((receivedMACTelnet[1] >= '0' && receivedMACTelnet[1] <= '9') || (receivedMACTelnet[1] >= 'A' && receivedMACTelnet[1] <= 'F'))
 8001276:	4b80      	ldr	r3, [pc, #512]	; (8001478 <_Z10fillText13v+0x708>)
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	2b2f      	cmp	r3, #47	; 0x2f
 800127c:	d903      	bls.n	8001286 <_Z10fillText13v+0x516>
 800127e:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <_Z10fillText13v+0x708>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	2b39      	cmp	r3, #57	; 0x39
 8001284:	d907      	bls.n	8001296 <_Z10fillText13v+0x526>
 8001286:	4b7c      	ldr	r3, [pc, #496]	; (8001478 <_Z10fillText13v+0x708>)
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	2b40      	cmp	r3, #64	; 0x40
 800128c:	d909      	bls.n	80012a2 <_Z10fillText13v+0x532>
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <_Z10fillText13v+0x708>)
 8001290:	785b      	ldrb	r3, [r3, #1]
 8001292:	2b46      	cmp	r3, #70	; 0x46
 8001294:	d805      	bhi.n	80012a2 <_Z10fillText13v+0x532>
	{
		text13[103] = receivedMACTelnet[1];
 8001296:	4b78      	ldr	r3, [pc, #480]	; (8001478 <_Z10fillText13v+0x708>)
 8001298:	785a      	ldrb	r2, [r3, #1]
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <_Z10fillText13v+0x704>)
 800129c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80012a0:	e006      	b.n	80012b0 <_Z10fillText13v+0x540>
	}
	else
	{
		text13[103] = '0';
 80012a2:	4b74      	ldr	r3, [pc, #464]	; (8001474 <_Z10fillText13v+0x704>)
 80012a4:	2230      	movs	r2, #48	; 0x30
 80012a6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		receivedMACTelnet[1] = '0';
 80012aa:	4b73      	ldr	r3, [pc, #460]	; (8001478 <_Z10fillText13v+0x708>)
 80012ac:	2230      	movs	r2, #48	; 0x30
 80012ae:	705a      	strb	r2, [r3, #1]
	}

	if ((receivedMACTelnet[2] >= '0' && receivedMACTelnet[2] <= '9') || (receivedMACTelnet[2] >= 'A' && receivedMACTelnet[2] <= 'F'))
 80012b0:	4b71      	ldr	r3, [pc, #452]	; (8001478 <_Z10fillText13v+0x708>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	2b2f      	cmp	r3, #47	; 0x2f
 80012b6:	d903      	bls.n	80012c0 <_Z10fillText13v+0x550>
 80012b8:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <_Z10fillText13v+0x708>)
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	2b39      	cmp	r3, #57	; 0x39
 80012be:	d907      	bls.n	80012d0 <_Z10fillText13v+0x560>
 80012c0:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <_Z10fillText13v+0x708>)
 80012c2:	789b      	ldrb	r3, [r3, #2]
 80012c4:	2b40      	cmp	r3, #64	; 0x40
 80012c6:	d909      	bls.n	80012dc <_Z10fillText13v+0x56c>
 80012c8:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <_Z10fillText13v+0x708>)
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	2b46      	cmp	r3, #70	; 0x46
 80012ce:	d805      	bhi.n	80012dc <_Z10fillText13v+0x56c>
	{
		text13[105] = receivedMACTelnet[2];
 80012d0:	4b69      	ldr	r3, [pc, #420]	; (8001478 <_Z10fillText13v+0x708>)
 80012d2:	789a      	ldrb	r2, [r3, #2]
 80012d4:	4b67      	ldr	r3, [pc, #412]	; (8001474 <_Z10fillText13v+0x704>)
 80012d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80012da:	e006      	b.n	80012ea <_Z10fillText13v+0x57a>
	}
	else
	{
		text13[105] = '0';
 80012dc:	4b65      	ldr	r3, [pc, #404]	; (8001474 <_Z10fillText13v+0x704>)
 80012de:	2230      	movs	r2, #48	; 0x30
 80012e0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		receivedMACTelnet[2] = '0';
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <_Z10fillText13v+0x708>)
 80012e6:	2230      	movs	r2, #48	; 0x30
 80012e8:	709a      	strb	r2, [r3, #2]
	}
	if ((receivedMACTelnet[3] >= '0' && receivedMACTelnet[3] <= '9') || (receivedMACTelnet[3] >= 'A' && receivedMACTelnet[3] <= 'F'))
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <_Z10fillText13v+0x708>)
 80012ec:	78db      	ldrb	r3, [r3, #3]
 80012ee:	2b2f      	cmp	r3, #47	; 0x2f
 80012f0:	d903      	bls.n	80012fa <_Z10fillText13v+0x58a>
 80012f2:	4b61      	ldr	r3, [pc, #388]	; (8001478 <_Z10fillText13v+0x708>)
 80012f4:	78db      	ldrb	r3, [r3, #3]
 80012f6:	2b39      	cmp	r3, #57	; 0x39
 80012f8:	d907      	bls.n	800130a <_Z10fillText13v+0x59a>
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <_Z10fillText13v+0x708>)
 80012fc:	78db      	ldrb	r3, [r3, #3]
 80012fe:	2b40      	cmp	r3, #64	; 0x40
 8001300:	d909      	bls.n	8001316 <_Z10fillText13v+0x5a6>
 8001302:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <_Z10fillText13v+0x708>)
 8001304:	78db      	ldrb	r3, [r3, #3]
 8001306:	2b46      	cmp	r3, #70	; 0x46
 8001308:	d805      	bhi.n	8001316 <_Z10fillText13v+0x5a6>
	{
		text13[106] = receivedMACTelnet[3];
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <_Z10fillText13v+0x708>)
 800130c:	78da      	ldrb	r2, [r3, #3]
 800130e:	4b59      	ldr	r3, [pc, #356]	; (8001474 <_Z10fillText13v+0x704>)
 8001310:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001314:	e006      	b.n	8001324 <_Z10fillText13v+0x5b4>
	}
	else
	{
		text13[106] = '0';
 8001316:	4b57      	ldr	r3, [pc, #348]	; (8001474 <_Z10fillText13v+0x704>)
 8001318:	2230      	movs	r2, #48	; 0x30
 800131a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		receivedMACTelnet[3] = '0';
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <_Z10fillText13v+0x708>)
 8001320:	2230      	movs	r2, #48	; 0x30
 8001322:	70da      	strb	r2, [r3, #3]
	}

	if ((receivedMACTelnet[4] >= '0' && receivedMACTelnet[4] <= '9') || (receivedMACTelnet[4] >= 'A' && receivedMACTelnet[4] <= 'F'))
 8001324:	4b54      	ldr	r3, [pc, #336]	; (8001478 <_Z10fillText13v+0x708>)
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	2b2f      	cmp	r3, #47	; 0x2f
 800132a:	d903      	bls.n	8001334 <_Z10fillText13v+0x5c4>
 800132c:	4b52      	ldr	r3, [pc, #328]	; (8001478 <_Z10fillText13v+0x708>)
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	2b39      	cmp	r3, #57	; 0x39
 8001332:	d907      	bls.n	8001344 <_Z10fillText13v+0x5d4>
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <_Z10fillText13v+0x708>)
 8001336:	791b      	ldrb	r3, [r3, #4]
 8001338:	2b40      	cmp	r3, #64	; 0x40
 800133a:	d909      	bls.n	8001350 <_Z10fillText13v+0x5e0>
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <_Z10fillText13v+0x708>)
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	2b46      	cmp	r3, #70	; 0x46
 8001342:	d805      	bhi.n	8001350 <_Z10fillText13v+0x5e0>
	{
		text13[108] = receivedMACTelnet[4];
 8001344:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <_Z10fillText13v+0x708>)
 8001346:	791a      	ldrb	r2, [r3, #4]
 8001348:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <_Z10fillText13v+0x704>)
 800134a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800134e:	e006      	b.n	800135e <_Z10fillText13v+0x5ee>
	}
	else
	{
		text13[108] = '0';
 8001350:	4b48      	ldr	r3, [pc, #288]	; (8001474 <_Z10fillText13v+0x704>)
 8001352:	2230      	movs	r2, #48	; 0x30
 8001354:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		receivedMACTelnet[4] = '0';
 8001358:	4b47      	ldr	r3, [pc, #284]	; (8001478 <_Z10fillText13v+0x708>)
 800135a:	2230      	movs	r2, #48	; 0x30
 800135c:	711a      	strb	r2, [r3, #4]
	}
	if ((receivedMACTelnet[5] >= '0' && receivedMACTelnet[5] <= '9') || (receivedMACTelnet[5] >= 'A' && receivedMACTelnet[5] <= 'F'))
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <_Z10fillText13v+0x708>)
 8001360:	795b      	ldrb	r3, [r3, #5]
 8001362:	2b2f      	cmp	r3, #47	; 0x2f
 8001364:	d903      	bls.n	800136e <_Z10fillText13v+0x5fe>
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <_Z10fillText13v+0x708>)
 8001368:	795b      	ldrb	r3, [r3, #5]
 800136a:	2b39      	cmp	r3, #57	; 0x39
 800136c:	d907      	bls.n	800137e <_Z10fillText13v+0x60e>
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <_Z10fillText13v+0x708>)
 8001370:	795b      	ldrb	r3, [r3, #5]
 8001372:	2b40      	cmp	r3, #64	; 0x40
 8001374:	d909      	bls.n	800138a <_Z10fillText13v+0x61a>
 8001376:	4b40      	ldr	r3, [pc, #256]	; (8001478 <_Z10fillText13v+0x708>)
 8001378:	795b      	ldrb	r3, [r3, #5]
 800137a:	2b46      	cmp	r3, #70	; 0x46
 800137c:	d805      	bhi.n	800138a <_Z10fillText13v+0x61a>
	{
		text13[109] = receivedMACTelnet[5];
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <_Z10fillText13v+0x708>)
 8001380:	795a      	ldrb	r2, [r3, #5]
 8001382:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <_Z10fillText13v+0x704>)
 8001384:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8001388:	e006      	b.n	8001398 <_Z10fillText13v+0x628>
	}
	else
	{
		text13[109] = '0';
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <_Z10fillText13v+0x704>)
 800138c:	2230      	movs	r2, #48	; 0x30
 800138e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		receivedMACTelnet[5] = '0';
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <_Z10fillText13v+0x708>)
 8001394:	2230      	movs	r2, #48	; 0x30
 8001396:	715a      	strb	r2, [r3, #5]
	}

	if ((receivedMACTelnet[6] >= '0' && receivedMACTelnet[6] <= '9') || (receivedMACTelnet[6] >= 'A' && receivedMACTelnet[6] <= 'F'))
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <_Z10fillText13v+0x708>)
 800139a:	799b      	ldrb	r3, [r3, #6]
 800139c:	2b2f      	cmp	r3, #47	; 0x2f
 800139e:	d903      	bls.n	80013a8 <_Z10fillText13v+0x638>
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <_Z10fillText13v+0x708>)
 80013a2:	799b      	ldrb	r3, [r3, #6]
 80013a4:	2b39      	cmp	r3, #57	; 0x39
 80013a6:	d907      	bls.n	80013b8 <_Z10fillText13v+0x648>
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <_Z10fillText13v+0x708>)
 80013aa:	799b      	ldrb	r3, [r3, #6]
 80013ac:	2b40      	cmp	r3, #64	; 0x40
 80013ae:	d909      	bls.n	80013c4 <_Z10fillText13v+0x654>
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <_Z10fillText13v+0x708>)
 80013b2:	799b      	ldrb	r3, [r3, #6]
 80013b4:	2b46      	cmp	r3, #70	; 0x46
 80013b6:	d805      	bhi.n	80013c4 <_Z10fillText13v+0x654>
	{
		text13[111] = receivedMACTelnet[6];
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <_Z10fillText13v+0x708>)
 80013ba:	799a      	ldrb	r2, [r3, #6]
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <_Z10fillText13v+0x704>)
 80013be:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 80013c2:	e006      	b.n	80013d2 <_Z10fillText13v+0x662>
	}
	else
	{
		text13[111] = '0';
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <_Z10fillText13v+0x704>)
 80013c6:	2230      	movs	r2, #48	; 0x30
 80013c8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
		receivedMACTelnet[6] = '0';
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <_Z10fillText13v+0x708>)
 80013ce:	2230      	movs	r2, #48	; 0x30
 80013d0:	719a      	strb	r2, [r3, #6]
	}
	if ((receivedMACTelnet[7] >= '0' && receivedMACTelnet[7] <= '9') || (receivedMACTelnet[7] >= 'A' && receivedMACTelnet[7] <= 'F'))
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <_Z10fillText13v+0x708>)
 80013d4:	79db      	ldrb	r3, [r3, #7]
 80013d6:	2b2f      	cmp	r3, #47	; 0x2f
 80013d8:	d903      	bls.n	80013e2 <_Z10fillText13v+0x672>
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <_Z10fillText13v+0x708>)
 80013dc:	79db      	ldrb	r3, [r3, #7]
 80013de:	2b39      	cmp	r3, #57	; 0x39
 80013e0:	d907      	bls.n	80013f2 <_Z10fillText13v+0x682>
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <_Z10fillText13v+0x708>)
 80013e4:	79db      	ldrb	r3, [r3, #7]
 80013e6:	2b40      	cmp	r3, #64	; 0x40
 80013e8:	d909      	bls.n	80013fe <_Z10fillText13v+0x68e>
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <_Z10fillText13v+0x708>)
 80013ec:	79db      	ldrb	r3, [r3, #7]
 80013ee:	2b46      	cmp	r3, #70	; 0x46
 80013f0:	d805      	bhi.n	80013fe <_Z10fillText13v+0x68e>
	{
		text13[112] = receivedMACTelnet[7];
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <_Z10fillText13v+0x708>)
 80013f4:	79da      	ldrb	r2, [r3, #7]
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <_Z10fillText13v+0x704>)
 80013f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80013fc:	e006      	b.n	800140c <_Z10fillText13v+0x69c>
	}
	else
	{
		text13[112] = '0';
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <_Z10fillText13v+0x704>)
 8001400:	2230      	movs	r2, #48	; 0x30
 8001402:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		receivedMACTelnet[7] = '0';
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <_Z10fillText13v+0x708>)
 8001408:	2230      	movs	r2, #48	; 0x30
 800140a:	71da      	strb	r2, [r3, #7]
	}

	if ((receivedMACTelnet[8] >= '0' && receivedMACTelnet[8] <= '9') || (receivedMACTelnet[8] >= 'A' && receivedMACTelnet[8] <= 'F'))
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <_Z10fillText13v+0x708>)
 800140e:	7a1b      	ldrb	r3, [r3, #8]
 8001410:	2b2f      	cmp	r3, #47	; 0x2f
 8001412:	d903      	bls.n	800141c <_Z10fillText13v+0x6ac>
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <_Z10fillText13v+0x708>)
 8001416:	7a1b      	ldrb	r3, [r3, #8]
 8001418:	2b39      	cmp	r3, #57	; 0x39
 800141a:	d907      	bls.n	800142c <_Z10fillText13v+0x6bc>
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <_Z10fillText13v+0x708>)
 800141e:	7a1b      	ldrb	r3, [r3, #8]
 8001420:	2b40      	cmp	r3, #64	; 0x40
 8001422:	d909      	bls.n	8001438 <_Z10fillText13v+0x6c8>
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <_Z10fillText13v+0x708>)
 8001426:	7a1b      	ldrb	r3, [r3, #8]
 8001428:	2b46      	cmp	r3, #70	; 0x46
 800142a:	d805      	bhi.n	8001438 <_Z10fillText13v+0x6c8>
	{
		text13[114] = receivedMACTelnet[8];
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <_Z10fillText13v+0x708>)
 800142e:	7a1a      	ldrb	r2, [r3, #8]
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_Z10fillText13v+0x704>)
 8001432:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8001436:	e006      	b.n	8001446 <_Z10fillText13v+0x6d6>
	}
	else
	{
		text13[114] = '0';
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <_Z10fillText13v+0x704>)
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		receivedMACTelnet[8] = '0';
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <_Z10fillText13v+0x708>)
 8001442:	2230      	movs	r2, #48	; 0x30
 8001444:	721a      	strb	r2, [r3, #8]
	}
	if ((receivedMACTelnet[9] >= '0' && receivedMACTelnet[9] <= '9') || (receivedMACTelnet[9] >= 'A' && receivedMACTelnet[9] <= 'F'))
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <_Z10fillText13v+0x708>)
 8001448:	7a5b      	ldrb	r3, [r3, #9]
 800144a:	2b2f      	cmp	r3, #47	; 0x2f
 800144c:	d903      	bls.n	8001456 <_Z10fillText13v+0x6e6>
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <_Z10fillText13v+0x708>)
 8001450:	7a5b      	ldrb	r3, [r3, #9]
 8001452:	2b39      	cmp	r3, #57	; 0x39
 8001454:	d907      	bls.n	8001466 <_Z10fillText13v+0x6f6>
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_Z10fillText13v+0x708>)
 8001458:	7a5b      	ldrb	r3, [r3, #9]
 800145a:	2b40      	cmp	r3, #64	; 0x40
 800145c:	d90e      	bls.n	800147c <_Z10fillText13v+0x70c>
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <_Z10fillText13v+0x708>)
 8001460:	7a5b      	ldrb	r3, [r3, #9]
 8001462:	2b46      	cmp	r3, #70	; 0x46
 8001464:	d80a      	bhi.n	800147c <_Z10fillText13v+0x70c>
	{
		text13[115] = receivedMACTelnet[9];
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <_Z10fillText13v+0x708>)
 8001468:	7a5a      	ldrb	r2, [r3, #9]
 800146a:	4b02      	ldr	r3, [pc, #8]	; (8001474 <_Z10fillText13v+0x704>)
 800146c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8001470:	e00b      	b.n	800148a <_Z10fillText13v+0x71a>
 8001472:	bf00      	nop
 8001474:	200002f0 	.word	0x200002f0
 8001478:	20002148 	.word	0x20002148
	}
	else
	{
		text13[115] = '0';
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <_Z10fillText13v+0x798>)
 800147e:	2230      	movs	r2, #48	; 0x30
 8001480:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		receivedMACTelnet[9] = '0';
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <_Z10fillText13v+0x79c>)
 8001486:	2230      	movs	r2, #48	; 0x30
 8001488:	725a      	strb	r2, [r3, #9]
	}

	if ((receivedMACTelnet[10] >= '0' && receivedMACTelnet[10] <= '9') || (receivedMACTelnet[10] >= 'A' && receivedMACTelnet[10] <= 'F'))
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <_Z10fillText13v+0x79c>)
 800148c:	7a9b      	ldrb	r3, [r3, #10]
 800148e:	2b2f      	cmp	r3, #47	; 0x2f
 8001490:	d903      	bls.n	800149a <_Z10fillText13v+0x72a>
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <_Z10fillText13v+0x79c>)
 8001494:	7a9b      	ldrb	r3, [r3, #10]
 8001496:	2b39      	cmp	r3, #57	; 0x39
 8001498:	d907      	bls.n	80014aa <_Z10fillText13v+0x73a>
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <_Z10fillText13v+0x79c>)
 800149c:	7a9b      	ldrb	r3, [r3, #10]
 800149e:	2b40      	cmp	r3, #64	; 0x40
 80014a0:	d909      	bls.n	80014b6 <_Z10fillText13v+0x746>
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <_Z10fillText13v+0x79c>)
 80014a4:	7a9b      	ldrb	r3, [r3, #10]
 80014a6:	2b46      	cmp	r3, #70	; 0x46
 80014a8:	d805      	bhi.n	80014b6 <_Z10fillText13v+0x746>
	{
		text13[117] = receivedMACTelnet[10];
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <_Z10fillText13v+0x79c>)
 80014ac:	7a9a      	ldrb	r2, [r3, #10]
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <_Z10fillText13v+0x798>)
 80014b0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80014b4:	e006      	b.n	80014c4 <_Z10fillText13v+0x754>
	}
	else
	{
		text13[117] = '0';
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <_Z10fillText13v+0x798>)
 80014b8:	2230      	movs	r2, #48	; 0x30
 80014ba:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		receivedMACTelnet[10] = '0';
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <_Z10fillText13v+0x79c>)
 80014c0:	2230      	movs	r2, #48	; 0x30
 80014c2:	729a      	strb	r2, [r3, #10]
	}
	if ((receivedMACTelnet[11] >= '0' && receivedMACTelnet[11] <= '9') || (receivedMACTelnet[11] >= 'A' && receivedMACTelnet[11] <= 'F'))
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_Z10fillText13v+0x79c>)
 80014c6:	7adb      	ldrb	r3, [r3, #11]
 80014c8:	2b2f      	cmp	r3, #47	; 0x2f
 80014ca:	d903      	bls.n	80014d4 <_Z10fillText13v+0x764>
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <_Z10fillText13v+0x79c>)
 80014ce:	7adb      	ldrb	r3, [r3, #11]
 80014d0:	2b39      	cmp	r3, #57	; 0x39
 80014d2:	d907      	bls.n	80014e4 <_Z10fillText13v+0x774>
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <_Z10fillText13v+0x79c>)
 80014d6:	7adb      	ldrb	r3, [r3, #11]
 80014d8:	2b40      	cmp	r3, #64	; 0x40
 80014da:	d909      	bls.n	80014f0 <_Z10fillText13v+0x780>
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <_Z10fillText13v+0x79c>)
 80014de:	7adb      	ldrb	r3, [r3, #11]
 80014e0:	2b46      	cmp	r3, #70	; 0x46
 80014e2:	d805      	bhi.n	80014f0 <_Z10fillText13v+0x780>
	{
		text13[118] = receivedMACTelnet[11];
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <_Z10fillText13v+0x79c>)
 80014e6:	7ada      	ldrb	r2, [r3, #11]
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_Z10fillText13v+0x798>)
 80014ea:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80014ee:	e006      	b.n	80014fe <_Z10fillText13v+0x78e>
	}
	else
	{
		text13[118] = '0';
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <_Z10fillText13v+0x798>)
 80014f2:	2230      	movs	r2, #48	; 0x30
 80014f4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		receivedMACTelnet[11] = '0';
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <_Z10fillText13v+0x79c>)
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	72da      	strb	r2, [r3, #11]
	}
	return;
 80014fe:	bf00      	nop
}
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200002f0 	.word	0x200002f0
 800150c:	20002148 	.word	0x20002148

08001510 <_Z12saveSettingsv>:

void saveSettings()
{
 8001510:	b598      	push	{r3, r4, r7, lr}
 8001512:	af00      	add	r7, sp, #0
	crb.sipr0 = receivedDataTelnet[0];
 8001514:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <_Z12saveSettingsv+0x100>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b3e      	ldr	r3, [pc, #248]	; (8001614 <_Z12saveSettingsv+0x104>)
 800151c:	73da      	strb	r2, [r3, #15]
	crb.sipr1 = receivedDataTelnet[1];
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <_Z12saveSettingsv+0x100>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <_Z12saveSettingsv+0x104>)
 8001526:	741a      	strb	r2, [r3, #16]
	crb.sipr2 = receivedDataTelnet[2];
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <_Z12saveSettingsv+0x100>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <_Z12saveSettingsv+0x104>)
 8001530:	745a      	strb	r2, [r3, #17]
	crb.sipr3 = receivedDataTelnet[3];
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <_Z12saveSettingsv+0x100>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <_Z12saveSettingsv+0x104>)
 800153a:	749a      	strb	r2, [r3, #18]
	crb.subr0 = receivedDataTelnet[4];
 800153c:	4b34      	ldr	r3, [pc, #208]	; (8001610 <_Z12saveSettingsv+0x100>)
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b34      	ldr	r3, [pc, #208]	; (8001614 <_Z12saveSettingsv+0x104>)
 8001544:	715a      	strb	r2, [r3, #5]
	crb.subr1 = receivedDataTelnet[5];
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <_Z12saveSettingsv+0x100>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <_Z12saveSettingsv+0x104>)
 800154e:	719a      	strb	r2, [r3, #6]
	crb.subr2 = receivedDataTelnet[6];
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <_Z12saveSettingsv+0x100>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <_Z12saveSettingsv+0x104>)
 8001558:	71da      	strb	r2, [r3, #7]
	crb.subr3 = receivedDataTelnet[7];
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <_Z12saveSettingsv+0x100>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <_Z12saveSettingsv+0x104>)
 8001562:	721a      	strb	r2, [r3, #8]
	crb.shar0 = letter2int(receivedMACTelnet[0])*16 + letter2int(receivedMACTelnet[1]);
 8001564:	482c      	ldr	r0, [pc, #176]	; (8001618 <_Z12saveSettingsv+0x108>)
 8001566:	f7ff f989 	bl	800087c <_Z10letter2intRKc>
 800156a:	4603      	mov	r3, r0
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	b2dc      	uxtb	r4, r3
 8001570:	482a      	ldr	r0, [pc, #168]	; (800161c <_Z12saveSettingsv+0x10c>)
 8001572:	f7ff f983 	bl	800087c <_Z10letter2intRKc>
 8001576:	4603      	mov	r3, r0
 8001578:	4423      	add	r3, r4
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <_Z12saveSettingsv+0x104>)
 800157e:	725a      	strb	r2, [r3, #9]
	crb.shar1 = letter2int(receivedMACTelnet[2])*16 + letter2int(receivedMACTelnet[3]);
 8001580:	4827      	ldr	r0, [pc, #156]	; (8001620 <_Z12saveSettingsv+0x110>)
 8001582:	f7ff f97b 	bl	800087c <_Z10letter2intRKc>
 8001586:	4603      	mov	r3, r0
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	b2dc      	uxtb	r4, r3
 800158c:	4825      	ldr	r0, [pc, #148]	; (8001624 <_Z12saveSettingsv+0x114>)
 800158e:	f7ff f975 	bl	800087c <_Z10letter2intRKc>
 8001592:	4603      	mov	r3, r0
 8001594:	4423      	add	r3, r4
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <_Z12saveSettingsv+0x104>)
 800159a:	729a      	strb	r2, [r3, #10]
	crb.shar2 = letter2int(receivedMACTelnet[4])*16 + letter2int(receivedMACTelnet[5]);
 800159c:	4822      	ldr	r0, [pc, #136]	; (8001628 <_Z12saveSettingsv+0x118>)
 800159e:	f7ff f96d 	bl	800087c <_Z10letter2intRKc>
 80015a2:	4603      	mov	r3, r0
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	b2dc      	uxtb	r4, r3
 80015a8:	4820      	ldr	r0, [pc, #128]	; (800162c <_Z12saveSettingsv+0x11c>)
 80015aa:	f7ff f967 	bl	800087c <_Z10letter2intRKc>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4423      	add	r3, r4
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <_Z12saveSettingsv+0x104>)
 80015b6:	72da      	strb	r2, [r3, #11]
	crb.shar3 = letter2int(receivedMACTelnet[6])*16 + letter2int(receivedMACTelnet[7]);
 80015b8:	481d      	ldr	r0, [pc, #116]	; (8001630 <_Z12saveSettingsv+0x120>)
 80015ba:	f7ff f95f 	bl	800087c <_Z10letter2intRKc>
 80015be:	4603      	mov	r3, r0
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	b2dc      	uxtb	r4, r3
 80015c4:	481b      	ldr	r0, [pc, #108]	; (8001634 <_Z12saveSettingsv+0x124>)
 80015c6:	f7ff f959 	bl	800087c <_Z10letter2intRKc>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4423      	add	r3, r4
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <_Z12saveSettingsv+0x104>)
 80015d2:	731a      	strb	r2, [r3, #12]
	crb.shar4 = letter2int(receivedMACTelnet[8])*16 + letter2int(receivedMACTelnet[9]);
 80015d4:	4818      	ldr	r0, [pc, #96]	; (8001638 <_Z12saveSettingsv+0x128>)
 80015d6:	f7ff f951 	bl	800087c <_Z10letter2intRKc>
 80015da:	4603      	mov	r3, r0
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	b2dc      	uxtb	r4, r3
 80015e0:	4816      	ldr	r0, [pc, #88]	; (800163c <_Z12saveSettingsv+0x12c>)
 80015e2:	f7ff f94b 	bl	800087c <_Z10letter2intRKc>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4423      	add	r3, r4
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <_Z12saveSettingsv+0x104>)
 80015ee:	735a      	strb	r2, [r3, #13]
	crb.shar5 = letter2int(receivedMACTelnet[10])*16 + letter2int(receivedMACTelnet[11]);
 80015f0:	4813      	ldr	r0, [pc, #76]	; (8001640 <_Z12saveSettingsv+0x130>)
 80015f2:	f7ff f943 	bl	800087c <_Z10letter2intRKc>
 80015f6:	4603      	mov	r3, r0
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	b2dc      	uxtb	r4, r3
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <_Z12saveSettingsv+0x134>)
 80015fe:	f7ff f93d 	bl	800087c <_Z10letter2intRKc>
 8001602:	4603      	mov	r3, r0
 8001604:	4423      	add	r3, r4
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <_Z12saveSettingsv+0x104>)
 800160a:	739a      	strb	r2, [r3, #14]
	return;
 800160c:	bf00      	nop
}
 800160e:	bd98      	pop	{r3, r4, r7, pc}
 8001610:	20002108 	.word	0x20002108
 8001614:	20000000 	.word	0x20000000
 8001618:	20002148 	.word	0x20002148
 800161c:	20002149 	.word	0x20002149
 8001620:	2000214a 	.word	0x2000214a
 8001624:	2000214b 	.word	0x2000214b
 8001628:	2000214c 	.word	0x2000214c
 800162c:	2000214d 	.word	0x2000214d
 8001630:	2000214e 	.word	0x2000214e
 8001634:	2000214f 	.word	0x2000214f
 8001638:	20002150 	.word	0x20002150
 800163c:	20002151 	.word	0x20002151
 8001640:	20002152 	.word	0x20002152
 8001644:	20002153 	.word	0x20002153

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164e:	f001 f881 	bl	8002754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001652:	f000 fa8f 	bl	8001b74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001656:	f000 fc5b 	bl	8001f10 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 800165a:	f000 fadb 	bl	8001c14 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 800165e:	f000 fc29 	bl	8001eb4 <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 8001662:	f000 fbcb 	bl	8001dfc <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8001666:	f000 fb6d 	bl	8001d44 <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 800166a:	f000 fb0f 	bl	8001c8c <_ZL12MX_TIM2_Initv>

  //char temp[4];
  //utoa(crb.sipr0, temp, 4);
  //text0[23] = temp[0];

  fillText();
 800166e:	f7ff f937 	bl	80008e0 <_Z8fillTextv>

  // Включаем чип W5500 через �?бро�?
  ethernetA1.reset();
 8001672:	48ac      	ldr	r0, [pc, #688]	; (8001924 <main+0x2dc>)
 8001674:	f7fe fda8 	bl	80001c8 <_ZN5W55005resetEv>

  // Запи�?ываем "на�?тройки" в блок реги�?тров CRB
  ethernetA1.writeArrayToCRB(&crb.mr, 47, W5500_MR);
 8001678:	2300      	movs	r3, #0
 800167a:	222f      	movs	r2, #47	; 0x2f
 800167c:	49aa      	ldr	r1, [pc, #680]	; (8001928 <main+0x2e0>)
 800167e:	48a9      	ldr	r0, [pc, #676]	; (8001924 <main+0x2dc>)
 8001680:	f7fe fdf4 	bl	800026c <_ZN5W550015writeArrayToCRBEPhhh>

  HAL_Delay(10);
 8001684:	200a      	movs	r0, #10
 8001686:	f001 f8c7 	bl	8002818 <HAL_Delay>

  // У�?танавливаем режим UDP дл�? �?окета 0
  //ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP, W5500_Sn_MR);
 800168a:	2300      	movs	r3, #0
 800168c:	2202      	movs	r2, #2
 800168e:	2108      	movs	r1, #8
 8001690:	48a4      	ldr	r0, [pc, #656]	; (8001924 <main+0x2dc>)
 8001692:	f7fe fea6 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // У�?танавливаем режим TCP дл�? �?окета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 8001696:	2300      	movs	r3, #0
 8001698:	2281      	movs	r2, #129	; 0x81
 800169a:	2128      	movs	r1, #40	; 0x28
 800169c:	48a1      	ldr	r0, [pc, #644]	; (8001924 <main+0x2dc>)
 800169e:	f7fe fea0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // У�?танавливаем режим TCP дл�? �?окета 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 80016a2:	2300      	movs	r3, #0
 80016a4:	2281      	movs	r2, #129	; 0x81
 80016a6:	2148      	movs	r1, #72	; 0x48
 80016a8:	489e      	ldr	r0, [pc, #632]	; (8001924 <main+0x2dc>)
 80016aa:	f7fe fe9a 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке дл�? �?окета 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 80016ae:	232c      	movs	r3, #44	; 0x2c
 80016b0:	22ef      	movs	r2, #239	; 0xef
 80016b2:	2108      	movs	r1, #8
 80016b4:	489b      	ldr	r0, [pc, #620]	; (8001924 <main+0x2dc>)
 80016b6:	f7fe fe94 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке, �?оединении дл�? �?окета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IMR_SEND_OK_OFF & W5500_Sn_IMR_CON_OFF, W5500_Sn_IMR);
 80016ba:	232c      	movs	r3, #44	; 0x2c
 80016bc:	22ee      	movs	r2, #238	; 0xee
 80016be:	2128      	movs	r1, #40	; 0x28
 80016c0:	4898      	ldr	r0, [pc, #608]	; (8001924 <main+0x2dc>)
 80016c2:	f7fe fe8e 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке дл�? �?окета 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 80016c6:	232c      	movs	r3, #44	; 0x2c
 80016c8:	22ef      	movs	r2, #239	; 0xef
 80016ca:	2148      	movs	r1, #72	; 0x48
 80016cc:	4895      	ldr	r0, [pc, #596]	; (8001924 <main+0x2dc>)
 80016ce:	f7fe fe88 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(10);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f001 f8a0 	bl	8002818 <HAL_Delay>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 0
  ethernetA1.writeArrayToSRB(SOCKET0, &srb0.sNport0, 14, W5500_Sn_PORT);
 80016d8:	2304      	movs	r3, #4
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	230e      	movs	r3, #14
 80016de:	4a93      	ldr	r2, [pc, #588]	; (800192c <main+0x2e4>)
 80016e0:	2108      	movs	r1, #8
 80016e2:	4890      	ldr	r0, [pc, #576]	; (8001924 <main+0x2dc>)
 80016e4:	f7fe fef6 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 1
  ethernetA1.writeArrayToSRB(SOCKET1, &srb1.sNport0, 14, W5500_Sn_PORT);
 80016e8:	2304      	movs	r3, #4
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	230e      	movs	r3, #14
 80016ee:	4a90      	ldr	r2, [pc, #576]	; (8001930 <main+0x2e8>)
 80016f0:	2128      	movs	r1, #40	; 0x28
 80016f2:	488c      	ldr	r0, [pc, #560]	; (8001924 <main+0x2dc>)
 80016f4:	f7fe feee 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 2
  ethernetA1.writeArrayToSRB(SOCKET2, &srb2.sNport0, 14, W5500_Sn_PORT);
 80016f8:	2304      	movs	r3, #4
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	230e      	movs	r3, #14
 80016fe:	4a8d      	ldr	r2, [pc, #564]	; (8001934 <main+0x2ec>)
 8001700:	2148      	movs	r1, #72	; 0x48
 8001702:	4888      	ldr	r0, [pc, #544]	; (8001924 <main+0x2dc>)
 8001704:	f7fe fee6 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  HAL_Delay(10);
 8001708:	200a      	movs	r0, #10
 800170a:	f001 f885 	bl	8002818 <HAL_Delay>

  // Открываем �?окет 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 800170e:	2301      	movs	r3, #1
 8001710:	2201      	movs	r2, #1
 8001712:	2108      	movs	r1, #8
 8001714:	4883      	ldr	r0, [pc, #524]	; (8001924 <main+0x2dc>)
 8001716:	f7fe fe64 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем �?окет 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 800171a:	2301      	movs	r3, #1
 800171c:	2201      	movs	r2, #1
 800171e:	2128      	movs	r1, #40	; 0x28
 8001720:	4880      	ldr	r0, [pc, #512]	; (8001924 <main+0x2dc>)
 8001722:	f7fe fe5e 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем �?окет 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8001726:	2301      	movs	r3, #1
 8001728:	2201      	movs	r2, #1
 800172a:	2148      	movs	r1, #72	; 0x48
 800172c:	487d      	ldr	r0, [pc, #500]	; (8001924 <main+0x2dc>)
 800172e:	f7fe fe58 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f001 f870 	bl	8002818 <HAL_Delay>

  // провер�?ем что �?окет 1 проиницилизирован и запу�?каем режим �?ервера
  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 8001738:	2203      	movs	r2, #3
 800173a:	2128      	movs	r1, #40	; 0x28
 800173c:	4879      	ldr	r0, [pc, #484]	; (8001924 <main+0x2dc>)
 800173e:	f7fe fdde 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001742:	4603      	mov	r3, r0
 8001744:	2b13      	cmp	r3, #19
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <main+0x116>
  {
	  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8001752:	2301      	movs	r3, #1
 8001754:	2202      	movs	r2, #2
 8001756:	2128      	movs	r1, #40	; 0x28
 8001758:	4872      	ldr	r0, [pc, #456]	; (8001924 <main+0x2dc>)
 800175a:	f7fe fe42 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
  }

  // провер�?ем что �?окет 2 проиницилизирован и запу�?каем режим �?ервера
  if (ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 800175e:	2203      	movs	r2, #3
 8001760:	2148      	movs	r1, #72	; 0x48
 8001762:	4870      	ldr	r0, [pc, #448]	; (8001924 <main+0x2dc>)
 8001764:	f7fe fdcb 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001768:	4603      	mov	r3, r0
 800176a:	2b13      	cmp	r3, #19
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <main+0x13c>
  {
	  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8001778:	2301      	movs	r3, #1
 800177a:	2202      	movs	r2, #2
 800177c:	2148      	movs	r1, #72	; 0x48
 800177e:	4869      	ldr	r0, [pc, #420]	; (8001924 <main+0x2dc>)
 8001780:	f7fe fe2f 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
  }

  HAL_Delay(1);
 8001784:	2001      	movs	r0, #1
 8001786:	f001 f847 	bl	8002818 <HAL_Delay>

  // Разрешаем прием по UART
  HAL_UART_Receive_IT(&huart1, &receivedByteUART, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	496a      	ldr	r1, [pc, #424]	; (8001938 <main+0x2f0>)
 800178e:	486b      	ldr	r0, [pc, #428]	; (800193c <main+0x2f4>)
 8001790:	f003 f9b1 	bl	8004af6 <HAL_UART_Receive_IT>

  // очищаем флаги прерываний
  CLEAR_BIT(TIM3->SR, TIM_SR_UIF);
 8001794:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <main+0x2f8>)
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	4a69      	ldr	r2, [pc, #420]	; (8001940 <main+0x2f8>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(TIM4->SR, TIM_SR_UIF);
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <main+0x2fc>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a67      	ldr	r2, [pc, #412]	; (8001944 <main+0x2fc>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6113      	str	r3, [r2, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // провер�?ем е�?ть ли данные по UDP
	  if (socket0dataReady)
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <main+0x300>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d022      	beq.n	80017fa <main+0x1b2>
	  {
		  if((HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY) || (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX))
 80017b4:	4861      	ldr	r0, [pc, #388]	; (800193c <main+0x2f4>)
 80017b6:	f003 fb8d 	bl	8004ed4 <HAL_UART_GetState>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d005      	beq.n	80017cc <main+0x184>
 80017c0:	485e      	ldr	r0, [pc, #376]	; (800193c <main+0x2f4>)
 80017c2:	f003 fb87 	bl	8004ed4 <HAL_UART_GetState>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b22      	cmp	r3, #34	; 0x22
 80017ca:	d101      	bne.n	80017d0 <main+0x188>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <main+0x18a>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d011      	beq.n	80017fa <main+0x1b2>
		  {
			  //// изначально было TX
			  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017dc:	485b      	ldr	r0, [pc, #364]	; (800194c <main+0x304>)
 80017de:	f001 fb81 	bl	8002ee4 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, &receiveSocket0data[8], (sizeOfReceiveSocket0data-8));
 80017e2:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <main+0x308>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	3b08      	subs	r3, #8
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	4959      	ldr	r1, [pc, #356]	; (8001954 <main+0x30c>)
 80017ee:	4853      	ldr	r0, [pc, #332]	; (800193c <main+0x2f4>)
 80017f0:	f003 f93d 	bl	8004a6e <HAL_UART_Transmit_IT>

			  socket0dataReady = false;
 80017f4:	4b54      	ldr	r3, [pc, #336]	; (8001948 <main+0x300>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // провер�?ем е�?ть ли данные по TCP
	  if (socket1dataReady)
 80017fa:	4b57      	ldr	r3, [pc, #348]	; (8001958 <main+0x310>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d020      	beq.n	8001844 <main+0x1fc>
	  {
		  if((HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY) || (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX))
 8001802:	484e      	ldr	r0, [pc, #312]	; (800193c <main+0x2f4>)
 8001804:	f003 fb66 	bl	8004ed4 <HAL_UART_GetState>
 8001808:	4603      	mov	r3, r0
 800180a:	2b20      	cmp	r3, #32
 800180c:	d005      	beq.n	800181a <main+0x1d2>
 800180e:	484b      	ldr	r0, [pc, #300]	; (800193c <main+0x2f4>)
 8001810:	f003 fb60 	bl	8004ed4 <HAL_UART_GetState>
 8001814:	4603      	mov	r3, r0
 8001816:	2b22      	cmp	r3, #34	; 0x22
 8001818:	d101      	bne.n	800181e <main+0x1d6>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <main+0x1d8>
 800181e:	2300      	movs	r3, #0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00f      	beq.n	8001844 <main+0x1fc>
		  {
			  //// изначально было TX
			  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182a:	4848      	ldr	r0, [pc, #288]	; (800194c <main+0x304>)
 800182c:	f001 fb5a 	bl	8002ee4 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, receiveSocket1data, sizeOfReceiveSocket1data);
 8001830:	4b4a      	ldr	r3, [pc, #296]	; (800195c <main+0x314>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	494a      	ldr	r1, [pc, #296]	; (8001960 <main+0x318>)
 8001838:	4840      	ldr	r0, [pc, #256]	; (800193c <main+0x2f4>)
 800183a:	f003 f918 	bl	8004a6e <HAL_UART_Transmit_IT>

			  socket1dataReady = false;
 800183e:	4b46      	ldr	r3, [pc, #280]	; (8001958 <main+0x310>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // провер�?ем е�?ть ли данные по Telnet
	  if (socket2dataReady)
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <main+0x31c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8107 	beq.w	8001a5c <main+0x414>
	  {
		  for(int i = 0; i < sizeOfReceiveSocket2data; ++i)
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b45      	ldr	r3, [pc, #276]	; (8001968 <main+0x320>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4293      	cmp	r3, r2
 800185c:	da15      	bge.n	800188a <main+0x242>
		  {
			  if (ptrWriteBufferTelnet <= ptrEndBufferTelnet)
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <main+0x324>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <main+0x328>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d80b      	bhi.n	8001882 <main+0x23a>
			  {
				  *ptrWriteBufferTelnet = receiveSocket2data[i];
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <main+0x324>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4941      	ldr	r1, [pc, #260]	; (8001974 <main+0x32c>)
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	440a      	add	r2, r1
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	701a      	strb	r2, [r3, #0]
				  ++ptrWriteBufferTelnet;
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <main+0x324>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	4a3b      	ldr	r2, [pc, #236]	; (800196c <main+0x324>)
 8001880:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < sizeOfReceiveSocket2data; ++i)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3301      	adds	r3, #1
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	e7e3      	b.n	8001852 <main+0x20a>
			  }
		  }

		  if( *(ptrWriteBufferTelnet - 1) == '\n')
 800188a:	4b38      	ldr	r3, [pc, #224]	; (800196c <main+0x324>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b0a      	cmp	r3, #10
 8001894:	f040 80df 	bne.w	8001a56 <main+0x40e>
		  {
			  if (counter32 < 8)
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <main+0x330>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b07      	cmp	r3, #7
 800189e:	d816      	bhi.n	80018ce <main+0x286>
			  {
				  receivedDataTelnet[counter32] = atoi(ptrReadBufferTelnet);
 80018a0:	4b36      	ldr	r3, [pc, #216]	; (800197c <main+0x334>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fd49 	bl	800533c <atoi>
 80018aa:	4601      	mov	r1, r0
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <main+0x330>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <main+0x338>)
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  ++counter32;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <main+0x330>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <main+0x330>)
 80018c2:	701a      	strb	r2, [r3, #0]
				  ptrReadBufferTelnet = ptrWriteBufferTelnet;
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <main+0x324>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2c      	ldr	r2, [pc, #176]	; (800197c <main+0x334>)
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e0ac      	b.n	8001a28 <main+0x3e0>
			  }
			  else if (counter32 < 14)
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <main+0x330>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b0d      	cmp	r3, #13
 80018d4:	f200 8098 	bhi.w	8001a08 <main+0x3c0>
			  {
				  uint8_t tCounter { 0 };
 80018d8:	2300      	movs	r3, #0
 80018da:	70fb      	strb	r3, [r7, #3]
				  while (ptrReadBufferTelnet != ptrWriteBufferTelnet)
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <main+0x334>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <main+0x324>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f000 8088 	beq.w	80019fa <main+0x3b2>
				  {
					  if (tCounter < 2)
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d87e      	bhi.n	80019ee <main+0x3a6>
					  {
						  if (*ptrReadBufferTelnet >= '0' && *ptrReadBufferTelnet <= '9')
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <main+0x334>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b2f      	cmp	r3, #47	; 0x2f
 80018f8:	d946      	bls.n	8001988 <main+0x340>
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <main+0x334>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b39      	cmp	r3, #57	; 0x39
 8001902:	d841      	bhi.n	8001988 <main+0x340>
						  {
							  receivedMACTelnet[(counter32 - 8) * 2 + tCounter] = *ptrReadBufferTelnet;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <main+0x334>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <main+0x330>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3b08      	subs	r3, #8
 800190e:	0059      	lsls	r1, r3, #1
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	440b      	add	r3, r1
 8001914:	7811      	ldrb	r1, [r2, #0]
 8001916:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <main+0x33c>)
 8001918:	54d1      	strb	r1, [r2, r3]
							  ++tCounter;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	3301      	adds	r3, #1
 800191e:	70fb      	strb	r3, [r7, #3]
 8001920:	e065      	b.n	80019ee <main+0x3a6>
 8001922:	bf00      	nop
 8001924:	20002158 	.word	0x20002158
 8001928:	20000000 	.word	0x20000000
 800192c:	20000034 	.word	0x20000034
 8001930:	20000064 	.word	0x20000064
 8001934:	20000094 	.word	0x20000094
 8001938:	200005d4 	.word	0x200005d4
 800193c:	20000590 	.word	0x20000590
 8001940:	40000400 	.word	0x40000400
 8001944:	40000800 	.word	0x40000800
 8001948:	200007e1 	.word	0x200007e1
 800194c:	40010c00 	.word	0x40010c00
 8001950:	20000fea 	.word	0x20000fea
 8001954:	200007ec 	.word	0x200007ec
 8001958:	20000fec 	.word	0x20000fec
 800195c:	200017f6 	.word	0x200017f6
 8001960:	20000ff0 	.word	0x20000ff0
 8001964:	200017f8 	.word	0x200017f8
 8001968:	20002002 	.word	0x20002002
 800196c:	200003cc 	.word	0x200003cc
 8001970:	200003d0 	.word	0x200003d0
 8001974:	200017fc 	.word	0x200017fc
 8001978:	20002154 	.word	0x20002154
 800197c:	200003c8 	.word	0x200003c8
 8001980:	20002108 	.word	0x20002108
 8001984:	20002148 	.word	0x20002148
						  }
						  else if (*ptrReadBufferTelnet >= 'A' && *ptrReadBufferTelnet <= 'F')
 8001988:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <main+0x4f4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b40      	cmp	r3, #64	; 0x40
 8001990:	d913      	bls.n	80019ba <main+0x372>
 8001992:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <main+0x4f4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b46      	cmp	r3, #70	; 0x46
 800199a:	d80e      	bhi.n	80019ba <main+0x372>
						  {
							  receivedMACTelnet[(counter32 - 8) * 2 + tCounter] = *ptrReadBufferTelnet;
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <main+0x4f4>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <main+0x4f8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	3b08      	subs	r3, #8
 80019a6:	0059      	lsls	r1, r3, #1
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	440b      	add	r3, r1
 80019ac:	7811      	ldrb	r1, [r2, #0]
 80019ae:	4a65      	ldr	r2, [pc, #404]	; (8001b44 <main+0x4fc>)
 80019b0:	54d1      	strb	r1, [r2, r3]
							  ++tCounter;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	3301      	adds	r3, #1
 80019b6:	70fb      	strb	r3, [r7, #3]
 80019b8:	e019      	b.n	80019ee <main+0x3a6>
						  }
						  else if (*ptrReadBufferTelnet >= 'a' && *ptrReadBufferTelnet <= 'f')
 80019ba:	4b60      	ldr	r3, [pc, #384]	; (8001b3c <main+0x4f4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b60      	cmp	r3, #96	; 0x60
 80019c2:	d914      	bls.n	80019ee <main+0x3a6>
 80019c4:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <main+0x4f4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b66      	cmp	r3, #102	; 0x66
 80019cc:	d80f      	bhi.n	80019ee <main+0x3a6>
						  {
							  receivedMACTelnet[(counter32 - 8) * 2 + tCounter] = (*ptrReadBufferTelnet - 32);
 80019ce:	4b5b      	ldr	r3, [pc, #364]	; (8001b3c <main+0x4f4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	4b5a      	ldr	r3, [pc, #360]	; (8001b40 <main+0x4f8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	3b08      	subs	r3, #8
 80019da:	0059      	lsls	r1, r3, #1
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	440b      	add	r3, r1
 80019e0:	3a20      	subs	r2, #32
 80019e2:	b2d1      	uxtb	r1, r2
 80019e4:	4a57      	ldr	r2, [pc, #348]	; (8001b44 <main+0x4fc>)
 80019e6:	54d1      	strb	r1, [r2, r3]
							  ++tCounter;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	3301      	adds	r3, #1
 80019ec:	70fb      	strb	r3, [r7, #3]
						  }
					  }
					  ++ptrReadBufferTelnet;
 80019ee:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <main+0x4f4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	4a51      	ldr	r2, [pc, #324]	; (8001b3c <main+0x4f4>)
 80019f6:	6013      	str	r3, [r2, #0]
				  while (ptrReadBufferTelnet != ptrWriteBufferTelnet)
 80019f8:	e770      	b.n	80018dc <main+0x294>
				  }
				  ++counter32;
 80019fa:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <main+0x4f8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <main+0x4f8>)
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e00f      	b.n	8001a28 <main+0x3e0>
			  }

			  else if (counter32 == 14)
 8001a08:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <main+0x4f8>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b0e      	cmp	r3, #14
 8001a0e:	d10b      	bne.n	8001a28 <main+0x3e0>
			  {
				  if (*ptrReadBufferTelnet == 'Y' || *ptrReadBufferTelnet == 'y')
 8001a10:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <main+0x4f4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b59      	cmp	r3, #89	; 0x59
 8001a18:	d004      	beq.n	8001a24 <main+0x3dc>
 8001a1a:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <main+0x4f4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b79      	cmp	r3, #121	; 0x79
 8001a22:	d101      	bne.n	8001a28 <main+0x3e0>
				  {
					  saveSettings();
 8001a24:	f7ff fd74 	bl	8001510 <_Z12saveSettingsv>
				  {

				  }
			  }

			  if(typedValueCounter == 13)
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <main+0x500>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0d      	cmp	r3, #13
 8001a2e:	d101      	bne.n	8001a34 <main+0x3ec>
			  {
				  fillText13();
 8001a30:	f7ff f99e 	bl	8000d70 <_Z10fillText13v>
			  }
			  ethernetA1.sendString(SOCKET2, arrText[typedValueCounter]);
 8001a34:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <main+0x500>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <main+0x504>)
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	461a      	mov	r2, r3
 8001a42:	2148      	movs	r1, #72	; 0x48
 8001a44:	4842      	ldr	r0, [pc, #264]	; (8001b50 <main+0x508>)
 8001a46:	f7fe febf 	bl	80007c8 <_ZN5W550010sendStringEhPc>
			  ++typedValueCounter;
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <main+0x500>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <main+0x500>)
 8001a54:	701a      	strb	r2, [r3, #0]
		  }
		  socket2dataReady = false;
 8001a56:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <main+0x50c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	  }


	  // провер�?ем е�?ть ли данные по UART
	  if (receivedPacketUARTisReady)
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <main+0x510>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d023      	beq.n	8001aac <main+0x464>
	  {
		  if (needsTransmitUDP)
 8001a64:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <main+0x514>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00d      	beq.n	8001a88 <main+0x440>
		  {
			  // отправл�?ем данные, прин�?тые по UART, по UDP
			  ethernetA1.sendPacket(SOCKET0, copiedReceivedPacketUART, copiedReceivedBytesUARTCounter);
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <main+0x518>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <main+0x51c>)
 8001a74:	2108      	movs	r1, #8
 8001a76:	4836      	ldr	r0, [pc, #216]	; (8001b50 <main+0x508>)
 8001a78:	f7fe fe68 	bl	800074c <_ZN5W550010sendPacketEhPht>

			  // �?бра�?ываем флаги
			  receivedPacketUARTisReady = false;
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <main+0x510>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
			  needsTransmitUDP = false;
 8001a82:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <main+0x514>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
		  }

		  if (needsTransmitTCP)
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <main+0x520>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00d      	beq.n	8001aac <main+0x464>
		  {
			  // отправл�?ем данные, прин�?тые по UART, по UDP
			  ethernetA1.sendPacket(SOCKET1, copiedReceivedPacketUART, copiedReceivedBytesUARTCounter);
 8001a90:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <main+0x518>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <main+0x51c>)
 8001a98:	2128      	movs	r1, #40	; 0x28
 8001a9a:	482d      	ldr	r0, [pc, #180]	; (8001b50 <main+0x508>)
 8001a9c:	f7fe fe56 	bl	800074c <_ZN5W550010sendPacketEhPht>

			  // �?бра�?ываем флаги
			  receivedPacketUARTisReady = false;
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <main+0x510>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
			  needsTransmitTCP = false;
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <main+0x520>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // е�?ли �?оединение по TCP было закрыто, нужно �?нова проинициализировать �?окет и перейти в режим про�?лушки (�?ервера)
	  if (needsOpenTCP)
 8001aac:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <main+0x524>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01e      	beq.n	8001af2 <main+0x4aa>
	  {
		  // Открываем �?окет 1
		  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2128      	movs	r1, #40	; 0x28
 8001aba:	4825      	ldr	r0, [pc, #148]	; (8001b50 <main+0x508>)
 8001abc:	f7fe fc91 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

		  HAL_Delay(1);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f000 fea9 	bl	8002818 <HAL_Delay>

		  // провер�?ем что �?окет 1 проиницилизирован и запу�?каем режим �?ервера
		  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	2128      	movs	r1, #40	; 0x28
 8001aca:	4821      	ldr	r0, [pc, #132]	; (8001b50 <main+0x508>)
 8001acc:	f7fe fc17 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b13      	cmp	r3, #19
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2301      	moveq	r3, #1
 8001ad8:	2300      	movne	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <main+0x4a4>
		  {
			  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	2128      	movs	r1, #40	; 0x28
 8001ae6:	481a      	ldr	r0, [pc, #104]	; (8001b50 <main+0x508>)
 8001ae8:	f7fe fc7b 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
		  }

		  needsOpenTCP = false;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <main+0x524>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
	  }


	  // е�?ли �?оединение по Telnet было закрыто, нужно �?нова проинициализировать �?окет и перейти в режим про�?лушки (�?ервера)
	  if (needsOpenTelnet)
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <main+0x528>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f43f ae58 	beq.w	80017ac <main+0x164>
	  {
		  // Открываем �?окет 2
		  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8001afc:	2301      	movs	r3, #1
 8001afe:	2201      	movs	r2, #1
 8001b00:	2148      	movs	r1, #72	; 0x48
 8001b02:	4813      	ldr	r0, [pc, #76]	; (8001b50 <main+0x508>)
 8001b04:	f7fe fc6d 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

		  HAL_Delay(1);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f000 fe85 	bl	8002818 <HAL_Delay>

		  // провер�?ем что �?окет 2 проиницилизирован и запу�?каем режим �?ервера
		  if (ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 8001b0e:	2203      	movs	r2, #3
 8001b10:	2148      	movs	r1, #72	; 0x48
 8001b12:	480f      	ldr	r0, [pc, #60]	; (8001b50 <main+0x508>)
 8001b14:	f7fe fbf3 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b13      	cmp	r3, #19
 8001b1c:	bf0c      	ite	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2300      	movne	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <main+0x4ec>
		  {
			  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	2148      	movs	r1, #72	; 0x48
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <main+0x508>)
 8001b30:	f7fe fc57 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
		  }

		  needsOpenTelnet = false;
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <main+0x528>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
	  }
*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001b3a:	e637      	b.n	80017ac <main+0x164>
 8001b3c:	200003c8 	.word	0x200003c8
 8001b40:	20002154 	.word	0x20002154
 8001b44:	20002148 	.word	0x20002148
 8001b48:	20002104 	.word	0x20002104
 8001b4c:	20000390 	.word	0x20000390
 8001b50:	20002158 	.word	0x20002158
 8001b54:	200017f8 	.word	0x200017f8
 8001b58:	200006d9 	.word	0x200006d9
 8001b5c:	200007dd 	.word	0x200007dd
 8001b60:	200007dc 	.word	0x200007dc
 8001b64:	200006dc 	.word	0x200006dc
 8001b68:	200007de 	.word	0x200007de
 8001b6c:	200007df 	.word	0x200007df
 8001b70:	200007e0 	.word	0x200007e0

08001b74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b090      	sub	sp, #64	; 0x40
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	2228      	movs	r2, #40	; 0x28
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fc08 	bl	8005398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001bb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 f9c1 	bl	8002f44 <HAL_RCC_OscConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001bd2:	f000 fbbd 	bl	8002350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 fc29 	bl	8003448 <HAL_RCC_ClockConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8001c06:	f000 fba3 	bl	8002350 <Error_Handler>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3740      	adds	r7, #64	; 0x40
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <_ZL12MX_SPI1_Initv+0x74>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c48:	2208      	movs	r2, #8
 8001c4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c60:	220a      	movs	r2, #10
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c64:	4807      	ldr	r0, [pc, #28]	; (8001c84 <_ZL12MX_SPI1_Initv+0x70>)
 8001c66:	f001 fd89 	bl	800377c <HAL_SPI_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001c7a:	f000 fb69 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000460 	.word	0x20000460
 8001c88:	40013000 	.word	0x40013000

08001c8c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001caa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cb2:	2264      	movs	r2, #100	; 0x64
 8001cb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cbe:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001cc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cd0:	481b      	ldr	r0, [pc, #108]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cd2:	f002 fa5f 	bl	8004194 <HAL_TIM_Base_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001ce6:	f000 fb33 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4812      	ldr	r0, [pc, #72]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001cf8:	f002 fc1c 	bl	8004534 <HAL_TIM_ConfigClockSource>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bf14      	ite	ne
 8001d02:	2301      	movne	r3, #1
 8001d04:	2300      	moveq	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001d0c:	f000 fb20 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4808      	ldr	r0, [pc, #32]	; (8001d40 <_ZL12MX_TIM2_Initv+0xb4>)
 8001d1e:	f002 fde9 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001d32:	f000 fb0d 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200004b8 	.word	0x200004b8

08001d44 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d62:	4a25      	ldr	r2, [pc, #148]	; (8001df8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d74:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001d78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d86:	481b      	ldr	r0, [pc, #108]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001d88:	f002 fa04 	bl	8004194 <HAL_TIM_Base_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8001d9c:	f000 fad8 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4619      	mov	r1, r3
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001dae:	f002 fbc1 	bl	8004534 <HAL_TIM_ConfigClockSource>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8001dc2:	f000 fac5 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4808      	ldr	r0, [pc, #32]	; (8001df4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001dd4:	f002 fd8e 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8001de8:	f000 fab2 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000500 	.word	0x20000500
 8001df8:	40000400 	.word	0x40000400

08001dfc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	f107 0308 	add.w	r3, r7, #8
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	463b      	mov	r3, r7
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e1a:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <_ZL12MX_TIM4_Initv+0xb4>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e20:	2203      	movs	r2, #3
 8001e22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e2c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001e30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e3e:	481b      	ldr	r0, [pc, #108]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e40:	f002 f9a8 	bl	8004194 <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001e54:	f000 fa7c 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	4619      	mov	r1, r3
 8001e64:	4811      	ldr	r0, [pc, #68]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e66:	f002 fb65 	bl	8004534 <HAL_TIM_ConfigClockSource>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001e7a:	f000 fa69 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e86:	463b      	mov	r3, r7
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4808      	ldr	r0, [pc, #32]	; (8001eac <_ZL12MX_TIM4_Initv+0xb0>)
 8001e8c:	f002 fd32 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001ea0:	f000 fa56 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000548 	.word	0x20000548
 8001eb0:	40000800 	.word	0x40000800

08001eb4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001eba:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_ZL19MX_USART1_UART_Initv+0x58>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ec0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eea:	4807      	ldr	r0, [pc, #28]	; (8001f08 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001eec:	f002 fd72 	bl	80049d4 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf14      	ite	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	2300      	moveq	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001f00:	f000 fa26 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000590 	.word	0x20000590
 8001f0c:	40013800 	.word	0x40013800

08001f10 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f24:	4b48      	ldr	r3, [pc, #288]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a47      	ldr	r2, [pc, #284]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f2a:	f043 0310 	orr.w	r3, r3, #16
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a41      	ldr	r2, [pc, #260]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f42:	f043 0320 	orr.w	r3, r3, #32
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a35      	ldr	r2, [pc, #212]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f72:	f043 0308 	orr.w	r3, r3, #8
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b33      	ldr	r3, [pc, #204]	; (8002048 <_ZL12MX_GPIO_Initv+0x138>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8001f84:	2201      	movs	r2, #1
 8001f86:	2110      	movs	r1, #16
 8001f88:	4830      	ldr	r0, [pc, #192]	; (800204c <_ZL12MX_GPIO_Initv+0x13c>)
 8001f8a:	f000 ffab 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2120      	movs	r1, #32
 8001f92:	482e      	ldr	r0, [pc, #184]	; (800204c <_ZL12MX_GPIO_Initv+0x13c>)
 8001f94:	f000 ffa6 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_SET);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001f9e:	482c      	ldr	r0, [pc, #176]	; (8002050 <_ZL12MX_GPIO_Initv+0x140>)
 8001fa0:	f000 ffa0 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RSTBUTTON_Pin */
  GPIO_InitStruct.Pin = RSTBUTTON_Pin;
 8001fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RSTBUTTON_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4824      	ldr	r0, [pc, #144]	; (800204c <_ZL12MX_GPIO_Initv+0x13c>)
 8001fba:	f000 fe0f 	bl	8002bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <_ZL12MX_GPIO_Initv+0x144>)
 8001fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4821      	ldr	r0, [pc, #132]	; (8002058 <_ZL12MX_GPIO_Initv+0x148>)
 8001fd2:	f000 fe03 	bl	8002bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 8001fd6:	2330      	movs	r3, #48	; 0x30
 8001fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	4619      	mov	r1, r3
 8001fec:	4817      	ldr	r0, [pc, #92]	; (800204c <_ZL12MX_GPIO_Initv+0x13c>)
 8001fee:	f000 fdf5 	bl	8002bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8001ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ff8:	2311      	movs	r3, #17
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2302      	movs	r3, #2
 8002002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4811      	ldr	r0, [pc, #68]	; (8002050 <_ZL12MX_GPIO_Initv+0x140>)
 800200c:	f000 fde6 	bl	8002bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 8002010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2302      	movs	r3, #2
 8002020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	4619      	mov	r1, r3
 8002028:	4809      	ldr	r0, [pc, #36]	; (8002050 <_ZL12MX_GPIO_Initv+0x140>)
 800202a:	f000 fdd7 	bl	8002bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	200a      	movs	r0, #10
 8002034:	f000 fceb 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002038:	200a      	movs	r0, #10
 800203a:	f000 fd04 	bl	8002a46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40011000 	.word	0x40011000
 8002050:	40010c00 	.word	0x40010c00
 8002054:	10210000 	.word	0x10210000
 8002058:	40010800 	.word	0x40010800

0800205c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_UART_RxCpltCallback+0x5c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d121      	bne.n	80020b0 <HAL_UART_RxCpltCallback+0x54>
  {
	  //// изначально было так - // включаем cветодиод "RX"
	  //// HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);

	  // включаем cветодиод "TX"
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002072:	4812      	ldr	r0, [pc, #72]	; (80020bc <HAL_UART_RxCpltCallback+0x60>)
 8002074:	f000 ff36 	bl	8002ee4 <HAL_GPIO_WritePin>

	  // запу�?каем таймер TIM4, от�?читываем врем�? �?вечени�? cветодиода "RX"
	  HAL_TIM_Base_Start_IT(&htim4);
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <HAL_UART_RxCpltCallback+0x64>)
 800207a:	f002 f901 	bl	8004280 <HAL_TIM_Base_Start_IT>

	  //HAL_TIM_Base_Stop(&htim3);

	  // обнул�?ем �?четчик таймера TIM3
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_UART_RxCpltCallback+0x68>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

	  // запу�?каем таймер TIM3, от�?читываем врем�? до �?ледующего пакета по RX
	  HAL_TIM_Base_Start_IT(&htim3);
 8002086:	480f      	ldr	r0, [pc, #60]	; (80020c4 <HAL_UART_RxCpltCallback+0x68>)
 8002088:	f002 f8fa 	bl	8004280 <HAL_TIM_Base_Start_IT>

	  // �?охран�?ем полученный байт в буфер
	  receivedPacketUART[receivedBytesUARTCounter] = receivedByteUART;
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_UART_RxCpltCallback+0x6c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_UART_RxCpltCallback+0x70>)
 8002094:	7819      	ldrb	r1, [r3, #0]
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_UART_RxCpltCallback+0x74>)
 8002098:	5499      	strb	r1, [r3, r2]

	  //buf1.put(rxByte);

	  // инкрементируем �?четчик полученных байт
	  receivedBytesUARTCounter++;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_UART_RxCpltCallback+0x6c>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_UART_RxCpltCallback+0x6c>)
 80020a4:	701a      	strb	r2, [r3, #0]

	  // �?нова ждем приема байта по UART1
	  HAL_UART_Receive_IT(&huart1, &receivedByteUART, 1);
 80020a6:	2201      	movs	r2, #1
 80020a8:	4908      	ldr	r1, [pc, #32]	; (80020cc <HAL_UART_RxCpltCallback+0x70>)
 80020aa:	4803      	ldr	r0, [pc, #12]	; (80020b8 <HAL_UART_RxCpltCallback+0x5c>)
 80020ac:	f002 fd23 	bl	8004af6 <HAL_UART_Receive_IT>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000590 	.word	0x20000590
 80020bc:	40010c00 	.word	0x40010c00
 80020c0:	20000548 	.word	0x20000548
 80020c4:	20000500 	.word	0x20000500
 80020c8:	200006d8 	.word	0x200006d8
 80020cc:	200005d4 	.word	0x200005d4
 80020d0:	200005d8 	.word	0x200005d8

080020d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <HAL_UART_TxCpltCallback+0x24>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d105      	bne.n	80020f0 <HAL_UART_TxCpltCallback+0x1c>
  {
	  //// изначально было так - // гаcим cветодиод "TX"
	  //// HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);

	  // гаcим cветодиод "RX"
	  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ea:	4804      	ldr	r0, [pc, #16]	; (80020fc <HAL_UART_TxCpltCallback+0x28>)
 80020ec:	f000 fefa 	bl	8002ee4 <HAL_GPIO_WritePin>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000590 	.word	0x20000590
 80020fc:	40010c00 	.word	0x40010c00

08002100 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from TIM3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d121      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		HAL_TIM_Base_Stop(&htim3);
 8002112:	481b      	ldr	r0, [pc, #108]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002114:	f002 f88d 	bl	8004232 <HAL_TIM_Base_Stop>

		// копируем полученный пакет
		for (int i = 0; i < receivedBytesUARTCounter; ++i)
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4293      	cmp	r3, r2
 8002126:	da0c      	bge.n	8002142 <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			copiedReceivedPacketUART[i] = receivedPacketUART[i];
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	7819      	ldrb	r1, [r3, #0]
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4413      	add	r3, r2
 8002136:	460a      	mov	r2, r1
 8002138:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < receivedBytesUARTCounter; ++i)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3301      	adds	r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e7ec      	b.n	800211c <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
		// копируем �?четчик полученных байт
		copiedReceivedBytesUARTCounter = receivedBytesUARTCounter;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002148:	701a      	strb	r2, [r3, #0]

		// у�?танавливаем флаг о готовно�?ти пакета, прин�?того по UART
		receivedPacketUARTisReady = true;
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]

		// обнул�?ем �?четчик полученных байт
		receivedBytesUARTCounter = 0;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM4
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		HAL_TIM_Base_Stop(&htim4);
 8002160:	480e      	ldr	r0, [pc, #56]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002162:	f002 f866 	bl	8004232 <HAL_TIM_Base_Stop>

		//// изначально было так - // гаcим cветодиод "RX"
		//// HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);

		// гаcим cветодиод "TX"
		HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800216e:	f000 feb9 	bl	8002ee4 <HAL_GPIO_WritePin>
	}
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40000400 	.word	0x40000400
 8002180:	20000500 	.word	0x20000500
 8002184:	200006d8 	.word	0x200006d8
 8002188:	200005d8 	.word	0x200005d8
 800218c:	200006dc 	.word	0x200006dc
 8002190:	200007dc 	.word	0x200007dc
 8002194:	200006d9 	.word	0x200006d9
 8002198:	40000800 	.word	0x40000800
 800219c:	20000548 	.word	0x20000548
 80021a0:	40010c00 	.word	0x40010c00

080021a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == W5500_INT_Pin)
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	f040 80aa 	bne.w	800230a <HAL_GPIO_EXTI_Callback+0x166>
	{
		// читаем флаги прерываний от �?окетов
		uint8_t valueSIR = ethernetA1.readByteFromCRB(W5500_SIR);
 80021b6:	2117      	movs	r1, #23
 80021b8:	4856      	ldr	r0, [pc, #344]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 80021ba:	f7fe f823 	bl	8000204 <_ZN5W550015readByteFromCRBEh>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
		uint8_t valueSn_IR {0};
 80021c2:	2300      	movs	r3, #0
 80021c4:	73bb      	strb	r3, [r7, #14]
		if (valueSIR)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 809e 	beq.w	800230a <HAL_GPIO_EXTI_Callback+0x166>
		{
			if (valueSIR & W5500_S0_INT)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01d      	beq.n	8002214 <HAL_GPIO_EXTI_Callback+0x70>
			{
				// читаем флаги прерываний �?окета 0
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET0, W5500_Sn_IR);
 80021d8:	2202      	movs	r2, #2
 80021da:	2108      	movs	r1, #8
 80021dc:	484d      	ldr	r0, [pc, #308]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 80021de:	f7fe f88e 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d011      	beq.n	8002214 <HAL_GPIO_EXTI_Callback+0x70>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET0, receiveSocket0data, &sizeOfReceiveSocket0data);
 80021f0:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_GPIO_EXTI_Callback+0x174>)
 80021f2:	4a4a      	ldr	r2, [pc, #296]	; (800231c <HAL_GPIO_EXTI_Callback+0x178>)
 80021f4:	2108      	movs	r1, #8
 80021f6:	4847      	ldr	r0, [pc, #284]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 80021f8:	f7fe fa57 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket0dataReady = true;
 80021fc:	4b48      	ldr	r3, [pc, #288]	; (8002320 <HAL_GPIO_EXTI_Callback+0x17c>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
					needsTransmitUDP = true;
 8002202:	4b48      	ldr	r3, [pc, #288]	; (8002324 <HAL_GPIO_EXTI_Callback+0x180>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S0_IR
					ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IR_RECV, W5500_Sn_IR);
 8002208:	2302      	movs	r3, #2
 800220a:	2204      	movs	r2, #4
 800220c:	2108      	movs	r1, #8
 800220e:	4841      	ldr	r0, [pc, #260]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 8002210:	f7fe f8e7 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				{

				}
			}

			if (valueSIR & W5500_S1_INT)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d031      	beq.n	8002282 <HAL_GPIO_EXTI_Callback+0xde>
			{
				// читаем флаги прерываний �?окета 1
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_IR);
 800221e:	2202      	movs	r2, #2
 8002220:	2128      	movs	r1, #40	; 0x28
 8002222:	483c      	ldr	r0, [pc, #240]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 8002224:	f7fe f86b 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8002228:	4603      	mov	r3, r0
 800222a:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 800222c:	7bbb      	ldrb	r3, [r7, #14]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d011      	beq.n	800225a <HAL_GPIO_EXTI_Callback+0xb6>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET1, receiveSocket1data, &sizeOfReceiveSocket1data);
 8002236:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <HAL_GPIO_EXTI_Callback+0x184>)
 8002238:	4a3c      	ldr	r2, [pc, #240]	; (800232c <HAL_GPIO_EXTI_Callback+0x188>)
 800223a:	2128      	movs	r1, #40	; 0x28
 800223c:	4835      	ldr	r0, [pc, #212]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 800223e:	f7fe fa34 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket1dataReady = true;
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_GPIO_EXTI_Callback+0x18c>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
					needsTransmitTCP = true;
 8002248:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_GPIO_EXTI_Callback+0x190>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_RECV, W5500_Sn_IR);
 800224e:	2302      	movs	r3, #2
 8002250:	2204      	movs	r2, #4
 8002252:	2128      	movs	r1, #40	; 0x28
 8002254:	482f      	ldr	r0, [pc, #188]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 8002256:	f7fe f8c4 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				if (valueSn_IR & W5500_Sn_IR_CON) // �?оединение �? пиром у�?пешно у�?тановлено
				{

				}

				if (valueSn_IR & W5500_Sn_IR_DISCON) // от пира получен пакет FIN или FIN/ACK
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00e      	beq.n	8002282 <HAL_GPIO_EXTI_Callback+0xde>
				{
					// отправл�?ем команду DISCONNECT
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 8002264:	2301      	movs	r3, #1
 8002266:	2208      	movs	r2, #8
 8002268:	2128      	movs	r1, #40	; 0x28
 800226a:	482a      	ldr	r0, [pc, #168]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 800226c:	f7fe f8b9 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
					// у�?танавливаем флаг
					needsOpenTCP = true;
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_GPIO_EXTI_Callback+0x194>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_DISCON, W5500_Sn_IR);
 8002276:	2302      	movs	r3, #2
 8002278:	2202      	movs	r2, #2
 800227a:	2128      	movs	r1, #40	; 0x28
 800227c:	4825      	ldr	r0, [pc, #148]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 800227e:	f7fe f8b0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				{

				}
			}

			if (valueSIR & W5500_S2_INT)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03e      	beq.n	800230a <HAL_GPIO_EXTI_Callback+0x166>
			{
				// читаем флаги прерываний �?окета 2
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_IR);
 800228c:	2202      	movs	r2, #2
 800228e:	2148      	movs	r1, #72	; 0x48
 8002290:	4820      	ldr	r0, [pc, #128]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 8002292:	f7fe f834 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8002296:	4603      	mov	r3, r0
 8002298:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 800229a:	7bbb      	ldrb	r3, [r7, #14]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <HAL_GPIO_EXTI_Callback+0x11e>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET2, receiveSocket2data, &sizeOfReceiveSocket2data);
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_GPIO_EXTI_Callback+0x198>)
 80022a6:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_GPIO_EXTI_Callback+0x19c>)
 80022a8:	2148      	movs	r1, #72	; 0x48
 80022aa:	481a      	ldr	r0, [pc, #104]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 80022ac:	f7fe f9fd 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket2dataReady = true;
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
					//needsTransmitTCP = true;
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_RECV, W5500_Sn_IR);
 80022b6:	2302      	movs	r3, #2
 80022b8:	2204      	movs	r2, #4
 80022ba:	2148      	movs	r1, #72	; 0x48
 80022bc:	4815      	ldr	r0, [pc, #84]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 80022be:	f7fe f890 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				if (valueSn_IR & W5500_Sn_IR_SEND_OK) // команда SEND выполнена
				{

				}

				if (valueSn_IR & W5500_Sn_IR_CON) // �?оединение �? пиром у�?пешно у�?тановлено
 80022c2:	7bbb      	ldrb	r3, [r7, #14]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_GPIO_EXTI_Callback+0x13e>
				{
					ethernetA1.sendString(SOCKET2, textConnected);
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80022ce:	2148      	movs	r1, #72	; 0x48
 80022d0:	4810      	ldr	r0, [pc, #64]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 80022d2:	f7fe fa79 	bl	80007c8 <_ZN5W550010sendStringEhPc>
					// �?бра�?ываем флаг прерывани�? CON в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_CON, W5500_Sn_IR);
 80022d6:	2302      	movs	r3, #2
 80022d8:	2201      	movs	r2, #1
 80022da:	2148      	movs	r1, #72	; 0x48
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 80022de:	f7fe f880 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				}

				if (valueSn_IR & W5500_Sn_IR_DISCON) // от пира получен пакет FIN или FIN/ACK
 80022e2:	7bbb      	ldrb	r3, [r7, #14]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <HAL_GPIO_EXTI_Callback+0x166>
				{
					// отправл�?ем команду DISCONNECT
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 80022ec:	2301      	movs	r3, #1
 80022ee:	2208      	movs	r2, #8
 80022f0:	2148      	movs	r1, #72	; 0x48
 80022f2:	4808      	ldr	r0, [pc, #32]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 80022f4:	f7fe f875 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
					// у�?танавливаем флаг
					needsOpenTelnet = true;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_GPIO_EXTI_Callback+0x1a8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_DISCON, W5500_Sn_IR);
 80022fe:	2302      	movs	r3, #2
 8002300:	2202      	movs	r2, #2
 8002302:	2148      	movs	r1, #72	; 0x48
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <HAL_GPIO_EXTI_Callback+0x170>)
 8002306:	f7fe f86c 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
			}


		}
	}
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20002158 	.word	0x20002158
 8002318:	20000fea 	.word	0x20000fea
 800231c:	200007e4 	.word	0x200007e4
 8002320:	200007e1 	.word	0x200007e1
 8002324:	200007dd 	.word	0x200007dd
 8002328:	200017f6 	.word	0x200017f6
 800232c:	20000ff0 	.word	0x20000ff0
 8002330:	20000fec 	.word	0x20000fec
 8002334:	200007de 	.word	0x200007de
 8002338:	200007df 	.word	0x200007df
 800233c:	20002002 	.word	0x20002002
 8002340:	200017fc 	.word	0x200017fc
 8002344:	200017f8 	.word	0x200017f8
 8002348:	200000c0 	.word	0x200000c0
 800234c:	200007e0 	.word	0x200007e0

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002358:	e7fe      	b.n	8002358 <Error_Handler+0x8>
	...

0800235c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af02      	add	r7, sp, #8
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d10e      	bne.n	800238a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002372:	4293      	cmp	r3, r2
 8002374:	d109      	bne.n	800238a <_Z41__static_initialization_and_destruction_0ii+0x2e>
W5500 ethernetA1(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);
 8002376:	2310      	movs	r3, #16
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2320      	movs	r3, #32
 8002380:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002384:	480a      	ldr	r0, [pc, #40]	; (80023b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002386:	f7fd fee9 	bl	800015c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002396:	4293      	cmp	r3, r2
 8002398:	d102      	bne.n	80023a0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800239c:	f7fd ff0a 	bl	80001b4 <_ZN5W5500D1Ev>
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40011000 	.word	0x40011000
 80023ac:	20000460 	.word	0x20000460
 80023b0:	20002158 	.word	0x20002158

080023b4 <_GLOBAL__sub_I_hspi1>:
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023bc:	2001      	movs	r0, #1
 80023be:	f7ff ffcd 	bl	800235c <_Z41__static_initialization_and_destruction_0ii>
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_GLOBAL__sub_D_hspi1>:
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff ffc5 	bl	800235c <_Z41__static_initialization_and_destruction_0ii>
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_MspInit+0x5c>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_MspInit+0x5c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_MspInit+0x5c>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_MspInit+0x5c>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_MspInit+0x5c>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_MspInit+0x5c>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_MspInit+0x60>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_MspInit+0x60>)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000

08002438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_SPI_MspInit+0x98>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d137      	bne.n	80024c8 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_SPI_MspInit+0x9c>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_SPI_MspInit+0x9c>)
 800245e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_SPI_MspInit+0x9c>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_SPI_MspInit+0x9c>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_SPI_MspInit+0x9c>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_SPI_MspInit+0x9c>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002488:	23a0      	movs	r3, #160	; 0xa0
 800248a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	4619      	mov	r1, r3
 800249a:	480f      	ldr	r0, [pc, #60]	; (80024d8 <HAL_SPI_MspInit+0xa0>)
 800249c:	f000 fb9e 	bl	8002bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024a0:	2340      	movs	r3, #64	; 0x40
 80024a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	4619      	mov	r1, r3
 80024b2:	4809      	ldr	r0, [pc, #36]	; (80024d8 <HAL_SPI_MspInit+0xa0>)
 80024b4:	f000 fb92 	bl	8002bdc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2023      	movs	r0, #35	; 0x23
 80024be:	f000 faa6 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024c2:	2023      	movs	r0, #35	; 0x23
 80024c4:	f000 fabf 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013000 	.word	0x40013000
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010800 	.word	0x40010800

080024dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d114      	bne.n	8002518 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ee:	4b26      	ldr	r3, [pc, #152]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	61d3      	str	r3, [r2, #28]
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	201c      	movs	r0, #28
 800250c:	f000 fa7f 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002510:	201c      	movs	r0, #28
 8002512:	f000 fa98 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002516:	e032      	b.n	800257e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1b      	ldr	r2, [pc, #108]	; (800258c <HAL_TIM_Base_MspInit+0xb0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d114      	bne.n	800254c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	61d3      	str	r3, [r2, #28]
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	201d      	movs	r0, #29
 8002540:	f000 fa65 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002544:	201d      	movs	r0, #29
 8002546:	f000 fa7e 	bl	8002a46 <HAL_NVIC_EnableIRQ>
}
 800254a:	e018      	b.n	800257e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_TIM_Base_MspInit+0xb4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d113      	bne.n	800257e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_TIM_Base_MspInit+0xac>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	201e      	movs	r0, #30
 8002574:	f000 fa4b 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002578:	201e      	movs	r0, #30
 800257a:	f000 fa64 	bl	8002a46 <HAL_NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800

08002594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a20      	ldr	r2, [pc, #128]	; (8002630 <HAL_UART_MspInit+0x9c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d139      	bne.n	8002628 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_UART_MspInit+0xa0>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <HAL_UART_MspInit+0xa0>)
 80025ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <HAL_UART_MspInit+0xa0>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_UART_MspInit+0xa0>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_UART_MspInit+0xa0>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_UART_MspInit+0xa0>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 0310 	add.w	r3, r7, #16
 80025f6:	4619      	mov	r1, r3
 80025f8:	480f      	ldr	r0, [pc, #60]	; (8002638 <HAL_UART_MspInit+0xa4>)
 80025fa:	f000 faef 	bl	8002bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	4619      	mov	r1, r3
 8002612:	4809      	ldr	r0, [pc, #36]	; (8002638 <HAL_UART_MspInit+0xa4>)
 8002614:	f000 fae2 	bl	8002bdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	2025      	movs	r0, #37	; 0x25
 800261e:	f000 f9f6 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002622:	2025      	movs	r0, #37	; 0x25
 8002624:	f000 fa0f 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002628:	bf00      	nop
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40013800 	.word	0x40013800
 8002634:	40021000 	.word	0x40021000
 8002638:	40010800 	.word	0x40010800

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002682:	f000 f8ad 	bl	80027e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}

0800268a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 800268e:	2010      	movs	r0, #16
 8002690:	f000 fc40 	bl	8002f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}

08002698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <TIM2_IRQHandler+0x10>)
 800269e:	f001 fe41 	bl	8004324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200004b8 	.word	0x200004b8

080026ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM3_IRQHandler+0x10>)
 80026b2:	f001 fe37 	bl	8004324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000500 	.word	0x20000500

080026c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <TIM4_IRQHandler+0x10>)
 80026c6:	f001 fe2d 	bl	8004324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000548 	.word	0x20000548

080026d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <SPI1_IRQHandler+0x10>)
 80026da:	f001 fbb1 	bl	8003e40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000460 	.word	0x20000460

080026e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <USART1_IRQHandler+0x10>)
 80026ee:	f002 fa33 	bl	8004b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000590 	.word	0x20000590

080026fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002708:	480c      	ldr	r0, [pc, #48]	; (800273c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800270a:	490d      	ldr	r1, [pc, #52]	; (8002740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002720:	4c0a      	ldr	r4, [pc, #40]	; (800274c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800272e:	f7ff ffe5 	bl	80026fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002732:	f002 fe0d 	bl	8005350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002736:	f7fe ff87 	bl	8001648 <main>
  bx lr
 800273a:	4770      	bx	lr
  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8002744:	08005608 	.word	0x08005608
  ldr r2, =_sbss
 8002748:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 800274c:	2000236c 	.word	0x2000236c

08002750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC1_2_IRQHandler>
	...

08002754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_Init+0x28>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a07      	ldr	r2, [pc, #28]	; (800277c <HAL_Init+0x28>)
 800275e:	f043 0310 	orr.w	r3, r3, #16
 8002762:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002764:	2003      	movs	r0, #3
 8002766:	f000 f947 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800276a:	200f      	movs	r0, #15
 800276c:	f000 f808 	bl	8002780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002770:	f7ff fe30 	bl	80023d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40022000 	.word	0x40022000

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002788:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_InitTick+0x54>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_InitTick+0x58>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002796:	fbb3 f3f1 	udiv	r3, r3, r1
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f95f 	bl	8002a62 <HAL_SYSTICK_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00e      	b.n	80027cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	d80a      	bhi.n	80027ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b4:	2200      	movs	r2, #0
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	f000 f927 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c0:	4a06      	ldr	r2, [pc, #24]	; (80027dc <HAL_InitTick+0x5c>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200003d4 	.word	0x200003d4
 80027d8:	200003dc 	.word	0x200003dc
 80027dc:	200003d8 	.word	0x200003d8

080027e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_IncTick+0x1c>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_IncTick+0x20>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	4a03      	ldr	r2, [pc, #12]	; (8002800 <HAL_IncTick+0x20>)
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	200003dc 	.word	0x200003dc
 8002800:	20002368 	.word	0x20002368

08002804 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTick;
 8002808:	4b02      	ldr	r3, [pc, #8]	; (8002814 <HAL_GetTick+0x10>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	20002368 	.word	0x20002368

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff fff0 	bl	8002804 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffe0 	bl	8002804 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200003dc 	.word	0x200003dc

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4906      	ldr	r1, [pc, #24]	; (80028f8 <__NVIC_EnableIRQ+0x34>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f7ff ff90 	bl	80028fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff2d 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff42 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff90 	bl	8002950 <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff5f 	bl	80028fc <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff35 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffa2 	bl	80029b4 <SysTick_Config>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d008      	beq.n	8002aa2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2204      	movs	r2, #4
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e020      	b.n	8002ae4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 020e 	bic.w	r2, r2, #14
 8002ab0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0201 	bic.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d005      	beq.n	8002b12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e051      	b.n	8002bb6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 020e 	bic.w	r2, r2, #14
 8002b20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <HAL_DMA_Abort_IT+0xd0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d029      	beq.n	8002b90 <HAL_DMA_Abort_IT+0xa0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <HAL_DMA_Abort_IT+0xd4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d022      	beq.n	8002b8c <HAL_DMA_Abort_IT+0x9c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_DMA_Abort_IT+0xd8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d01a      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x96>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_DMA_Abort_IT+0xdc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d012      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x90>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_DMA_Abort_IT+0xe0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00a      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x8a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <HAL_DMA_Abort_IT+0xe4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d102      	bne.n	8002b74 <HAL_DMA_Abort_IT+0x84>
 8002b6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b72:	e00e      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b78:	e00b      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b7e:	e008      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b84:	e005      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8a:	e002      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b90:	2301      	movs	r3, #1
 8002b92:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <HAL_DMA_Abort_IT+0xe8>)
 8002b94:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
    } 
  }
  return status;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40020008 	.word	0x40020008
 8002bc4:	4002001c 	.word	0x4002001c
 8002bc8:	40020030 	.word	0x40020030
 8002bcc:	40020044 	.word	0x40020044
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	4002006c 	.word	0x4002006c
 8002bd8:	40020000 	.word	0x40020000

08002bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b08b      	sub	sp, #44	; 0x2c
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bee:	e169      	b.n	8002ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	f040 8158 	bne.w	8002ebe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a9a      	ldr	r2, [pc, #616]	; (8002e7c <HAL_GPIO_Init+0x2a0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d05e      	beq.n	8002cd6 <HAL_GPIO_Init+0xfa>
 8002c18:	4a98      	ldr	r2, [pc, #608]	; (8002e7c <HAL_GPIO_Init+0x2a0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d875      	bhi.n	8002d0a <HAL_GPIO_Init+0x12e>
 8002c1e:	4a98      	ldr	r2, [pc, #608]	; (8002e80 <HAL_GPIO_Init+0x2a4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d058      	beq.n	8002cd6 <HAL_GPIO_Init+0xfa>
 8002c24:	4a96      	ldr	r2, [pc, #600]	; (8002e80 <HAL_GPIO_Init+0x2a4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d86f      	bhi.n	8002d0a <HAL_GPIO_Init+0x12e>
 8002c2a:	4a96      	ldr	r2, [pc, #600]	; (8002e84 <HAL_GPIO_Init+0x2a8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d052      	beq.n	8002cd6 <HAL_GPIO_Init+0xfa>
 8002c30:	4a94      	ldr	r2, [pc, #592]	; (8002e84 <HAL_GPIO_Init+0x2a8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d869      	bhi.n	8002d0a <HAL_GPIO_Init+0x12e>
 8002c36:	4a94      	ldr	r2, [pc, #592]	; (8002e88 <HAL_GPIO_Init+0x2ac>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d04c      	beq.n	8002cd6 <HAL_GPIO_Init+0xfa>
 8002c3c:	4a92      	ldr	r2, [pc, #584]	; (8002e88 <HAL_GPIO_Init+0x2ac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d863      	bhi.n	8002d0a <HAL_GPIO_Init+0x12e>
 8002c42:	4a92      	ldr	r2, [pc, #584]	; (8002e8c <HAL_GPIO_Init+0x2b0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d046      	beq.n	8002cd6 <HAL_GPIO_Init+0xfa>
 8002c48:	4a90      	ldr	r2, [pc, #576]	; (8002e8c <HAL_GPIO_Init+0x2b0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d85d      	bhi.n	8002d0a <HAL_GPIO_Init+0x12e>
 8002c4e:	2b12      	cmp	r3, #18
 8002c50:	d82a      	bhi.n	8002ca8 <HAL_GPIO_Init+0xcc>
 8002c52:	2b12      	cmp	r3, #18
 8002c54:	d859      	bhi.n	8002d0a <HAL_GPIO_Init+0x12e>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_GPIO_Init+0x80>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002cd7 	.word	0x08002cd7
 8002c60:	08002cb1 	.word	0x08002cb1
 8002c64:	08002cc3 	.word	0x08002cc3
 8002c68:	08002d05 	.word	0x08002d05
 8002c6c:	08002d0b 	.word	0x08002d0b
 8002c70:	08002d0b 	.word	0x08002d0b
 8002c74:	08002d0b 	.word	0x08002d0b
 8002c78:	08002d0b 	.word	0x08002d0b
 8002c7c:	08002d0b 	.word	0x08002d0b
 8002c80:	08002d0b 	.word	0x08002d0b
 8002c84:	08002d0b 	.word	0x08002d0b
 8002c88:	08002d0b 	.word	0x08002d0b
 8002c8c:	08002d0b 	.word	0x08002d0b
 8002c90:	08002d0b 	.word	0x08002d0b
 8002c94:	08002d0b 	.word	0x08002d0b
 8002c98:	08002d0b 	.word	0x08002d0b
 8002c9c:	08002d0b 	.word	0x08002d0b
 8002ca0:	08002cb9 	.word	0x08002cb9
 8002ca4:	08002ccd 	.word	0x08002ccd
 8002ca8:	4a79      	ldr	r2, [pc, #484]	; (8002e90 <HAL_GPIO_Init+0x2b4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cae:	e02c      	b.n	8002d0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	623b      	str	r3, [r7, #32]
          break;
 8002cb6:	e029      	b.n	8002d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	623b      	str	r3, [r7, #32]
          break;
 8002cc0:	e024      	b.n	8002d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	623b      	str	r3, [r7, #32]
          break;
 8002cca:	e01f      	b.n	8002d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	623b      	str	r3, [r7, #32]
          break;
 8002cd4:	e01a      	b.n	8002d0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	623b      	str	r3, [r7, #32]
          break;
 8002ce2:	e013      	b.n	8002d0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d105      	bne.n	8002cf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cec:	2308      	movs	r3, #8
 8002cee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	611a      	str	r2, [r3, #16]
          break;
 8002cf6:	e009      	b.n	8002d0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cf8:	2308      	movs	r3, #8
 8002cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	615a      	str	r2, [r3, #20]
          break;
 8002d02:	e003      	b.n	8002d0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d04:	2300      	movs	r3, #0
 8002d06:	623b      	str	r3, [r7, #32]
          break;
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x130>
          break;
 8002d0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2bff      	cmp	r3, #255	; 0xff
 8002d10:	d801      	bhi.n	8002d16 <HAL_GPIO_Init+0x13a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	e001      	b.n	8002d1a <HAL_GPIO_Init+0x13e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2bff      	cmp	r3, #255	; 0xff
 8002d20:	d802      	bhi.n	8002d28 <HAL_GPIO_Init+0x14c>
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	e002      	b.n	8002d2e <HAL_GPIO_Init+0x152>
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	3b08      	subs	r3, #8
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	210f      	movs	r1, #15
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	6a39      	ldr	r1, [r7, #32]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	fa01 f303 	lsl.w	r3, r1, r3
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80b1 	beq.w	8002ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_GPIO_Init+0x2b8>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	4a4c      	ldr	r2, [pc, #304]	; (8002e94 <HAL_GPIO_Init+0x2b8>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6193      	str	r3, [r2, #24]
 8002d68:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_GPIO_Init+0x2b8>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d74:	4a48      	ldr	r2, [pc, #288]	; (8002e98 <HAL_GPIO_Init+0x2bc>)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <HAL_GPIO_Init+0x2c0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_GPIO_Init+0x1ec>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3f      	ldr	r2, [pc, #252]	; (8002ea0 <HAL_GPIO_Init+0x2c4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00d      	beq.n	8002dc4 <HAL_GPIO_Init+0x1e8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3e      	ldr	r2, [pc, #248]	; (8002ea4 <HAL_GPIO_Init+0x2c8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <HAL_GPIO_Init+0x1e4>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3d      	ldr	r2, [pc, #244]	; (8002ea8 <HAL_GPIO_Init+0x2cc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_GPIO_Init+0x1e0>
 8002db8:	2303      	movs	r3, #3
 8002dba:	e006      	b.n	8002dca <HAL_GPIO_Init+0x1ee>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e004      	b.n	8002dca <HAL_GPIO_Init+0x1ee>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_Init+0x1ee>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_GPIO_Init+0x1ee>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	f002 0203 	and.w	r2, r2, #3
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	4093      	lsls	r3, r2
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dda:	492f      	ldr	r1, [pc, #188]	; (8002e98 <HAL_GPIO_Init+0x2bc>)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	3302      	adds	r3, #2
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d006      	beq.n	8002e02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	492c      	ldr	r1, [pc, #176]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e02:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4928      	ldr	r1, [pc, #160]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4922      	ldr	r1, [pc, #136]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
 8002e28:	e006      	b.n	8002e38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	491e      	ldr	r1, [pc, #120]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	4918      	ldr	r1, [pc, #96]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	4914      	ldr	r1, [pc, #80]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d021      	beq.n	8002eb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	490e      	ldr	r1, [pc, #56]	; (8002eac <HAL_GPIO_Init+0x2d0>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
 8002e78:	e021      	b.n	8002ebe <HAL_GPIO_Init+0x2e2>
 8002e7a:	bf00      	nop
 8002e7c:	10320000 	.word	0x10320000
 8002e80:	10310000 	.word	0x10310000
 8002e84:	10220000 	.word	0x10220000
 8002e88:	10210000 	.word	0x10210000
 8002e8c:	10120000 	.word	0x10120000
 8002e90:	10110000 	.word	0x10110000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40010800 	.word	0x40010800
 8002ea0:	40010c00 	.word	0x40010c00
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	4909      	ldr	r1, [pc, #36]	; (8002ee0 <HAL_GPIO_Init+0x304>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f47f ae8e 	bne.w	8002bf0 <HAL_GPIO_Init+0x14>
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	372c      	adds	r7, #44	; 0x2c
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef4:	787b      	ldrb	r3, [r7, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f00:	e003      	b.n	8002f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f02:	887b      	ldrh	r3, [r7, #2]
 8002f04:	041a      	lsls	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	611a      	str	r2, [r3, #16]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f936 	bl	80021a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e272      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8087 	beq.w	8003072 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f64:	4b92      	ldr	r3, [pc, #584]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d00c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f70:	4b8f      	ldr	r3, [pc, #572]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d112      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x5e>
 8002f7c:	4b8c      	ldr	r3, [pc, #560]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d10b      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8a:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d06c      	beq.n	8003070 <HAL_RCC_OscConfig+0x12c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d168      	bne.n	8003070 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e24c      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x76>
 8002fac:	4b80      	ldr	r3, [pc, #512]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a7f      	ldr	r2, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	e02e      	b.n	8003018 <HAL_RCC_OscConfig+0xd4>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x98>
 8002fc2:	4b7b      	ldr	r3, [pc, #492]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a7a      	ldr	r2, [pc, #488]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b78      	ldr	r3, [pc, #480]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a77      	ldr	r2, [pc, #476]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e01d      	b.n	8003018 <HAL_RCC_OscConfig+0xd4>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0xbc>
 8002fe6:	4b72      	ldr	r3, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a71      	ldr	r2, [pc, #452]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6e      	ldr	r2, [pc, #440]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0xd4>
 8003000:	4b6b      	ldr	r3, [pc, #428]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a6a      	ldr	r2, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8003012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003016:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7ff fbf0 	bl	8002804 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7ff fbec 	bl	8002804 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e200      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b5d      	ldr	r3, [pc, #372]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0xe4>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7ff fbdc 	bl	8002804 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7ff fbd8 	bl	8002804 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1ec      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x10c>
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d063      	beq.n	8003146 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800307e:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800308a:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b08      	cmp	r3, #8
 8003094:	d11c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x18c>
 8003096:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d116      	bne.n	80030d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <HAL_RCC_OscConfig+0x176>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e1c0      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4939      	ldr	r1, [pc, #228]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	e03a      	b.n	8003146 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_RCC_OscConfig+0x270>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7ff fb91 	bl	8002804 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7ff fb8d 	bl	8002804 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e1a1      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4927      	ldr	r1, [pc, #156]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	e015      	b.n	8003146 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311a:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <HAL_RCC_OscConfig+0x270>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7ff fb70 	bl	8002804 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003128:	f7ff fb6c 	bl	8002804 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e180      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d03a      	beq.n	80031c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d019      	beq.n	800318e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_RCC_OscConfig+0x274>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003160:	f7ff fb50 	bl	8002804 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003168:	f7ff fb4c 	bl	8002804 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e160      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003186:	2001      	movs	r0, #1
 8003188:	f000 fada 	bl	8003740 <RCC_Delay>
 800318c:	e01c      	b.n	80031c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_RCC_OscConfig+0x274>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003194:	f7ff fb36 	bl	8002804 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319a:	e00f      	b.n	80031bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319c:	f7ff fb32 	bl	8002804 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d908      	bls.n	80031bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e146      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	42420000 	.word	0x42420000
 80031b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4b92      	ldr	r3, [pc, #584]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e9      	bne.n	800319c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80a6 	beq.w	8003322 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031da:	4b8b      	ldr	r3, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	4a87      	ldr	r2, [pc, #540]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f0:	61d3      	str	r3, [r2, #28]
 80031f2:	4b85      	ldr	r3, [pc, #532]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	4b82      	ldr	r3, [pc, #520]	; (800340c <HAL_RCC_OscConfig+0x4c8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d118      	bne.n	8003240 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320e:	4b7f      	ldr	r3, [pc, #508]	; (800340c <HAL_RCC_OscConfig+0x4c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7e      	ldr	r2, [pc, #504]	; (800340c <HAL_RCC_OscConfig+0x4c8>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321a:	f7ff faf3 	bl	8002804 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7ff faef 	bl	8002804 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b64      	cmp	r3, #100	; 0x64
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e103      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	4b75      	ldr	r3, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x4c8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x312>
 8003248:	4b6f      	ldr	r3, [pc, #444]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a6e      	ldr	r2, [pc, #440]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	e02d      	b.n	80032b2 <HAL_RCC_OscConfig+0x36e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x334>
 800325e:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a69      	ldr	r2, [pc, #420]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	6213      	str	r3, [r2, #32]
 800326a:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a66      	ldr	r2, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	e01c      	b.n	80032b2 <HAL_RCC_OscConfig+0x36e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d10c      	bne.n	800329a <HAL_RCC_OscConfig+0x356>
 8003280:	4b61      	ldr	r3, [pc, #388]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4a60      	ldr	r2, [pc, #384]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	f043 0304 	orr.w	r3, r3, #4
 800328a:	6213      	str	r3, [r2, #32]
 800328c:	4b5e      	ldr	r3, [pc, #376]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	4a5d      	ldr	r2, [pc, #372]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6213      	str	r3, [r2, #32]
 8003298:	e00b      	b.n	80032b2 <HAL_RCC_OscConfig+0x36e>
 800329a:	4b5b      	ldr	r3, [pc, #364]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4a5a      	ldr	r2, [pc, #360]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6213      	str	r3, [r2, #32]
 80032a6:	4b58      	ldr	r3, [pc, #352]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4a57      	ldr	r2, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d015      	beq.n	80032e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ba:	f7ff faa3 	bl	8002804 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7ff fa9f 	bl	8002804 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0b1      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	4b4b      	ldr	r3, [pc, #300]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ee      	beq.n	80032c2 <HAL_RCC_OscConfig+0x37e>
 80032e4:	e014      	b.n	8003310 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7ff fa8d 	bl	8002804 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7ff fa89 	bl	8002804 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e09b      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	4b40      	ldr	r3, [pc, #256]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ee      	bne.n	80032ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003316:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4a3b      	ldr	r2, [pc, #236]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003320:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8087 	beq.w	800343a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b08      	cmp	r3, #8
 8003336:	d061      	beq.n	80033fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d146      	bne.n	80033ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b33      	ldr	r3, [pc, #204]	; (8003410 <HAL_RCC_OscConfig+0x4cc>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7ff fa5d 	bl	8002804 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7ff fa59 	bl	8002804 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e06d      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003360:	4b29      	ldr	r3, [pc, #164]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d108      	bne.n	8003388 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4921      	ldr	r1, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003388:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a19      	ldr	r1, [r3, #32]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	430b      	orrs	r3, r1
 800339a:	491b      	ldr	r1, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7ff fa2d 	bl	8002804 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ae:	f7ff fa29 	bl	8002804 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e03d      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x46a>
 80033cc:	e035      	b.n	800343a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCC_OscConfig+0x4cc>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7ff fa16 	bl	8002804 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033dc:	f7ff fa12 	bl	8002804 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e026      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x4c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x498>
 80033fa:	e01e      	b.n	800343a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e019      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
 8003408:	40021000 	.word	0x40021000
 800340c:	40007000 	.word	0x40007000
 8003410:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_OscConfig+0x500>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	429a      	cmp	r2, r3
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000

08003448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0d0      	b.n	80035fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b6a      	ldr	r3, [pc, #424]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d910      	bls.n	800348c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b67      	ldr	r3, [pc, #412]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 0207 	bic.w	r2, r3, #7
 8003472:	4965      	ldr	r1, [pc, #404]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b63      	ldr	r3, [pc, #396]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0b8      	b.n	80035fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a4:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a58      	ldr	r2, [pc, #352]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034bc:	4b53      	ldr	r3, [pc, #332]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	494d      	ldr	r1, [pc, #308]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d040      	beq.n	8003568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d115      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e07f      	b.n	80035fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003506:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e073      	b.n	80035fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003516:	4b3d      	ldr	r3, [pc, #244]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e06b      	b.n	80035fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b39      	ldr	r3, [pc, #228]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4936      	ldr	r1, [pc, #216]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003538:	f7ff f964 	bl	8002804 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7ff f960 	bl	8002804 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e053      	b.n	80035fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b2d      	ldr	r3, [pc, #180]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b27      	ldr	r3, [pc, #156]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d210      	bcs.n	8003598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 0207 	bic.w	r2, r3, #7
 800357e:	4922      	ldr	r1, [pc, #136]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b20      	ldr	r3, [pc, #128]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e032      	b.n	80035fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4916      	ldr	r1, [pc, #88]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	490e      	ldr	r1, [pc, #56]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035d6:	f000 f821 	bl	800361c <HAL_RCC_GetSysClockFreq>
 80035da:	4602      	mov	r2, r0
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	490a      	ldr	r1, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	5ccb      	ldrb	r3, [r1, r3]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	4a09      	ldr	r2, [pc, #36]	; (8003614 <HAL_RCC_ClockConfig+0x1cc>)
 80035f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCC_ClockConfig+0x1d0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f8c2 	bl	8002780 <HAL_InitTick>

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40022000 	.word	0x40022000
 800360c:	40021000 	.word	0x40021000
 8003610:	080054dc 	.word	0x080054dc
 8003614:	200003d4 	.word	0x200003d4
 8003618:	200003d8 	.word	0x200003d8

0800361c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800361c:	b490      	push	{r4, r7}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003622:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003624:	1d3c      	adds	r4, r7, #4
 8003626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800362c:	f240 2301 	movw	r3, #513	; 0x201
 8003630:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b04      	cmp	r3, #4
 8003654:	d002      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x40>
 8003656:	2b08      	cmp	r3, #8
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x46>
 800365a:	e02b      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800365c:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800365e:	623b      	str	r3, [r7, #32]
      break;
 8003660:	e02b      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	0c9b      	lsrs	r3, r3, #18
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	3328      	adds	r3, #40	; 0x28
 800366c:	443b      	add	r3, r7
 800366e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003672:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	0c5b      	lsrs	r3, r3, #17
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	3328      	adds	r3, #40	; 0x28
 800368a:	443b      	add	r3, r7
 800368c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003690:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003696:	fb03 f202 	mul.w	r2, r3, r2
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
 80036a2:	e004      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	623b      	str	r3, [r7, #32]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036b6:	623b      	str	r3, [r7, #32]
      break;
 80036b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ba:	6a3b      	ldr	r3, [r7, #32]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3728      	adds	r7, #40	; 0x28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc90      	pop	{r4, r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	080054cc 	.word	0x080054cc
 80036cc:	40021000 	.word	0x40021000
 80036d0:	00b71b00 	.word	0x00b71b00
 80036d4:	003d0900 	.word	0x003d0900
 80036d8:	007a1200 	.word	0x007a1200

080036dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e0:	4b02      	ldr	r3, [pc, #8]	; (80036ec <HAL_RCC_GetHCLKFreq+0x10>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	200003d4 	.word	0x200003d4

080036f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036f4:	f7ff fff2 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4903      	ldr	r1, [pc, #12]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	080054ec 	.word	0x080054ec

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800371c:	f7ff ffde 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0adb      	lsrs	r3, r3, #11
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4903      	ldr	r1, [pc, #12]	; (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40021000 	.word	0x40021000
 800373c:	080054ec 	.word	0x080054ec

08003740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <RCC_Delay+0x34>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <RCC_Delay+0x38>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0a5b      	lsrs	r3, r3, #9
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800375c:	bf00      	nop
  }
  while (Delay --);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1e5a      	subs	r2, r3, #1
 8003762:	60fa      	str	r2, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f9      	bne.n	800375c <RCC_Delay+0x1c>
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	200003d4 	.word	0x200003d4
 8003778:	10624dd3 	.word	0x10624dd3

0800377c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e076      	b.n	800387c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379e:	d009      	beq.n	80037b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
 80037a6:	e005      	b.n	80037b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fe fe32 	bl	8002438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	ea42 0103 	orr.w	r1, r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	0c1a      	lsrs	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f002 0204 	and.w	r2, r2, #4
 800385a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_SPI_Transmit+0x22>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e126      	b.n	8003af4 <HAL_SPI_Transmit+0x270>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ae:	f7fe ffa9 	bl	8002804 <HAL_GetTick>
 80038b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d002      	beq.n	80038ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
 80038c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c8:	e10b      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_SPI_Transmit+0x52>
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038da:	e102      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2203      	movs	r2, #3
 80038e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003922:	d10f      	bne.n	8003944 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003932:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003942:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d007      	beq.n	8003962 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396a:	d14b      	bne.n	8003a04 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_SPI_Transmit+0xf6>
 8003974:	8afb      	ldrh	r3, [r7, #22]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d13e      	bne.n	80039f8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	881a      	ldrh	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	1c9a      	adds	r2, r3, #2
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800399e:	e02b      	b.n	80039f8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d112      	bne.n	80039d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	1c9a      	adds	r2, r3, #2
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80039d2:	e011      	b.n	80039f8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d4:	f7fe ff16 	bl	8002804 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d803      	bhi.n	80039ec <HAL_SPI_Transmit+0x168>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Transmit+0x16e>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f6:	e074      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ce      	bne.n	80039a0 <HAL_SPI_Transmit+0x11c>
 8003a02:	e04c      	b.n	8003a9e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_Transmit+0x18e>
 8003a0c:	8afb      	ldrh	r3, [r7, #22]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d140      	bne.n	8003a94 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a38:	e02c      	b.n	8003a94 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d113      	bne.n	8003a70 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a6e:	e011      	b.n	8003a94 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a70:	f7fe fec8 	bl	8002804 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d803      	bhi.n	8003a88 <HAL_SPI_Transmit+0x204>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d102      	bne.n	8003a8e <HAL_SPI_Transmit+0x20a>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a92:	e026      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1cd      	bne.n	8003a3a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	6839      	ldr	r1, [r7, #0]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fb58 	bl	8004158 <SPI_EndRxTxTransaction>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e000      	b.n	8003ae2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ae0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_SPI_TransmitReceive+0x26>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e18a      	b.n	8003e38 <HAL_SPI_TransmitReceive+0x33c>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b2a:	f7fe fe6b 	bl	8002804 <HAL_GetTick>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d00f      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x70>
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b52:	d107      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x68>
 8003b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d003      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b6a:	e15b      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_SPI_TransmitReceive+0x82>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_SPI_TransmitReceive+0x82>
 8003b78:	887b      	ldrh	r3, [r7, #2]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b84:	e14e      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d003      	beq.n	8003b9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2205      	movs	r2, #5
 8003b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	887a      	ldrh	r2, [r7, #2]
 8003baa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	887a      	ldrh	r2, [r7, #2]
 8003bc2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d007      	beq.n	8003bee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf6:	d178      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x10a>
 8003c00:	8b7b      	ldrh	r3, [r7, #26]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d166      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	881a      	ldrh	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c2a:	e053      	b.n	8003cd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d11b      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x176>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d016      	beq.n	8003c72 <HAL_SPI_TransmitReceive+0x176>
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d113      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	881a      	ldrh	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d119      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x1b8>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d014      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	b292      	uxth	r2, r2
 8003c96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cb4:	f7fe fda6 	bl	8002804 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d807      	bhi.n	8003cd4 <HAL_SPI_TransmitReceive+0x1d8>
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cca:	d003      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cd2:	e0a7      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1a6      	bne.n	8003c2c <HAL_SPI_TransmitReceive+0x130>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1a1      	bne.n	8003c2c <HAL_SPI_TransmitReceive+0x130>
 8003ce8:	e07c      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x1fc>
 8003cf2:	8b7b      	ldrh	r3, [r7, #26]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d16b      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	7812      	ldrb	r2, [r2, #0]
 8003d04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1e:	e057      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d11c      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x26c>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d017      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x26c>
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d114      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	7812      	ldrb	r2, [r2, #0]
 8003d4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d119      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x2ae>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d014      	beq.n	8003daa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da6:	2301      	movs	r3, #1
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003daa:	f7fe fd2b 	bl	8002804 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d803      	bhi.n	8003dc2 <HAL_SPI_TransmitReceive+0x2c6>
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d102      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x2cc>
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dce:	e029      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1a2      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x224>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d19d      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f9b5 	bl	8004158 <SPI_EndRxTxTransaction>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d006      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e00:	e010      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	e000      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10f      	bne.n	8003e84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	099b      	lsrs	r3, r3, #6
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
    return;
 8003e82:	e0be      	b.n	8004002 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_SPI_IRQHandler+0x66>
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	09db      	lsrs	r3, r3, #7
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
    return;
 8003ea4:	e0ad      	b.n	8004002 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_SPI_IRQHandler+0x80>
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80a1 	beq.w	8004002 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 809a 	beq.w	8004002 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d023      	beq.n	8003f22 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d011      	beq.n	8003f0a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	f043 0204 	orr.w	r2, r3, #4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	e00b      	b.n	8003f22 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	693b      	ldr	r3, [r7, #16]
        return;
 8003f20:	e06f      	b.n	8004002 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d014      	beq.n	8003f58 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	f043 0201 	orr.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d04f      	beq.n	8004000 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f6e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <HAL_SPI_IRQHandler+0x14c>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d034      	beq.n	8003ff6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0203 	bic.w	r2, r2, #3
 8003f9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d011      	beq.n	8003fc8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa8:	4a17      	ldr	r2, [pc, #92]	; (8004008 <HAL_SPI_IRQHandler+0x1c8>)
 8003faa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fd9d 	bl	8002af0 <HAL_DMA_Abort_IT>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d016      	beq.n	8003ffe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd4:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <HAL_SPI_IRQHandler+0x1c8>)
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe fd87 	bl	8002af0 <HAL_DMA_Abort_IT>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003ff4:	e003      	b.n	8003ffe <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f808 	bl	800400c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ffc:	e000      	b.n	8004000 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003ffe:	bf00      	nop
    return;
 8004000:	bf00      	nop
  }
}
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	0800401f 	.word	0x0800401f

0800400c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff ffe7 	bl	800400c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004058:	f7fe fbd4 	bl	8002804 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	4413      	add	r3, r2
 8004066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004068:	f7fe fbcc 	bl	8002804 <HAL_GetTick>
 800406c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800406e:	4b39      	ldr	r3, [pc, #228]	; (8004154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	015b      	lsls	r3, r3, #5
 8004074:	0d1b      	lsrs	r3, r3, #20
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800407e:	e054      	b.n	800412a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d050      	beq.n	800412a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004088:	f7fe fbbc 	bl	8002804 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	429a      	cmp	r2, r3
 8004096:	d902      	bls.n	800409e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d13d      	bne.n	800411a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b6:	d111      	bne.n	80040dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c0:	d004      	beq.n	80040cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ca:	d107      	bne.n	80040dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e4:	d10f      	bne.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e017      	b.n	800414a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3b01      	subs	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4013      	ands	r3, r2
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	429a      	cmp	r2, r3
 8004138:	bf0c      	ite	eq
 800413a:	2301      	moveq	r3, #1
 800413c:	2300      	movne	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	429a      	cmp	r2, r3
 8004146:	d19b      	bne.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200003d4 	.word	0x200003d4

08004158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff6a 	bl	8004048 <SPI_WaitFlagStateUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e000      	b.n	800418c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e041      	b.n	800422a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fe f98e 	bl	80024dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f000 fa96 	bl	8004704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6a1a      	ldr	r2, [r3, #32]
 8004240:	f241 1311 	movw	r3, #4369	; 0x1111
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <HAL_TIM_Base_Stop+0x38>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a1a      	ldr	r2, [r3, #32]
 8004250:	f240 4344 	movw	r3, #1092	; 0x444
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <HAL_TIM_Base_Stop+0x38>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr
	...

08004280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d001      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e03a      	b.n	800430e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <HAL_TIM_Base_Start_IT+0x98>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x58>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c2:	d009      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x58>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a14      	ldr	r2, [pc, #80]	; (800431c <HAL_TIM_Base_Start_IT+0x9c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x58>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <HAL_TIM_Base_Start_IT+0xa0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d111      	bne.n	80042fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d010      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fa:	e007      	b.n	800430c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800

08004324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0202 	mvn.w	r2, #2
 8004350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f9b1 	bl	80046ce <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f9a4 	bl	80046bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f9b3 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0204 	mvn.w	r2, #4
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f987 	bl	80046ce <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f97a 	bl	80046bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f989 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0208 	mvn.w	r2, #8
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2204      	movs	r2, #4
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f95d 	bl	80046ce <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f950 	bl	80046bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f95f 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b10      	cmp	r3, #16
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b10      	cmp	r3, #16
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0210 	mvn.w	r2, #16
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2208      	movs	r2, #8
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f933 	bl	80046ce <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f926 	bl	80046bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f935 	bl	80046e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b01      	cmp	r3, #1
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0201 	mvn.w	r2, #1
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd fe2c 	bl	8002100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa77 	bl	80049c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8f9 	bl	80046f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d10e      	bne.n	800452c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d107      	bne.n	800452c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0220 	mvn.w	r2, #32
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa42 	bl	80049b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_TIM_ConfigClockSource+0x18>
 8004548:	2302      	movs	r3, #2
 800454a:	e0b3      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x180>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800456a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004572:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004584:	d03e      	beq.n	8004604 <HAL_TIM_ConfigClockSource+0xd0>
 8004586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458a:	f200 8087 	bhi.w	800469c <HAL_TIM_ConfigClockSource+0x168>
 800458e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004592:	f000 8085 	beq.w	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	d87f      	bhi.n	800469c <HAL_TIM_ConfigClockSource+0x168>
 800459c:	2b70      	cmp	r3, #112	; 0x70
 800459e:	d01a      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0xa2>
 80045a0:	2b70      	cmp	r3, #112	; 0x70
 80045a2:	d87b      	bhi.n	800469c <HAL_TIM_ConfigClockSource+0x168>
 80045a4:	2b60      	cmp	r3, #96	; 0x60
 80045a6:	d050      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x116>
 80045a8:	2b60      	cmp	r3, #96	; 0x60
 80045aa:	d877      	bhi.n	800469c <HAL_TIM_ConfigClockSource+0x168>
 80045ac:	2b50      	cmp	r3, #80	; 0x50
 80045ae:	d03c      	beq.n	800462a <HAL_TIM_ConfigClockSource+0xf6>
 80045b0:	2b50      	cmp	r3, #80	; 0x50
 80045b2:	d873      	bhi.n	800469c <HAL_TIM_ConfigClockSource+0x168>
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d058      	beq.n	800466a <HAL_TIM_ConfigClockSource+0x136>
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d86f      	bhi.n	800469c <HAL_TIM_ConfigClockSource+0x168>
 80045bc:	2b30      	cmp	r3, #48	; 0x30
 80045be:	d064      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x156>
 80045c0:	2b30      	cmp	r3, #48	; 0x30
 80045c2:	d86b      	bhi.n	800469c <HAL_TIM_ConfigClockSource+0x168>
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d060      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x156>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d867      	bhi.n	800469c <HAL_TIM_ConfigClockSource+0x168>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d05c      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x156>
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d05a      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80045d4:	e062      	b.n	800469c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6899      	ldr	r1, [r3, #8]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f000 f966 	bl	80048b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	609a      	str	r2, [r3, #8]
      break;
 8004602:	e04e      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6899      	ldr	r1, [r3, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f000 f94f 	bl	80048b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004626:	609a      	str	r2, [r3, #8]
      break;
 8004628:	e03b      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	461a      	mov	r2, r3
 8004638:	f000 f8c6 	bl	80047c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2150      	movs	r1, #80	; 0x50
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f91d 	bl	8004882 <TIM_ITRx_SetConfig>
      break;
 8004648:	e02b      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	461a      	mov	r2, r3
 8004658:	f000 f8e4 	bl	8004824 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2160      	movs	r1, #96	; 0x60
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f90d 	bl	8004882 <TIM_ITRx_SetConfig>
      break;
 8004668:	e01b      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	461a      	mov	r2, r3
 8004678:	f000 f8a6 	bl	80047c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2140      	movs	r1, #64	; 0x40
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f8fd 	bl	8004882 <TIM_ITRx_SetConfig>
      break;
 8004688:	e00b      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f000 f8f4 	bl	8004882 <TIM_ITRx_SetConfig>
        break;
 800469a:	e002      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800469c:	bf00      	nop
 800469e:	e000      	b.n	80046a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a29      	ldr	r2, [pc, #164]	; (80047bc <TIM_Base_SetConfig+0xb8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <TIM_Base_SetConfig+0x30>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004722:	d007      	beq.n	8004734 <TIM_Base_SetConfig+0x30>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <TIM_Base_SetConfig+0xbc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0x30>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <TIM_Base_SetConfig+0xc0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <TIM_Base_SetConfig+0xb8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00b      	beq.n	8004766 <TIM_Base_SetConfig+0x62>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d007      	beq.n	8004766 <TIM_Base_SetConfig+0x62>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <TIM_Base_SetConfig+0xbc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d003      	beq.n	8004766 <TIM_Base_SetConfig+0x62>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <TIM_Base_SetConfig+0xc0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d108      	bne.n	8004778 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <TIM_Base_SetConfig+0xb8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d103      	bne.n	80047ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	615a      	str	r2, [r3, #20]
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800

080047c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f023 030a 	bic.w	r3, r3, #10
 8004804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f023 0210 	bic.w	r2, r3, #16
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800484e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	031b      	lsls	r3, r3, #12
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004860:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr

08004882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	f043 0307 	orr.w	r3, r3, #7
 80048a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	609a      	str	r2, [r3, #8]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b087      	sub	sp, #28
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	021a      	lsls	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	431a      	orrs	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4313      	orrs	r3, r2
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	609a      	str	r2, [r3, #8]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004908:	2302      	movs	r3, #2
 800490a:	e046      	b.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d009      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a10      	ldr	r2, [pc, #64]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10c      	bne.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	4313      	orrs	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800

080049b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr

080049c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e03f      	b.n	8004a66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fd fdca 	bl	8002594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fc01 	bl	8005220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d130      	bne.n	8004aea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_UART_Transmit_IT+0x26>
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e029      	b.n	8004aec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Transmit_IT+0x38>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e022      	b.n	8004aec <HAL_UART_Transmit_IT+0x7e>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	88fa      	ldrh	r2, [r7, #6]
 8004ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2221      	movs	r2, #33	; 0x21
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ae4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
  }
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	4613      	mov	r3, r2
 8004b02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d11d      	bne.n	8004b4c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_UART_Receive_IT+0x26>
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e016      	b.n	8004b4e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Receive_IT+0x38>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e00f      	b.n	8004b4e <HAL_UART_Receive_IT+0x58>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f9e3 	bl	8004f0e <UART_Start_Receive_IT>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	e000      	b.n	8004b4e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_UART_IRQHandler+0x52>
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa93 	bl	80050ce <UART_Receive_IT>
      return;
 8004ba8:	e17b      	b.n	8004ea2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80b1 	beq.w	8004d14 <HAL_UART_IRQHandler+0x1bc>
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x70>
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80a6 	beq.w	8004d14 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_UART_IRQHandler+0x90>
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f043 0201 	orr.w	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_UART_IRQHandler+0xb0>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f043 0202 	orr.w	r2, r3, #2
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_UART_IRQHandler+0xd0>
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	f043 0204 	orr.w	r2, r3, #4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00f      	beq.n	8004c52 <HAL_UART_IRQHandler+0xfa>
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <HAL_UART_IRQHandler+0xee>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0208 	orr.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 811e 	beq.w	8004e98 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_UART_IRQHandler+0x11e>
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa2c 	bl	80050ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <HAL_UART_IRQHandler+0x146>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d031      	beq.n	8004d02 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f96e 	bl	8004f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d023      	beq.n	8004cfa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d013      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	4a76      	ldr	r2, [pc, #472]	; (8004ea8 <HAL_UART_IRQHandler+0x350>)
 8004cd0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd ff0a 	bl	8002af0 <HAL_DMA_Abort_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cec:	4610      	mov	r0, r2
 8004cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	e00e      	b.n	8004d10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f8da 	bl	8004eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	e00a      	b.n	8004d10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8d6 	bl	8004eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	e006      	b.n	8004d10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8d2 	bl	8004eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d0e:	e0c3      	b.n	8004e98 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	bf00      	nop
    return;
 8004d12:	e0c1      	b.n	8004e98 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	f040 80a1 	bne.w	8004e60 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 809b 	beq.w	8004e60 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8095 	beq.w	8004e60 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d04e      	beq.n	8004df8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d64:	8a3b      	ldrh	r3, [r7, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8098 	beq.w	8004e9c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d70:	8a3a      	ldrh	r2, [r7, #16]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	f080 8092 	bcs.w	8004e9c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8a3a      	ldrh	r2, [r7, #16]
 8004d7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d02b      	beq.n	8004de0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0210 	bic.w	r2, r2, #16
 8004dd4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fd fe4d 	bl	8002a7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f864 	bl	8004ebe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004df6:	e051      	b.n	8004e9c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d047      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004e10:	8a7b      	ldrh	r3, [r7, #18]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d044      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e24:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0210 	bic.w	r2, r2, #16
 8004e52:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e54:	8a7b      	ldrh	r3, [r7, #18]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f830 	bl	8004ebe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e5e:	e01f      	b.n	8004ea0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d008      	beq.n	8004e7c <HAL_UART_IRQHandler+0x324>
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8c3 	bl	8005000 <UART_Transmit_IT>
    return;
 8004e7a:	e012      	b.n	8004ea2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00d      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x34a>
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f904 	bl	800509e <UART_EndTransmit_IT>
    return;
 8004e96:	e004      	b.n	8004ea2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004e98:	bf00      	nop
 8004e9a:	e002      	b.n	8004ea2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e9c:	bf00      	nop
 8004e9e:	e000      	b.n	8004ea2 <HAL_UART_IRQHandler+0x34a>
      return;
 8004ea0:	bf00      	nop
  }
}
 8004ea2:	3728      	adds	r7, #40	; 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	08004fd9 	.word	0x08004fd9

08004eac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	4313      	orrs	r3, r2
 8004f02:	b2db      	uxtb	r3, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	88fa      	ldrh	r2, [r7, #6]
 8004f26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2222      	movs	r2, #34	; 0x22
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f52:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0220 	orr.w	r2, r2, #32
 8004f72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0210 	bic.w	r2, r2, #16
 8004fbe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr

08004fd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff ff5a 	bl	8004eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b21      	cmp	r3, #33	; 0x21
 8005012:	d13e      	bne.n	8005092 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501c:	d114      	bne.n	8005048 <UART_Transmit_IT+0x48>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d110      	bne.n	8005048 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800503a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	1c9a      	adds	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	621a      	str	r2, [r3, #32]
 8005046:	e008      	b.n	800505a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6211      	str	r1, [r2, #32]
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4619      	mov	r1, r3
 8005068:	84d1      	strh	r1, [r2, #38]	; 0x26
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10f      	bne.n	800508e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800507c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800508c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	e000      	b.n	8005094 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005092:	2302      	movs	r3, #2
  }
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd f808 	bl	80020d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b22      	cmp	r3, #34	; 0x22
 80050e0:	f040 8099 	bne.w	8005216 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ec:	d117      	bne.n	800511e <UART_Receive_IT+0x50>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d113      	bne.n	800511e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510c:	b29a      	uxth	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
 800511c:	e026      	b.n	800516c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005130:	d007      	beq.n	8005142 <UART_Receive_IT+0x74>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <UART_Receive_IT+0x82>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e008      	b.n	8005162 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800515c:	b2da      	uxtb	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4619      	mov	r1, r3
 800517a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800517c:	2b00      	cmp	r3, #0
 800517e:	d148      	bne.n	8005212 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0220 	bic.w	r2, r2, #32
 800518e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800519e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d123      	bne.n	8005208 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0210 	bic.w	r2, r2, #16
 80051d4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d10a      	bne.n	80051fa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fe5c 	bl	8004ebe <HAL_UARTEx_RxEventCallback>
 8005206:	e002      	b.n	800520e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fc ff27 	bl	800205c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e002      	b.n	8005218 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e000      	b.n	8005218 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005216:	2302      	movs	r3, #2
  }
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800525a:	f023 030c 	bic.w	r3, r3, #12
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	430b      	orrs	r3, r1
 8005266:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2c      	ldr	r2, [pc, #176]	; (8005334 <UART_SetConfig+0x114>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d103      	bne.n	8005290 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fe fa46 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	e002      	b.n	8005296 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fe fa2e 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8005294:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009a      	lsls	r2, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ac:	4a22      	ldr	r2, [pc, #136]	; (8005338 <UART_SetConfig+0x118>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	0119      	lsls	r1, r3, #4
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	009a      	lsls	r2, r3, #2
 80052c0:	441a      	add	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80052cc:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <UART_SetConfig+0x118>)
 80052ce:	fba3 0302 	umull	r0, r3, r3, r2
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	2064      	movs	r0, #100	; 0x64
 80052d6:	fb00 f303 	mul.w	r3, r0, r3
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	3332      	adds	r3, #50	; 0x32
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <UART_SetConfig+0x118>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ec:	4419      	add	r1, r3
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009a      	lsls	r2, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	fbb2 f2f3 	udiv	r2, r2, r3
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <UART_SetConfig+0x118>)
 8005306:	fba3 0302 	umull	r0, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2064      	movs	r0, #100	; 0x64
 800530e:	fb00 f303 	mul.w	r3, r0, r3
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	3332      	adds	r3, #50	; 0x32
 8005318:	4a07      	ldr	r2, [pc, #28]	; (8005338 <UART_SetConfig+0x118>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f003 020f 	and.w	r2, r3, #15
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	440a      	add	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40013800 	.word	0x40013800
 8005338:	51eb851f 	.word	0x51eb851f

0800533c <atoi>:
 800533c:	220a      	movs	r2, #10
 800533e:	2100      	movs	r1, #0
 8005340:	f000 b8ae 	b.w	80054a0 <strtol>

08005344 <__errno>:
 8005344:	4b01      	ldr	r3, [pc, #4]	; (800534c <__errno+0x8>)
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	200003e0 	.word	0x200003e0

08005350 <__libc_init_array>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	2600      	movs	r6, #0
 8005354:	4d0c      	ldr	r5, [pc, #48]	; (8005388 <__libc_init_array+0x38>)
 8005356:	4c0d      	ldr	r4, [pc, #52]	; (800538c <__libc_init_array+0x3c>)
 8005358:	1b64      	subs	r4, r4, r5
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	42a6      	cmp	r6, r4
 800535e:	d109      	bne.n	8005374 <__libc_init_array+0x24>
 8005360:	f000 f8a8 	bl	80054b4 <_init>
 8005364:	2600      	movs	r6, #0
 8005366:	4d0a      	ldr	r5, [pc, #40]	; (8005390 <__libc_init_array+0x40>)
 8005368:	4c0a      	ldr	r4, [pc, #40]	; (8005394 <__libc_init_array+0x44>)
 800536a:	1b64      	subs	r4, r4, r5
 800536c:	10a4      	asrs	r4, r4, #2
 800536e:	42a6      	cmp	r6, r4
 8005370:	d105      	bne.n	800537e <__libc_init_array+0x2e>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	f855 3b04 	ldr.w	r3, [r5], #4
 8005378:	4798      	blx	r3
 800537a:	3601      	adds	r6, #1
 800537c:	e7ee      	b.n	800535c <__libc_init_array+0xc>
 800537e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005382:	4798      	blx	r3
 8005384:	3601      	adds	r6, #1
 8005386:	e7f2      	b.n	800536e <__libc_init_array+0x1e>
 8005388:	080055f8 	.word	0x080055f8
 800538c:	080055f8 	.word	0x080055f8
 8005390:	080055f8 	.word	0x080055f8
 8005394:	08005600 	.word	0x08005600

08005398 <memset>:
 8005398:	4603      	mov	r3, r0
 800539a:	4402      	add	r2, r0
 800539c:	4293      	cmp	r3, r2
 800539e:	d100      	bne.n	80053a2 <memset+0xa>
 80053a0:	4770      	bx	lr
 80053a2:	f803 1b01 	strb.w	r1, [r3], #1
 80053a6:	e7f9      	b.n	800539c <memset+0x4>

080053a8 <_strtol_l.constprop.0>:
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ae:	4680      	mov	r8, r0
 80053b0:	d001      	beq.n	80053b6 <_strtol_l.constprop.0+0xe>
 80053b2:	2b24      	cmp	r3, #36	; 0x24
 80053b4:	d906      	bls.n	80053c4 <_strtol_l.constprop.0+0x1c>
 80053b6:	f7ff ffc5 	bl	8005344 <__errno>
 80053ba:	2316      	movs	r3, #22
 80053bc:	6003      	str	r3, [r0, #0]
 80053be:	2000      	movs	r0, #0
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	460d      	mov	r5, r1
 80053c6:	4f35      	ldr	r7, [pc, #212]	; (800549c <_strtol_l.constprop.0+0xf4>)
 80053c8:	4628      	mov	r0, r5
 80053ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053ce:	5de6      	ldrb	r6, [r4, r7]
 80053d0:	f016 0608 	ands.w	r6, r6, #8
 80053d4:	d1f8      	bne.n	80053c8 <_strtol_l.constprop.0+0x20>
 80053d6:	2c2d      	cmp	r4, #45	; 0x2d
 80053d8:	d12f      	bne.n	800543a <_strtol_l.constprop.0+0x92>
 80053da:	2601      	movs	r6, #1
 80053dc:	782c      	ldrb	r4, [r5, #0]
 80053de:	1c85      	adds	r5, r0, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d057      	beq.n	8005494 <_strtol_l.constprop.0+0xec>
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d109      	bne.n	80053fc <_strtol_l.constprop.0+0x54>
 80053e8:	2c30      	cmp	r4, #48	; 0x30
 80053ea:	d107      	bne.n	80053fc <_strtol_l.constprop.0+0x54>
 80053ec:	7828      	ldrb	r0, [r5, #0]
 80053ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80053f2:	2858      	cmp	r0, #88	; 0x58
 80053f4:	d149      	bne.n	800548a <_strtol_l.constprop.0+0xe2>
 80053f6:	2310      	movs	r3, #16
 80053f8:	786c      	ldrb	r4, [r5, #1]
 80053fa:	3502      	adds	r5, #2
 80053fc:	2700      	movs	r7, #0
 80053fe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005402:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005406:	fbbe f9f3 	udiv	r9, lr, r3
 800540a:	4638      	mov	r0, r7
 800540c:	fb03 ea19 	mls	sl, r3, r9, lr
 8005410:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005414:	f1bc 0f09 	cmp.w	ip, #9
 8005418:	d814      	bhi.n	8005444 <_strtol_l.constprop.0+0x9c>
 800541a:	4664      	mov	r4, ip
 800541c:	42a3      	cmp	r3, r4
 800541e:	dd22      	ble.n	8005466 <_strtol_l.constprop.0+0xbe>
 8005420:	2f00      	cmp	r7, #0
 8005422:	db1d      	blt.n	8005460 <_strtol_l.constprop.0+0xb8>
 8005424:	4581      	cmp	r9, r0
 8005426:	d31b      	bcc.n	8005460 <_strtol_l.constprop.0+0xb8>
 8005428:	d101      	bne.n	800542e <_strtol_l.constprop.0+0x86>
 800542a:	45a2      	cmp	sl, r4
 800542c:	db18      	blt.n	8005460 <_strtol_l.constprop.0+0xb8>
 800542e:	2701      	movs	r7, #1
 8005430:	fb00 4003 	mla	r0, r0, r3, r4
 8005434:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005438:	e7ea      	b.n	8005410 <_strtol_l.constprop.0+0x68>
 800543a:	2c2b      	cmp	r4, #43	; 0x2b
 800543c:	bf04      	itt	eq
 800543e:	782c      	ldrbeq	r4, [r5, #0]
 8005440:	1c85      	addeq	r5, r0, #2
 8005442:	e7cd      	b.n	80053e0 <_strtol_l.constprop.0+0x38>
 8005444:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005448:	f1bc 0f19 	cmp.w	ip, #25
 800544c:	d801      	bhi.n	8005452 <_strtol_l.constprop.0+0xaa>
 800544e:	3c37      	subs	r4, #55	; 0x37
 8005450:	e7e4      	b.n	800541c <_strtol_l.constprop.0+0x74>
 8005452:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005456:	f1bc 0f19 	cmp.w	ip, #25
 800545a:	d804      	bhi.n	8005466 <_strtol_l.constprop.0+0xbe>
 800545c:	3c57      	subs	r4, #87	; 0x57
 800545e:	e7dd      	b.n	800541c <_strtol_l.constprop.0+0x74>
 8005460:	f04f 37ff 	mov.w	r7, #4294967295
 8005464:	e7e6      	b.n	8005434 <_strtol_l.constprop.0+0x8c>
 8005466:	2f00      	cmp	r7, #0
 8005468:	da07      	bge.n	800547a <_strtol_l.constprop.0+0xd2>
 800546a:	2322      	movs	r3, #34	; 0x22
 800546c:	4670      	mov	r0, lr
 800546e:	f8c8 3000 	str.w	r3, [r8]
 8005472:	2a00      	cmp	r2, #0
 8005474:	d0a4      	beq.n	80053c0 <_strtol_l.constprop.0+0x18>
 8005476:	1e69      	subs	r1, r5, #1
 8005478:	e005      	b.n	8005486 <_strtol_l.constprop.0+0xde>
 800547a:	b106      	cbz	r6, 800547e <_strtol_l.constprop.0+0xd6>
 800547c:	4240      	negs	r0, r0
 800547e:	2a00      	cmp	r2, #0
 8005480:	d09e      	beq.n	80053c0 <_strtol_l.constprop.0+0x18>
 8005482:	2f00      	cmp	r7, #0
 8005484:	d1f7      	bne.n	8005476 <_strtol_l.constprop.0+0xce>
 8005486:	6011      	str	r1, [r2, #0]
 8005488:	e79a      	b.n	80053c0 <_strtol_l.constprop.0+0x18>
 800548a:	2430      	movs	r4, #48	; 0x30
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1b5      	bne.n	80053fc <_strtol_l.constprop.0+0x54>
 8005490:	2308      	movs	r3, #8
 8005492:	e7b3      	b.n	80053fc <_strtol_l.constprop.0+0x54>
 8005494:	2c30      	cmp	r4, #48	; 0x30
 8005496:	d0a9      	beq.n	80053ec <_strtol_l.constprop.0+0x44>
 8005498:	230a      	movs	r3, #10
 800549a:	e7af      	b.n	80053fc <_strtol_l.constprop.0+0x54>
 800549c:	080054f5 	.word	0x080054f5

080054a0 <strtol>:
 80054a0:	4613      	mov	r3, r2
 80054a2:	460a      	mov	r2, r1
 80054a4:	4601      	mov	r1, r0
 80054a6:	4802      	ldr	r0, [pc, #8]	; (80054b0 <strtol+0x10>)
 80054a8:	6800      	ldr	r0, [r0, #0]
 80054aa:	f7ff bf7d 	b.w	80053a8 <_strtol_l.constprop.0>
 80054ae:	bf00      	nop
 80054b0:	200003e0 	.word	0x200003e0

080054b4 <_init>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr

080054c0 <_fini>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	bf00      	nop
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr

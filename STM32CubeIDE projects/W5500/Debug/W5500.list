
W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c9c  08003c9c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c9c  08003c9c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c9c  08003c9c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000070  08003d14  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08003d14  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2a7  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d8  00000000  00000000  0002f33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00031a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  000329d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193b0  00000000  00000000  000338a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001000c  00000000  00000000  0004cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a76  00000000  00000000  0005cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e66d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  000e6724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c5c 	.word	0x08003c5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003c5c 	.word	0x08003c5c

0800014c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
//#pragma once
#include "W5500.h"

W5500::W5500(
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	807b      	strh	r3, [r7, #2]
		SPI_HandleTypeDef* hspi_m,
		GPIO_TypeDef* W5500_CS_GPIO_Port_m,
		uint16_t W5500_CS_Pin_m,
		GPIO_TypeDef* W5500_RST_GPIO_Port_m,
		uint16_t W5500_RST_Pin_m
		)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	3310      	adds	r3, #16
 800015e:	2240      	movs	r2, #64	; 0x40
 8000160:	2100      	movs	r1, #0
 8000162:	4618      	mov	r0, r3
 8000164:	f003 fd72 	bl	8003c4c <memset>
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	3350      	adds	r3, #80	; 0x50
 800016c:	2240      	movs	r2, #64	; 0x40
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f003 fd6b 	bl	8003c4c <memset>
{
	hspi_w = hspi_m;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	601a      	str	r2, [r3, #0]
	W5500_CS_GPIO_Port_w = W5500_CS_GPIO_Port_m;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	687a      	ldr	r2, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]
	W5500_CS_Pin_w = W5500_CS_Pin_m;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	887a      	ldrh	r2, [r7, #2]
 8000186:	819a      	strh	r2, [r3, #12]
	W5500_RST_GPIO_Port_w = W5500_RST_GPIO_Port_m;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	69ba      	ldr	r2, [r7, #24]
 800018c:	609a      	str	r2, [r3, #8]
	W5500_RST_Pin_w = W5500_RST_Pin_m;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	8bba      	ldrh	r2, [r7, #28]
 8000192:	81da      	strh	r2, [r3, #14]
}
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	4618      	mov	r0, r3
 8000198:	3710      	adds	r7, #16
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}

0800019e <_ZN5W55008switchOnEv>:
	HAL_Delay(1);
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
}

void W5500::switchOn()
{
 800019e:	b580      	push	{r7, lr}
 80001a0:	b082      	sub	sp, #8
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	6898      	ldr	r0, [r3, #8]
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	89db      	ldrh	r3, [r3, #14]
 80001ae:	2201      	movs	r2, #1
 80001b0:	4619      	mov	r1, r3
 80001b2:	f001 fc49 	bl	8001a48 <HAL_GPIO_WritePin>
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}

080001be <_ZN5W550011readVersionEv>:
{
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_RESET);
}

uint8_t W5500::readVersion()
{
 80001be:	b580      	push	{r7, lr}
 80001c0:	b084      	sub	sp, #16
 80001c2:	af02      	add	r7, sp, #8
 80001c4:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_VERSIONR;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2239      	movs	r2, #57	; 0x39
 80001d0:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2200      	movs	r2, #0
 80001d6:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	6858      	ldr	r0, [r3, #4]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	899b      	ldrh	r3, [r3, #12]
 80001e0:	2200      	movs	r2, #0
 80001e2:	4619      	mov	r1, r3
 80001e4:	f001 fc30 	bl	8001a48 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	6818      	ldr	r0, [r3, #0]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f103 0110 	add.w	r1, r3, #16
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	2304      	movs	r3, #4
 80001fe:	f002 f8fd 	bl	80023fc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	6858      	ldr	r0, [r3, #4]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	899b      	ldrh	r3, [r3, #12]
 800020a:	2201      	movs	r2, #1
 800020c:	4619      	mov	r1, r3
 800020e:	f001 fc1b 	bl	8001a48 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <_ZN5W55007readSHAEPh>:

void W5500::readSHA(uint8_t* regSHA)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af02      	add	r7, sp, #8
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	mosiBytes_w[0] = 0;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2200      	movs	r2, #0
 800022e:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_SHAR;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2209      	movs	r2, #9
 8000234:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6858      	ldr	r0, [r3, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	899b      	ldrh	r3, [r3, #12]
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	f001 fbfe 	bl	8001a48 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 9, 100);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f103 0110 	add.w	r1, r3, #16
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800025c:	2364      	movs	r3, #100	; 0x64
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2309      	movs	r3, #9
 8000262:	f002 f8cb 	bl	80023fc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	6858      	ldr	r0, [r3, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	899b      	ldrh	r3, [r3, #12]
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	f001 fbe9 	bl	8001a48 <HAL_GPIO_WritePin>
	regSHA[0] = misoBytes_w[3];
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	701a      	strb	r2, [r3, #0]
	regSHA[1] = misoBytes_w[4];
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	3301      	adds	r3, #1
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800028a:	701a      	strb	r2, [r3, #0]
	regSHA[2] = misoBytes_w[5];
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	3302      	adds	r3, #2
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8000296:	701a      	strb	r2, [r3, #0]
	regSHA[3] = misoBytes_w[6];
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	3303      	adds	r3, #3
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80002a2:	701a      	strb	r2, [r3, #0]
	regSHA[4] = misoBytes_w[7];
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	3304      	adds	r3, #4
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 80002ae:	701a      	strb	r2, [r3, #0]
	regSHA[5] = misoBytes_w[8];
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	3305      	adds	r3, #5
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 80002ba:	701a      	strb	r2, [r3, #0]
	return;
 80002bc:	bf00      	nop
}
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <_Z10writeFLASHv>:
extern struct CommonRegisterBlock crb;
extern struct SocketRegisterBlock srb0, srb1, srb2, srb3, srb4, srb5, srb6, srb7;

// Запись во FLASH
void writeFLASH()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
	// Открываем доступ к FLASH (она закрыта от случайной записи)
	HAL_FLASH_Unlock();
 80002ca:	f001 f8a9 	bl	8001420 <HAL_FLASH_Unlock>

	// Объявляем структуру, необходимую для функции стирания страницы
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES; // Стираем постранично
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
	//eraseInit.Banks = FLASH_BANK_1;
	eraseInit.PageAddress = CONFIG_FLASHPAGE; // Адрес страницы для стирания
 80002d2:	4b20      	ldr	r3, [pc, #128]	; (8000354 <_Z10writeFLASHv+0x90>)
 80002d4:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = 1; // Число страниц = 1
 80002d6:	2301      	movs	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]

	// Объявляем переменную для сохранения результата стирания FLASH (функции HAL_FLASHEx_Erase()), д.б. 0xFFFFFFFF (не используем)
	uint32_t statusFLASHerase {0};
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]

	// Очищаем страницу
	HAL_FLASHEx_Erase(&eraseInit, &statusFLASHerase);
 80002de:	1d3a      	adds	r2, r7, #4
 80002e0:	f107 0308 	add.w	r3, r7, #8
 80002e4:	4611      	mov	r1, r2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 f982 	bl	80015f0 <HAL_FLASHEx_Erase>

	// Записываем блок Common Register
	writeBlockFLASH(CONFIG_FLASHPAGE, (uint64_t*) &crb, sizeof(crb)/8);
 80002ec:	2206      	movs	r2, #6
 80002ee:	491a      	ldr	r1, [pc, #104]	; (8000358 <_Z10writeFLASHv+0x94>)
 80002f0:	4818      	ldr	r0, [pc, #96]	; (8000354 <_Z10writeFLASHv+0x90>)
 80002f2:	f000 f853 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 0 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 64, (uint64_t*) &srb0, sizeof(srb0)/8);
 80002f6:	2206      	movs	r2, #6
 80002f8:	4918      	ldr	r1, [pc, #96]	; (800035c <_Z10writeFLASHv+0x98>)
 80002fa:	4819      	ldr	r0, [pc, #100]	; (8000360 <_Z10writeFLASHv+0x9c>)
 80002fc:	f000 f84e 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 1 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 120, (uint64_t*) &srb1, sizeof(srb1)/8);
 8000300:	2206      	movs	r2, #6
 8000302:	4918      	ldr	r1, [pc, #96]	; (8000364 <_Z10writeFLASHv+0xa0>)
 8000304:	4818      	ldr	r0, [pc, #96]	; (8000368 <_Z10writeFLASHv+0xa4>)
 8000306:	f000 f849 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 2 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 176, (uint64_t*) &srb2, sizeof(srb2)/8);
 800030a:	2206      	movs	r2, #6
 800030c:	4917      	ldr	r1, [pc, #92]	; (800036c <_Z10writeFLASHv+0xa8>)
 800030e:	4818      	ldr	r0, [pc, #96]	; (8000370 <_Z10writeFLASHv+0xac>)
 8000310:	f000 f844 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 3 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 232, (uint64_t*) &srb3, sizeof(srb3)/8);
 8000314:	2206      	movs	r2, #6
 8000316:	4917      	ldr	r1, [pc, #92]	; (8000374 <_Z10writeFLASHv+0xb0>)
 8000318:	4817      	ldr	r0, [pc, #92]	; (8000378 <_Z10writeFLASHv+0xb4>)
 800031a:	f000 f83f 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 4 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 288, (uint64_t*) &srb4, sizeof(srb4)/8);
 800031e:	2206      	movs	r2, #6
 8000320:	4916      	ldr	r1, [pc, #88]	; (800037c <_Z10writeFLASHv+0xb8>)
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <_Z10writeFLASHv+0xbc>)
 8000324:	f000 f83a 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 5 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 344, (uint64_t*) &srb5, sizeof(srb5)/8);
 8000328:	2206      	movs	r2, #6
 800032a:	4916      	ldr	r1, [pc, #88]	; (8000384 <_Z10writeFLASHv+0xc0>)
 800032c:	4816      	ldr	r0, [pc, #88]	; (8000388 <_Z10writeFLASHv+0xc4>)
 800032e:	f000 f835 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 6 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 400, (uint64_t*) &srb6, sizeof(srb6)/8);
 8000332:	2206      	movs	r2, #6
 8000334:	4915      	ldr	r1, [pc, #84]	; (800038c <_Z10writeFLASHv+0xc8>)
 8000336:	4816      	ldr	r0, [pc, #88]	; (8000390 <_Z10writeFLASHv+0xcc>)
 8000338:	f000 f830 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 7 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 456, (uint64_t*) &srb7, sizeof(srb7)/8);
 800033c:	2206      	movs	r2, #6
 800033e:	4915      	ldr	r1, [pc, #84]	; (8000394 <_Z10writeFLASHv+0xd0>)
 8000340:	4815      	ldr	r0, [pc, #84]	; (8000398 <_Z10writeFLASHv+0xd4>)
 8000342:	f000 f82b 	bl	800039c <_Z15writeBlockFLASHmPyj>

	// Закрываем доступ к FLASH, от случайной записи
	HAL_FLASH_Lock();
 8000346:	f001 f891 	bl	800146c <HAL_FLASH_Lock>
	return;
 800034a:	bf00      	nop
}
 800034c:	3718      	adds	r7, #24
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	0801fc00 	.word	0x0801fc00
 8000358:	20000000 	.word	0x20000000
 800035c:	200001c0 	.word	0x200001c0
 8000360:	0801fc40 	.word	0x0801fc40
 8000364:	200001f0 	.word	0x200001f0
 8000368:	0801fc78 	.word	0x0801fc78
 800036c:	20000220 	.word	0x20000220
 8000370:	0801fcb0 	.word	0x0801fcb0
 8000374:	20000250 	.word	0x20000250
 8000378:	0801fce8 	.word	0x0801fce8
 800037c:	20000280 	.word	0x20000280
 8000380:	0801fd20 	.word	0x0801fd20
 8000384:	200002b0 	.word	0x200002b0
 8000388:	0801fd58 	.word	0x0801fd58
 800038c:	200002e0 	.word	0x200002e0
 8000390:	0801fd90 	.word	0x0801fd90
 8000394:	20000030 	.word	0x20000030
 8000398:	0801fdc8 	.word	0x0801fdc8

0800039c <_Z15writeBlockFLASHmPyj>:

// Запись области во FLASH, по 64бита (doubleword)
void writeBlockFLASH(uint32_t address, uint64_t* pData64, unsigned int size)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
	// Объявляем переменную для сохранения результата записи во FLASH (функции HAL_FLASH_Program())
	HAL_StatusTypeDef statusFLASHprogram;

	// Записываем нужную область памяти
	for (unsigned int i = 0; i < size; i++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	697a      	ldr	r2, [r7, #20]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d217      	bcs.n	80003e4 <_Z15writeBlockFLASHmPyj+0x48>
	{
		statusFLASHprogram = HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD, address + i*8, *(pData64++));
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	00da      	lsls	r2, r3, #3
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	18d1      	adds	r1, r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	f103 0208 	add.w	r2, r3, #8
 80003c2:	60ba      	str	r2, [r7, #8]
 80003c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003c8:	2003      	movs	r0, #3
 80003ca:	f000 ffb9 	bl	8001340 <HAL_FLASH_Program>
 80003ce:	4603      	mov	r3, r0
 80003d0:	74fb      	strb	r3, [r7, #19]
		if (statusFLASHprogram != HAL_OK) break; // Если что-то пошло не так - выходим из цикла
 80003d2:	7cfb      	ldrb	r3, [r7, #19]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d103      	bne.n	80003e0 <_Z15writeBlockFLASHmPyj+0x44>
	for (unsigned int i = 0; i < size; i++)
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	3301      	adds	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e7e5      	b.n	80003ac <_Z15writeBlockFLASHmPyj+0x10>
		if (statusFLASHprogram != HAL_OK) break; // Если что-то пошло не так - выходим из цикла
 80003e0:	bf00      	nop
	}
	return;
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
}
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <_Z9readFLASHv>:

// Чтение из FLASH
void readFLASH()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	// Читаем блок Common Register
	readBlockFlash(CONFIG_FLASHPAGE, (uint32_t*) &crb, sizeof(crb)/4);
 80003f0:	220c      	movs	r2, #12
 80003f2:	4917      	ldr	r1, [pc, #92]	; (8000450 <_Z9readFLASHv+0x64>)
 80003f4:	4817      	ldr	r0, [pc, #92]	; (8000454 <_Z9readFLASHv+0x68>)
 80003f6:	f000 f84f 	bl	8000498 <_Z14readBlockFlashmPmj>

	// Читаем блок Socket 0 Register
	readBlockFlash(CONFIG_FLASHPAGE + 64, (uint32_t*) &srb0, sizeof(srb0)/4);
 80003fa:	220c      	movs	r2, #12
 80003fc:	4916      	ldr	r1, [pc, #88]	; (8000458 <_Z9readFLASHv+0x6c>)
 80003fe:	4817      	ldr	r0, [pc, #92]	; (800045c <_Z9readFLASHv+0x70>)
 8000400:	f000 f84a 	bl	8000498 <_Z14readBlockFlashmPmj>

	// Читаем блок Socket 1 Register
	readBlockFlash(CONFIG_FLASHPAGE + 120, (uint32_t*) &srb1, sizeof(srb1)/4);
 8000404:	220c      	movs	r2, #12
 8000406:	4916      	ldr	r1, [pc, #88]	; (8000460 <_Z9readFLASHv+0x74>)
 8000408:	4816      	ldr	r0, [pc, #88]	; (8000464 <_Z9readFLASHv+0x78>)
 800040a:	f000 f845 	bl	8000498 <_Z14readBlockFlashmPmj>

	// Читаем блок Socket 2 Register
	readBlockFlash(CONFIG_FLASHPAGE + 176, (uint32_t*) &srb2, sizeof(srb2)/4);
 800040e:	220c      	movs	r2, #12
 8000410:	4915      	ldr	r1, [pc, #84]	; (8000468 <_Z9readFLASHv+0x7c>)
 8000412:	4816      	ldr	r0, [pc, #88]	; (800046c <_Z9readFLASHv+0x80>)
 8000414:	f000 f840 	bl	8000498 <_Z14readBlockFlashmPmj>

	// Читаем блок Socket 3 Register
	readBlockFlash(CONFIG_FLASHPAGE + 232, (uint32_t*) &srb3, sizeof(srb3)/4);
 8000418:	220c      	movs	r2, #12
 800041a:	4915      	ldr	r1, [pc, #84]	; (8000470 <_Z9readFLASHv+0x84>)
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <_Z9readFLASHv+0x88>)
 800041e:	f000 f83b 	bl	8000498 <_Z14readBlockFlashmPmj>

	// Читаем блок Socket 4 Register
	readBlockFlash(CONFIG_FLASHPAGE + 288, (uint32_t*) &srb4, sizeof(srb4)/4);
 8000422:	220c      	movs	r2, #12
 8000424:	4914      	ldr	r1, [pc, #80]	; (8000478 <_Z9readFLASHv+0x8c>)
 8000426:	4815      	ldr	r0, [pc, #84]	; (800047c <_Z9readFLASHv+0x90>)
 8000428:	f000 f836 	bl	8000498 <_Z14readBlockFlashmPmj>

	// Читаем блок Socket 5 Register
	readBlockFlash(CONFIG_FLASHPAGE + 344, (uint32_t*) &srb5, sizeof(srb5)/4);
 800042c:	220c      	movs	r2, #12
 800042e:	4914      	ldr	r1, [pc, #80]	; (8000480 <_Z9readFLASHv+0x94>)
 8000430:	4814      	ldr	r0, [pc, #80]	; (8000484 <_Z9readFLASHv+0x98>)
 8000432:	f000 f831 	bl	8000498 <_Z14readBlockFlashmPmj>

	// Читаем блок Socket 6 Register
	readBlockFlash(CONFIG_FLASHPAGE + 400, (uint32_t*) &srb6, sizeof(srb6)/4);
 8000436:	220c      	movs	r2, #12
 8000438:	4913      	ldr	r1, [pc, #76]	; (8000488 <_Z9readFLASHv+0x9c>)
 800043a:	4814      	ldr	r0, [pc, #80]	; (800048c <_Z9readFLASHv+0xa0>)
 800043c:	f000 f82c 	bl	8000498 <_Z14readBlockFlashmPmj>

	// Читаем блок Socket 7 Register
	readBlockFlash(CONFIG_FLASHPAGE + 456, (uint32_t*) &srb7, sizeof(srb7)/4);
 8000440:	220c      	movs	r2, #12
 8000442:	4913      	ldr	r1, [pc, #76]	; (8000490 <_Z9readFLASHv+0xa4>)
 8000444:	4813      	ldr	r0, [pc, #76]	; (8000494 <_Z9readFLASHv+0xa8>)
 8000446:	f000 f827 	bl	8000498 <_Z14readBlockFlashmPmj>

	return;
 800044a:	bf00      	nop
}
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000000 	.word	0x20000000
 8000454:	0801fc00 	.word	0x0801fc00
 8000458:	200001c0 	.word	0x200001c0
 800045c:	0801fc40 	.word	0x0801fc40
 8000460:	200001f0 	.word	0x200001f0
 8000464:	0801fc78 	.word	0x0801fc78
 8000468:	20000220 	.word	0x20000220
 800046c:	0801fcb0 	.word	0x0801fcb0
 8000470:	20000250 	.word	0x20000250
 8000474:	0801fce8 	.word	0x0801fce8
 8000478:	20000280 	.word	0x20000280
 800047c:	0801fd20 	.word	0x0801fd20
 8000480:	200002b0 	.word	0x200002b0
 8000484:	0801fd58 	.word	0x0801fd58
 8000488:	200002e0 	.word	0x200002e0
 800048c:	0801fd90 	.word	0x0801fd90
 8000490:	20000030 	.word	0x20000030
 8000494:	0801fdc8 	.word	0x0801fdc8

08000498 <_Z14readBlockFlashmPmj>:

// Чтение области из FLASH
void readBlockFlash(uint32_t address, uint32_t* pData32, unsigned int size)
{
 8000498:	b480      	push	{r7}
 800049a:	b087      	sub	sp, #28
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
	for (unsigned int i = 0; i < size; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d20e      	bcs.n	80004ce <_Z14readBlockFlashmPmj+0x36>
	{
		*(pData32 + i) = *((volatile uint32_t*)(address+i*4));
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	009a      	lsls	r2, r3, #2
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	4413      	add	r3, r2
 80004b8:	4619      	mov	r1, r3
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	4413      	add	r3, r2
 80004c2:	680a      	ldr	r2, [r1, #0]
 80004c4:	601a      	str	r2, [r3, #0]
	for (unsigned int i = 0; i < size; i++)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	e7ec      	b.n	80004a8 <_Z14readBlockFlashmPmj+0x10>
	}
	return;
 80004ce:	bf00      	nop
}
 80004d0:	371c      	adds	r7, #28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <_ZN10RingBufferC1Ev>:
#define RING_BUFFER_SIZE 8

class RingBuffer
{
public:
	RingBuffer()
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	{
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	741a      	strb	r2, [r3, #16]
		static uint8_t buffer[RING_BUFFER_SIZE] {0};
		bufferStart = buffer;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <_ZN10RingBufferC1Ev+0x4c>)
 8000502:	601a      	str	r2, [r3, #0]
		bufferEnd = buffer + RING_BUFFER_SIZE;
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <_ZN10RingBufferC1Ev+0x50>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	605a      	str	r2, [r3, #4]
		head = buffer;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <_ZN10RingBufferC1Ev+0x4c>)
 800050e:	609a      	str	r2, [r3, #8]
		tail = buffer;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a04      	ldr	r2, [pc, #16]	; (8000524 <_ZN10RingBufferC1Ev+0x4c>)
 8000514:	60da      	str	r2, [r3, #12]
	}
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	2000008c 	.word	0x2000008c
 8000528:	20000094 	.word	0x20000094

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0a6      	sub	sp, #152	; 0x98
 8000530:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fcc1 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f867 	bl	8000608 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f9d7 	bl	80008ec <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 800053e:	f000 f8b3 	bl	80006a8 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000542:	f000 f9a5 	bl	8000890 <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 8000546:	f000 f947 	bl	80007d8 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 800054a:	f000 f8e9 	bl	8000720 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit_IT(&huart1, rxHello, 20 );

  writeFLASH();
 800054e:	f7ff feb9 	bl	80002c4 <_Z10writeFLASHv>
  srb0.sNdipr1 = 1;
  srb0.sNdipr2 = 2;
  srb1.sNdipr1 = 1;
  srb2.sNdipr2 = 2;
  */
  readFLASH();
 8000552:	f7ff ff4b 	bl	80003ec <_Z9readFLASHv>

  // Cоздаем интерфейc c чипом W5500
  W5500 port1(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);
 8000556:	4638      	mov	r0, r7
 8000558:	2310      	movs	r3, #16
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <main+0xb8>)
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2320      	movs	r3, #32
 8000562:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <main+0xb8>)
 8000564:	4920      	ldr	r1, [pc, #128]	; (80005e8 <main+0xbc>)
 8000566:	f7ff fdf1 	bl	800014c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>

  // Включаем чип W5500
  port1.switchOn();
 800056a:	463b      	mov	r3, r7
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fe16 	bl	800019e <_ZN5W55008switchOnEv>

  // Разрешаем прием по UART
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	491d      	ldr	r1, [pc, #116]	; (80005ec <main+0xc0>)
 8000576:	481e      	ldr	r0, [pc, #120]	; (80005f0 <main+0xc4>)
 8000578:	f002 ff3d 	bl	80033f6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (rxDataIsReadyToParse)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0xc8>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <main+0x5e>
	  {
		  if(rxBytes[0] == 'A' && rxBytes[1] == 'T')
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <main+0xcc>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b41      	cmp	r3, #65	; 0x41
		  {

		  }
	  }

	  HAL_Delay(1000);
 800058a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058e:	f000 fcf5 	bl	8000f7c <HAL_Delay>
	  //HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
	  //HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
	  //HAL_SPI_TransmitReceive(&hspi1, mosiBytes, misoBytes, 10, 100);
	  //HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
	  txByte = port1.readVersion();
 8000592:	463b      	mov	r3, r7
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fe12 	bl	80001be <_ZN5W550011readVersionEv>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <main+0xd0>)
 80005a0:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	4815      	ldr	r0, [pc, #84]	; (8000600 <main+0xd4>)
 80005aa:	f001 fa4d 	bl	8001a48 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit_IT(&huart1, &txByte, 1 );
 80005ae:	2201      	movs	r2, #1
 80005b0:	4912      	ldr	r1, [pc, #72]	; (80005fc <main+0xd0>)
 80005b2:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0xc4>)
 80005b4:	f002 fedb 	bl	800336e <HAL_UART_Transmit_IT>

	  HAL_Delay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005bc:	f000 fcde 	bl	8000f7c <HAL_Delay>
	  //port1.writeSHA();
	  port1.readSHA(regSHA);
 80005c0:	463b      	mov	r3, r7
 80005c2:	4910      	ldr	r1, [pc, #64]	; (8000604 <main+0xd8>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe2b 	bl	8000220 <_ZN5W55007readSHAEPh>
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <main+0xd4>)
 80005d2:	f001 fa39 	bl	8001a48 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit_IT(&huart1, regSHA, 6 );
 80005d6:	2206      	movs	r2, #6
 80005d8:	490a      	ldr	r1, [pc, #40]	; (8000604 <main+0xd8>)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <main+0xc4>)
 80005dc:	f002 fec7 	bl	800336e <HAL_UART_Transmit_IT>
	  if (rxDataIsReadyToParse)
 80005e0:	e7cc      	b.n	800057c <main+0x50>
 80005e2:	bf00      	nop
 80005e4:	40011000 	.word	0x40011000
 80005e8:	20000094 	.word	0x20000094
 80005ec:	20000310 	.word	0x20000310
 80005f0:	2000017c 	.word	0x2000017c
 80005f4:	20000395 	.word	0x20000395
 80005f8:	20000314 	.word	0x20000314
 80005fc:	20000311 	.word	0x20000311
 8000600:	40010c00 	.word	0x40010c00
 8000604:	20000398 	.word	0x20000398

08000608 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b090      	sub	sp, #64	; 0x40
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fb18 	bl	8003c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000646:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fa33 	bl	8001abc <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf14      	ite	ne
 800065c:	2301      	movne	r3, #1
 800065e:	2300      	moveq	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000666:	f000 fa67 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2101      	movs	r1, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fc9b 	bl	8001fc0 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800069a:	f000 fa4d 	bl	8000b38 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3740      	adds	r7, #64	; 0x40
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006ae:	4a1b      	ldr	r2, [pc, #108]	; (800071c <_ZL12MX_SPI1_Initv+0x74>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006dc:	2208      	movs	r2, #8
 80006de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <_ZL12MX_SPI1_Initv+0x70>)
 80006fa:	f001 fdfb 	bl	80022f4 <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800070e:	f000 fa13 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000094 	.word	0x20000094
 800071c:	40013000 	.word	0x40013000

08000720 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 800073e:	4a25      	ldr	r2, [pc, #148]	; (80007d4 <_ZL12MX_TIM3_Initv+0xb4>)
 8000740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 8000744:	220b      	movs	r2, #11
 8000746:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 8000750:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000754:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000762:	481b      	ldr	r0, [pc, #108]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 8000764:	f002 f996 	bl	8002a94 <HAL_TIM_Base_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	bf14      	ite	ne
 800076e:	2301      	movne	r3, #1
 8000770:	2300      	moveq	r3, #0
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8000778:	f000 f9de 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4619      	mov	r1, r3
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 800078a:	f002 fb53 	bl	8002e34 <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 800079e:	f000 f9cb 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <_ZL12MX_TIM3_Initv+0xb0>)
 80007b0:	f002 fd20 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	bf14      	ite	ne
 80007ba:	2301      	movne	r3, #1
 80007bc:	2300      	moveq	r3, #0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 80007c4:	f000 f9b8 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000ec 	.word	0x200000ec
 80007d4:	40000400 	.word	0x40000400

080007d8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 80007f6:	4a25      	ldr	r2, [pc, #148]	; (800088c <_ZL12MX_TIM4_Initv+0xb4>)
 80007f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 8000808:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800080c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 800081c:	f002 f93a 	bl	8002a94 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	bf14      	ite	ne
 8000826:	2301      	movne	r3, #1
 8000828:	2300      	moveq	r3, #0
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8000830:	f000 f982 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4619      	mov	r1, r3
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 8000842:	f002 faf7 	bl	8002e34 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	bf14      	ite	ne
 800084c:	2301      	movne	r3, #1
 800084e:	2300      	moveq	r3, #0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8000856:	f000 f96f 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <_ZL12MX_TIM4_Initv+0xb0>)
 8000868:	f002 fcc4 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf14      	ite	ne
 8000872:	2301      	movne	r3, #1
 8000874:	2300      	moveq	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 800087c:	f000 f95c 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000134 	.word	0x20000134
 800088c:	40000800 	.word	0x40000800

08000890 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800089c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008c8:	f002 fd04 	bl	80032d4 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf14      	ite	ne
 80008d2:	2301      	movne	r3, #1
 80008d4:	2300      	moveq	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80008dc:	f000 f92c 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000017c 	.word	0x2000017c
 80008e8:	40013800 	.word	0x40013800

080008ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000900:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a3e      	ldr	r2, [pc, #248]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 8000906:	f043 0320 	orr.w	r3, r3, #32
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000930:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <_ZL12MX_GPIO_Initv+0x114>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, W5500_RST_Pin|W5500_CS_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2130      	movs	r1, #48	; 0x30
 8000964:	4827      	ldr	r0, [pc, #156]	; (8000a04 <_ZL12MX_GPIO_Initv+0x118>)
 8000966:	f001 f86f 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000970:	4825      	ldr	r0, [pc, #148]	; (8000a08 <_ZL12MX_GPIO_Initv+0x11c>)
 8000972:	f001 f869 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8000976:	2310      	movs	r3, #16
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <_ZL12MX_GPIO_Initv+0x120>)
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	4821      	ldr	r0, [pc, #132]	; (8000a10 <_ZL12MX_GPIO_Initv+0x124>)
 800098a:	f000 fed9 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 800098e:	2330      	movs	r3, #48	; 0x30
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2302      	movs	r3, #2
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	4817      	ldr	r0, [pc, #92]	; (8000a04 <_ZL12MX_GPIO_Initv+0x118>)
 80009a6:	f000 fecb 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009b0:	2311      	movs	r3, #17
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4619      	mov	r1, r3
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <_ZL12MX_GPIO_Initv+0x11c>)
 80009c4:	f000 febc 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 80009c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4619      	mov	r1, r3
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <_ZL12MX_GPIO_Initv+0x11c>)
 80009e2:	f000 fead 	bl	8001740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	200a      	movs	r0, #10
 80009ec:	f000 fbc1 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009f0:	200a      	movs	r0, #10
 80009f2:	f000 fbda 	bl	80011aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f6:	bf00      	nop
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40010c00 	.word	0x40010c00
 8000a0c:	10210000 	.word	0x10210000
 8000a10:	40010800 	.word	0x40010800

08000a14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <HAL_UART_RxCpltCallback+0x5c>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d121      	bne.n	8000a68 <HAL_UART_RxCpltCallback+0x54>
  {
	  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <HAL_UART_RxCpltCallback+0x60>)
 8000a2c:	f001 f80c 	bl	8001a48 <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Start_IT(&htim4);
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <HAL_UART_RxCpltCallback+0x64>)
 8000a32:	f002 f8a5 	bl	8002b80 <HAL_TIM_Base_Start_IT>
	  //HAL_TIM_Base_Stop(&htim3);
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_UART_RxCpltCallback+0x68>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Start_IT(&htim3);
 8000a3e:	480f      	ldr	r0, [pc, #60]	; (8000a7c <HAL_UART_RxCpltCallback+0x68>)
 8000a40:	f002 f89e 	bl	8002b80 <HAL_TIM_Base_Start_IT>
	  rxBytes[rxCounter] = rxByte;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_UART_RxCpltCallback+0x6c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_UART_RxCpltCallback+0x70>)
 8000a4c:	7819      	ldrb	r1, [r3, #0]
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_UART_RxCpltCallback+0x74>)
 8000a50:	5499      	strb	r1, [r3, r2]
	  //buf1.put(rxByte);
	  rxCounter++;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_UART_RxCpltCallback+0x6c>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_UART_RxCpltCallback+0x6c>)
 8000a5c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4908      	ldr	r1, [pc, #32]	; (8000a84 <HAL_UART_RxCpltCallback+0x70>)
 8000a62:	4803      	ldr	r0, [pc, #12]	; (8000a70 <HAL_UART_RxCpltCallback+0x5c>)
 8000a64:	f002 fcc7 	bl	80033f6 <HAL_UART_Receive_IT>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000017c 	.word	0x2000017c
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	20000134 	.word	0x20000134
 8000a7c:	200000ec 	.word	0x200000ec
 8000a80:	20000394 	.word	0x20000394
 8000a84:	20000310 	.word	0x20000310
 8000a88:	20000314 	.word	0x20000314

08000a8c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_UART_TxCpltCallback+0x24>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d105      	bne.n	8000aa8 <HAL_UART_TxCpltCallback+0x1c>
  {
	  // гаcим cветодиод "TX"
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <HAL_UART_TxCpltCallback+0x28>)
 8000aa4:	f000 ffd0 	bl	8001a48 <HAL_GPIO_WritePin>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000017c 	.word	0x2000017c
 8000ab4:	40010c00 	.word	0x40010c00

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from TIM4
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d113      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		HAL_TIM_Base_Stop(&htim3);
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000acc:	f002 f831 	bl	8002b32 <HAL_TIM_Base_Stop>
		HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ad8:	f000 ffb6 	bl	8001a48 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_IT(&huart1, rxBytes, rxCounter);
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4910      	ldr	r1, [pc, #64]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ae8:	f002 fc41 	bl	800336e <HAL_UART_Transmit_IT>
		rxCounter = 0;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
	}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM4
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d108      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		HAL_TIM_Base_Stop(&htim4);
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000afe:	f002 f818 	bl	8002b32 <HAL_TIM_Base_Stop>
		HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b0a:	f000 ff9d 	bl	8001a48 <HAL_GPIO_WritePin>
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40000400 	.word	0x40000400
 8000b1c:	200000ec 	.word	0x200000ec
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	20000394 	.word	0x20000394
 8000b28:	20000314 	.word	0x20000314
 8000b2c:	2000017c 	.word	0x2000017c
 8000b30:	40000800 	.word	0x40000800
 8000b34:	20000134 	.word	0x20000134

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d107      	bne.n	8000b64 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d102      	bne.n	8000b64 <_Z41__static_initialization_and_destruction_0ii+0x20>
RingBuffer buf1;
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b60:	f7ff fcba 	bl	80004d8 <_ZN10RingBufferC1Ev>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200003a0 	.word	0x200003a0

08000b70 <_GLOBAL__sub_I_hspi1>:
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff ffe3 	bl	8000b44 <_Z41__static_initialization_and_destruction_0ii>
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_MspInit+0x5c>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_MspInit+0x5c>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6193      	str	r3, [r2, #24]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_MspInit+0x5c>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x5c>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_MspInit+0x5c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	61d3      	str	r3, [r2, #28]
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_MspInit+0x5c>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_MspInit+0x60>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_MspInit+0x60>)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <HAL_SPI_MspInit+0x98>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d137      	bne.n	8000c74 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_SPI_MspInit+0x9c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <HAL_SPI_MspInit+0x9c>)
 8000c0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_SPI_MspInit+0x9c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_SPI_MspInit+0x9c>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_SPI_MspInit+0x9c>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_SPI_MspInit+0x9c>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c34:	23a0      	movs	r3, #160	; 0xa0
 8000c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	480f      	ldr	r0, [pc, #60]	; (8000c84 <HAL_SPI_MspInit+0xa0>)
 8000c48:	f000 fd7a 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4809      	ldr	r0, [pc, #36]	; (8000c84 <HAL_SPI_MspInit+0xa0>)
 8000c60:	f000 fd6e 	bl	8001740 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2023      	movs	r0, #35	; 0x23
 8000c6a:	f000 fa82 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c6e:	2023      	movs	r0, #35	; 0x23
 8000c70:	f000 fa9b 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40013000 	.word	0x40013000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010800 	.word	0x40010800

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <HAL_TIM_Base_MspInit+0x78>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d114      	bne.n	8000cc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_TIM_Base_MspInit+0x7c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_TIM_Base_MspInit+0x7c>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_TIM_Base_MspInit+0x7c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	201d      	movs	r0, #29
 8000cb8:	f000 fa5b 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cbc:	201d      	movs	r0, #29
 8000cbe:	f000 fa74 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cc2:	e018      	b.n	8000cf6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_TIM_Base_MspInit+0x80>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d113      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_TIM_Base_MspInit+0x7c>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	201e      	movs	r0, #30
 8000cec:	f000 fa41 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cf0:	201e      	movs	r0, #30
 8000cf2:	f000 fa5a 	bl	80011aa <HAL_NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40000400 	.word	0x40000400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40000800 	.word	0x40000800

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <HAL_UART_MspInit+0x9c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d139      	bne.n	8000da0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <HAL_UART_MspInit+0xa0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <HAL_UART_MspInit+0xa0>)
 8000d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_UART_MspInit+0xa0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_UART_MspInit+0xa0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_UART_MspInit+0xa0>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_UART_MspInit+0xa0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <HAL_UART_MspInit+0xa4>)
 8000d72:	f000 fce5 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <HAL_UART_MspInit+0xa4>)
 8000d8c:	f000 fcd8 	bl	8001740 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2025      	movs	r0, #37	; 0x25
 8000d96:	f000 f9ec 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d9a:	2025      	movs	r0, #37	; 0x25
 8000d9c:	f000 fa05 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40013800 	.word	0x40013800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 f8a3 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 8000e06:	2010      	movs	r0, #16
 8000e08:	f000 fe36 	bl	8001a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM3_IRQHandler+0x10>)
 8000e16:	f001 ff05 	bl	8002c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000ec 	.word	0x200000ec

08000e24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM4_IRQHandler+0x10>)
 8000e2a:	f001 fefb 	bl	8002c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000134 	.word	0x20000134

08000e38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <SPI1_IRQHandler+0x10>)
 8000e3e:	f001 fc7f 	bl	8002740 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000094 	.word	0x20000094

08000e4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <USART1_IRQHandler+0x10>)
 8000e52:	f002 fb01 	bl	8003458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000017c 	.word	0x2000017c

08000e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	; (8000eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e92:	f7ff ffe5 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f002 feb5 	bl	8003c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff fb47 	bl	800052c <main>
  bx lr
 8000e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ea8:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 8000eac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eb0:	200003d8 	.word	0x200003d8

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x28>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f947 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fe54 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f95f 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f927 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000060 	.word	0x20000060
 8000f3c:	20000068 	.word	0x20000068
 8000f40:	20000064 	.word	0x20000064

08000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x20>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000068 	.word	0x20000068
 8000f64:	200003b4 	.word	0x200003b4

08000f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	200003b4 	.word	0x200003b4

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff fff0 	bl	8000f68 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffe0 	bl	8000f68 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000068 	.word	0x20000068

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4906      	ldr	r1, [pc, #24]	; (800105c <__NVIC_EnableIRQ+0x34>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff90 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff2d 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff42 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff90 	bl	80010b4 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5f 	bl	8001060 <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff35 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d008      	beq.n	8001206 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2204      	movs	r2, #4
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e020      	b.n	8001248 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 020e 	bic.w	r2, r2, #14
 8001214:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
	...

08001254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001266:	2b02      	cmp	r3, #2
 8001268:	d005      	beq.n	8001276 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2204      	movs	r2, #4
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e051      	b.n	800131a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 020e 	bic.w	r2, r2, #14
 8001284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a22      	ldr	r2, [pc, #136]	; (8001324 <HAL_DMA_Abort_IT+0xd0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d029      	beq.n	80012f4 <HAL_DMA_Abort_IT+0xa0>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a20      	ldr	r2, [pc, #128]	; (8001328 <HAL_DMA_Abort_IT+0xd4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d022      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x9c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_DMA_Abort_IT+0xd8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d01a      	beq.n	80012ea <HAL_DMA_Abort_IT+0x96>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_DMA_Abort_IT+0xdc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d012      	beq.n	80012e4 <HAL_DMA_Abort_IT+0x90>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <HAL_DMA_Abort_IT+0xe0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00a      	beq.n	80012de <HAL_DMA_Abort_IT+0x8a>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <HAL_DMA_Abort_IT+0xe4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d102      	bne.n	80012d8 <HAL_DMA_Abort_IT+0x84>
 80012d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012d6:	e00e      	b.n	80012f6 <HAL_DMA_Abort_IT+0xa2>
 80012d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012dc:	e00b      	b.n	80012f6 <HAL_DMA_Abort_IT+0xa2>
 80012de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e2:	e008      	b.n	80012f6 <HAL_DMA_Abort_IT+0xa2>
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	e005      	b.n	80012f6 <HAL_DMA_Abort_IT+0xa2>
 80012ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ee:	e002      	b.n	80012f6 <HAL_DMA_Abort_IT+0xa2>
 80012f0:	2310      	movs	r3, #16
 80012f2:	e000      	b.n	80012f6 <HAL_DMA_Abort_IT+0xa2>
 80012f4:	2301      	movs	r3, #1
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_DMA_Abort_IT+0xe8>)
 80012f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	4798      	blx	r3
    } 
  }
  return status;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40020008 	.word	0x40020008
 8001328:	4002001c 	.word	0x4002001c
 800132c:	40020030 	.word	0x40020030
 8001330:	40020044 	.word	0x40020044
 8001334:	40020058 	.word	0x40020058
 8001338:	4002006c 	.word	0x4002006c
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_FLASH_Program+0xd8>)
 800135c:	7e1b      	ldrb	r3, [r3, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_FLASH_Program+0x26>
 8001362:	2302      	movs	r3, #2
 8001364:	e054      	b.n	8001410 <HAL_FLASH_Program+0xd0>
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_FLASH_Program+0xd8>)
 8001368:	2201      	movs	r2, #1
 800136a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800136c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001370:	f000 f8a8 	bl	80014c4 <FLASH_WaitForLastOperation>
 8001374:	4603      	mov	r3, r0
 8001376:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d144      	bne.n	8001408 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d102      	bne.n	800138a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001384:	2301      	movs	r3, #1
 8001386:	757b      	strb	r3, [r7, #21]
 8001388:	e007      	b.n	800139a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d102      	bne.n	8001396 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001390:	2302      	movs	r3, #2
 8001392:	757b      	strb	r3, [r7, #21]
 8001394:	e001      	b.n	800139a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001396:	2304      	movs	r3, #4
 8001398:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800139a:	2300      	movs	r3, #0
 800139c:	75bb      	strb	r3, [r7, #22]
 800139e:	e02d      	b.n	80013fc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80013a0:	7dbb      	ldrb	r3, [r7, #22]
 80013a2:	005a      	lsls	r2, r3, #1
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	eb02 0c03 	add.w	ip, r2, r3
 80013aa:	7dbb      	ldrb	r3, [r7, #22]
 80013ac:	0119      	lsls	r1, r3, #4
 80013ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013b2:	f1c1 0620 	rsb	r6, r1, #32
 80013b6:	f1a1 0020 	sub.w	r0, r1, #32
 80013ba:	fa22 f401 	lsr.w	r4, r2, r1
 80013be:	fa03 f606 	lsl.w	r6, r3, r6
 80013c2:	4334      	orrs	r4, r6
 80013c4:	fa23 f000 	lsr.w	r0, r3, r0
 80013c8:	4304      	orrs	r4, r0
 80013ca:	fa23 f501 	lsr.w	r5, r3, r1
 80013ce:	b2a3      	uxth	r3, r4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4660      	mov	r0, ip
 80013d4:	f000 f85a 	bl	800148c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013dc:	f000 f872 	bl	80014c4 <FLASH_WaitForLastOperation>
 80013e0:	4603      	mov	r3, r0
 80013e2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_FLASH_Program+0xdc>)
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <HAL_FLASH_Program+0xdc>)
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80013f6:	7dbb      	ldrb	r3, [r7, #22]
 80013f8:	3301      	adds	r3, #1
 80013fa:	75bb      	strb	r3, [r7, #22]
 80013fc:	7dba      	ldrb	r2, [r7, #22]
 80013fe:	7d7b      	ldrb	r3, [r7, #21]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3cd      	bcc.n	80013a0 <HAL_FLASH_Program+0x60>
 8001404:	e000      	b.n	8001408 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001406:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_FLASH_Program+0xd8>)
 800140a:	2200      	movs	r2, #0
 800140c:	761a      	strb	r2, [r3, #24]

  return status;
 800140e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001410:	4618      	mov	r0, r3
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001418:	200003b8 	.word	0x200003b8
 800141c:	40022000 	.word	0x40022000

08001420 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_FLASH_Unlock+0x40>)
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00d      	beq.n	8001452 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_FLASH_Unlock+0x40>)
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_FLASH_Unlock+0x44>)
 800143a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_FLASH_Unlock+0x40>)
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_FLASH_Unlock+0x48>)
 8001440:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_FLASH_Unlock+0x40>)
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001452:	79fb      	ldrb	r3, [r7, #7]
}
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40022000 	.word	0x40022000
 8001464:	45670123 	.word	0x45670123
 8001468:	cdef89ab 	.word	0xcdef89ab

0800146c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_FLASH_Lock+0x1c>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <HAL_FLASH_Lock+0x1c>)
 8001476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40022000 	.word	0x40022000

0800148c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <FLASH_Program_HalfWord+0x30>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <FLASH_Program_HalfWord+0x34>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <FLASH_Program_HalfWord+0x34>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	887a      	ldrh	r2, [r7, #2]
 80014ae:	801a      	strh	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200003b8 	.word	0x200003b8
 80014c0:	40022000 	.word	0x40022000

080014c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff fd4c 	bl	8000f68 <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014d2:	e010      	b.n	80014f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014da:	d00c      	beq.n	80014f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <FLASH_WaitForLastOperation+0x2e>
 80014e2:	f7ff fd41 	bl	8000f68 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d201      	bcs.n	80014f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e025      	b.n	8001542 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <FLASH_WaitForLastOperation+0x88>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1e8      	bne.n	80014d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <FLASH_WaitForLastOperation+0x88>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <FLASH_WaitForLastOperation+0x88>)
 8001510:	2220      	movs	r2, #32
 8001512:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <FLASH_WaitForLastOperation+0x88>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10b      	bne.n	8001538 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <FLASH_WaitForLastOperation+0x88>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001528:	2b00      	cmp	r3, #0
 800152a:	d105      	bne.n	8001538 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <FLASH_WaitForLastOperation+0x88>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001538:	f000 f80a 	bl	8001550 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000

08001550 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <FLASH_SetErrorCode+0x98>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <FLASH_SetErrorCode+0x9c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <FLASH_SetErrorCode+0x9c>)
 8001570:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <FLASH_SetErrorCode+0x98>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <FLASH_SetErrorCode+0x9c>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <FLASH_SetErrorCode+0x9c>)
 8001590:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <FLASH_SetErrorCode+0x98>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <FLASH_SetErrorCode+0x9c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <FLASH_SetErrorCode+0x9c>)
 80015b0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <FLASH_SetErrorCode+0x98>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <FLASH_SetErrorCode+0x98>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f240 1201 	movw	r2, #257	; 0x101
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d106      	bne.n	80015d6 <FLASH_SetErrorCode+0x86>
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <FLASH_SetErrorCode+0x98>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <FLASH_SetErrorCode+0x98>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	61d3      	str	r3, [r2, #28]
}  
 80015d4:	e002      	b.n	80015dc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <FLASH_SetErrorCode+0x98>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	60d3      	str	r3, [r2, #12]
}  
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000
 80015ec:	200003b8 	.word	0x200003b8

080015f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_FLASHEx_Erase+0xd0>)
 8001604:	7e1b      	ldrb	r3, [r3, #24]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_FLASHEx_Erase+0x1e>
 800160a:	2302      	movs	r3, #2
 800160c:	e053      	b.n	80016b6 <HAL_FLASHEx_Erase+0xc6>
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <HAL_FLASHEx_Erase+0xd0>)
 8001610:	2201      	movs	r2, #1
 8001612:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d116      	bne.n	800164a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f7ff ff50 	bl	80014c4 <FLASH_WaitForLastOperation>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d141      	bne.n	80016ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800162a:	2001      	movs	r0, #1
 800162c:	f000 f84c 	bl	80016c8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001630:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001634:	f7ff ff46 	bl	80014c4 <FLASH_WaitForLastOperation>
 8001638:	4603      	mov	r3, r0
 800163a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_FLASHEx_Erase+0xd4>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <HAL_FLASHEx_Erase+0xd4>)
 8001642:	f023 0304 	bic.w	r3, r3, #4
 8001646:	6113      	str	r3, [r2, #16]
 8001648:	e031      	b.n	80016ae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800164a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800164e:	f7ff ff39 	bl	80014c4 <FLASH_WaitForLastOperation>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d12a      	bne.n	80016ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	e019      	b.n	800169c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f000 f849 	bl	8001700 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800166e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001672:	f7ff ff27 	bl	80014c4 <FLASH_WaitForLastOperation>
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_FLASHEx_Erase+0xd4>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_FLASHEx_Erase+0xd4>)
 8001680:	f023 0302 	bic.w	r3, r3, #2
 8001684:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	601a      	str	r2, [r3, #0]
            break;
 8001692:	e00c      	b.n	80016ae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800169a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	029a      	lsls	r2, r3, #10
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3dc      	bcc.n	8001668 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_FLASHEx_Erase+0xd0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	761a      	strb	r2, [r3, #24]

  return status;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200003b8 	.word	0x200003b8
 80016c4:	40022000 	.word	0x40022000

080016c8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <FLASH_MassErase+0x30>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <FLASH_MassErase+0x34>)
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <FLASH_MassErase+0x34>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <FLASH_MassErase+0x34>)
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <FLASH_MassErase+0x34>)
 80016e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	200003b8 	.word	0x200003b8
 80016fc:	40022000 	.word	0x40022000

08001700 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <FLASH_PageErase+0x38>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <FLASH_PageErase+0x3c>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <FLASH_PageErase+0x3c>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <FLASH_PageErase+0x3c>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <FLASH_PageErase+0x3c>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a05      	ldr	r2, [pc, #20]	; (800173c <FLASH_PageErase+0x3c>)
 8001726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	200003b8 	.word	0x200003b8
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	; 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e169      	b.n	8001a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8158 	bne.w	8001a22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a9a      	ldr	r2, [pc, #616]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4a98      	ldr	r2, [pc, #608]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4a98      	ldr	r2, [pc, #608]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a96      	ldr	r2, [pc, #600]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a96      	ldr	r2, [pc, #600]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a94      	ldr	r2, [pc, #592]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a94      	ldr	r2, [pc, #592]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a92      	ldr	r2, [pc, #584]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a92      	ldr	r2, [pc, #584]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a90      	ldr	r2, [pc, #576]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a79      	ldr	r2, [pc, #484]	; (80019f4 <HAL_GPIO_Init+0x2b4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80b1 	beq.w	8001a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1ec>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3f      	ldr	r2, [pc, #252]	; (8001a04 <HAL_GPIO_Init+0x2c4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1e8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3e      	ldr	r2, [pc, #248]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1e4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1e0>
 800191c:	2303      	movs	r3, #3
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001920:	2304      	movs	r3, #4
 8001922:	e004      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001924:	2302      	movs	r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 800192c:	2300      	movs	r3, #0
 800192e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4093      	lsls	r3, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800193e:	492f      	ldr	r1, [pc, #188]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	492c      	ldr	r1, [pc, #176]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4928      	ldr	r1, [pc, #160]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	491e      	ldr	r1, [pc, #120]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4918      	ldr	r1, [pc, #96]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4914      	ldr	r1, [pc, #80]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d021      	beq.n	8001a14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
 80019dc:	e021      	b.n	8001a22 <HAL_GPIO_Init+0x2e2>
 80019de:	bf00      	nop
 80019e0:	10320000 	.word	0x10320000
 80019e4:	10310000 	.word	0x10310000
 80019e8:	10220000 	.word	0x10220000
 80019ec:	10210000 	.word	0x10210000
 80019f0:	10120000 	.word	0x10120000
 80019f4:	10110000 	.word	0x10110000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4909      	ldr	r1, [pc, #36]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae8e 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	372c      	adds	r7, #44	; 0x2c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
 8001a54:	4613      	mov	r3, r2
 8001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a64:	e003      	b.n	8001a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	041a      	lsls	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f806 	bl	8001aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e272      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001adc:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d00c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae8:	4b8f      	ldr	r3, [pc, #572]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d112      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
 8001af4:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d06c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x12c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d168      	bne.n	8001be8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e24c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x76>
 8001b24:	4b80      	ldr	r3, [pc, #512]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a7f      	ldr	r2, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e02e      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x98>
 8001b3a:	4b7b      	ldr	r3, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7a      	ldr	r2, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b78      	ldr	r3, [pc, #480]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0xbc>
 8001b5e:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a71      	ldr	r2, [pc, #452]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xd4>
 8001b78:	4b6b      	ldr	r3, [pc, #428]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6a      	ldr	r2, [pc, #424]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a67      	ldr	r2, [pc, #412]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f9e6 	bl	8000f68 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f9e2 	bl	8000f68 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e200      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe4>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f9d2 	bl	8000f68 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f9ce 	bl	8000f68 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1ec      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x10c>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf6:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c02:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x18c>
 8001c0e:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x176>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1c0      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4939      	ldr	r1, [pc, #228]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff f987 	bl	8000f68 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff f983 	bl	8000f68 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1a1      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4927      	ldr	r1, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff f966 	bl	8000f68 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f962 	bl	8000f68 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e180      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03a      	beq.n	8001d40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d019      	beq.n	8001d06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f946 	bl	8000f68 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f942 	bl	8000f68 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e160      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f000 fada 	bl	80022b8 <RCC_Delay>
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_OscConfig+0x274>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f92c 	bl	8000f68 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d12:	e00f      	b.n	8001d34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff f928 	bl	8000f68 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d908      	bls.n	8001d34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e146      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	42420000 	.word	0x42420000
 8001d30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	4b92      	ldr	r3, [pc, #584]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e9      	bne.n	8001d14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80a6 	beq.w	8001e9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4b8b      	ldr	r3, [pc, #556]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10d      	bne.n	8001d7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b88      	ldr	r3, [pc, #544]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a87      	ldr	r2, [pc, #540]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b85      	ldr	r3, [pc, #532]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b82      	ldr	r3, [pc, #520]	; (8001f84 <HAL_RCC_OscConfig+0x4c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b7f      	ldr	r3, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x4c8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a7e      	ldr	r2, [pc, #504]	; (8001f84 <HAL_RCC_OscConfig+0x4c8>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d92:	f7ff f8e9 	bl	8000f68 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7ff f8e5 	bl	8000f68 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	; 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e103      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b75      	ldr	r3, [pc, #468]	; (8001f84 <HAL_RCC_OscConfig+0x4c8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x312>
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a6e      	ldr	r2, [pc, #440]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	e02d      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x334>
 8001dd6:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a69      	ldr	r2, [pc, #420]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	4b67      	ldr	r3, [pc, #412]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a66      	ldr	r2, [pc, #408]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	e01c      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d10c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x356>
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a60      	ldr	r2, [pc, #384]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a5d      	ldr	r2, [pc, #372]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e00b      	b.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001e12:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a5a      	ldr	r2, [pc, #360]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a57      	ldr	r2, [pc, #348]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d015      	beq.n	8001e5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff f899 	bl	8000f68 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f895 	bl	8000f68 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0b1      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ee      	beq.n	8001e3a <HAL_RCC_OscConfig+0x37e>
 8001e5c:	e014      	b.n	8001e88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff f883 	bl	8000f68 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff f87f 	bl	8000f68 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e09b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ee      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a3b      	ldr	r2, [pc, #236]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8087 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d061      	beq.n	8001f74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d146      	bne.n	8001f46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f853 	bl	8000f68 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff f84f 	bl	8000f68 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e06d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d108      	bne.n	8001f00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4921      	ldr	r1, [pc, #132]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a19      	ldr	r1, [r3, #32]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	430b      	orrs	r3, r1
 8001f12:	491b      	ldr	r1, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x4cc>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f823 	bl	8000f68 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff f81f 	bl	8000f68 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e03d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x46a>
 8001f44:	e035      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f80c 	bl	8000f68 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f54:	f7ff f808 	bl	8000f68 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e026      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x498>
 8001f72:	e01e      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e019      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40007000 	.word	0x40007000
 8001f88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_OscConfig+0x500>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0d0      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b6a      	ldr	r3, [pc, #424]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b67      	ldr	r3, [pc, #412]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	4965      	ldr	r1, [pc, #404]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b8      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002026:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800203e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	494d      	ldr	r1, [pc, #308]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d040      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d115      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e073      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06b      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4936      	ldr	r1, [pc, #216]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b0:	f7fe ff5a 	bl	8000f68 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7fe ff56 	bl	8000f68 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e053      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d210      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	4922      	ldr	r1, [pc, #136]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e032      	b.n	8002176 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4916      	ldr	r1, [pc, #88]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	490e      	ldr	r1, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214e:	f000 f821 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	490a      	ldr	r1, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1cc>)
 8002168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1d0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe feb8 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000
 8002184:	40021000 	.word	0x40021000
 8002188:	08003c84 	.word	0x08003c84
 800218c:	20000060 	.word	0x20000060
 8002190:	20000064 	.word	0x20000064

08002194 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	b490      	push	{r4, r7}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_RCC_GetSysClockFreq+0xac>)
 800219c:	1d3c      	adds	r4, r7, #4
 800219e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a4:	f240 2301 	movw	r3, #513	; 0x201
 80021a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x40>
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x46>
 80021d2:	e02b      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d4:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021d6:	623b      	str	r3, [r7, #32]
      break;
 80021d8:	e02b      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3328      	adds	r3, #40	; 0x28
 80021e4:	443b      	add	r3, r7
 80021e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d012      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0c5b      	lsrs	r3, r3, #17
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	3328      	adds	r3, #40	; 0x28
 8002202:	443b      	add	r3, r7
 8002204:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002208:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb4>)
 800220e:	fb03 f202 	mul.w	r2, r3, r2
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	e004      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	623b      	str	r3, [r7, #32]
      break;
 800222a:	e002      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCC_GetSysClockFreq+0xbc>)
 800222e:	623b      	str	r3, [r7, #32]
      break;
 8002230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002232:	6a3b      	ldr	r3, [r7, #32]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bc90      	pop	{r4, r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	08003c74 	.word	0x08003c74
 8002244:	40021000 	.word	0x40021000
 8002248:	00b71b00 	.word	0x00b71b00
 800224c:	003d0900 	.word	0x003d0900
 8002250:	007a1200 	.word	0x007a1200

08002254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <HAL_RCC_GetHCLKFreq+0x10>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20000060 	.word	0x20000060

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800226c:	f7ff fff2 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4903      	ldr	r1, [pc, #12]	; (800228c <HAL_RCC_GetPCLK1Freq+0x24>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08003c94 	.word	0x08003c94

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002294:	f7ff ffde 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0adb      	lsrs	r3, r3, #11
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4903      	ldr	r1, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08003c94 	.word	0x08003c94

080022b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <RCC_Delay+0x34>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <RCC_Delay+0x38>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0a5b      	lsrs	r3, r3, #9
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d4:	bf00      	nop
  }
  while (Delay --);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	60fa      	str	r2, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f9      	bne.n	80022d4 <RCC_Delay+0x1c>
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000060 	.word	0x20000060
 80022f0:	10624dd3 	.word	0x10624dd3

080022f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e076      	b.n	80023f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002316:	d009      	beq.n	800232c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
 800231e:	e005      	b.n	800232c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fc4c 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	ea42 0103 	orr.w	r1, r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	0c1a      	lsrs	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f002 0204 	and.w	r2, r2, #4
 80023d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69da      	ldr	r2, [r3, #28]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	; 0x30
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800240a:	2301      	movs	r3, #1
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x26>
 800241e:	2302      	movs	r3, #2
 8002420:	e18a      	b.n	8002738 <HAL_SPI_TransmitReceive+0x33c>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800242a:	f7fe fd9d 	bl	8000f68 <HAL_GetTick>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002448:	2b01      	cmp	r3, #1
 800244a:	d00f      	beq.n	800246c <HAL_SPI_TransmitReceive+0x70>
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002452:	d107      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x68>
 800245c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002460:	2b04      	cmp	r3, #4
 8002462:	d003      	beq.n	800246c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002464:	2302      	movs	r3, #2
 8002466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800246a:	e15b      	b.n	8002724 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_SPI_TransmitReceive+0x82>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_SPI_TransmitReceive+0x82>
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002484:	e14e      	b.n	8002724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b04      	cmp	r3, #4
 8002490:	d003      	beq.n	800249a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2205      	movs	r2, #5
 8002496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	887a      	ldrh	r2, [r7, #2]
 80024c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d007      	beq.n	80024ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024f6:	d178      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x10a>
 8002500:	8b7b      	ldrh	r3, [r7, #26]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d166      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	881a      	ldrh	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252a:	e053      	b.n	80025d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d11b      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x176>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d016      	beq.n	8002572 <HAL_SPI_TransmitReceive+0x176>
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d113      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	881a      	ldrh	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	1c9a      	adds	r2, r3, #2
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d119      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x1b8>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	b292      	uxth	r2, r2
 8002596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	1c9a      	adds	r2, r3, #2
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025b0:	2301      	movs	r3, #1
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025b4:	f7fe fcd8 	bl	8000f68 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d807      	bhi.n	80025d4 <HAL_SPI_TransmitReceive+0x1d8>
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d003      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025d2:	e0a7      	b.n	8002724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1a6      	bne.n	800252c <HAL_SPI_TransmitReceive+0x130>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1a1      	bne.n	800252c <HAL_SPI_TransmitReceive+0x130>
 80025e8:	e07c      	b.n	80026e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x1fc>
 80025f2:	8b7b      	ldrh	r3, [r7, #26]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d16b      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800261e:	e057      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d11c      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x26c>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d017      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x26c>
 8002638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d114      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	330c      	adds	r3, #12
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d119      	bne.n	80026aa <HAL_SPI_TransmitReceive+0x2ae>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d014      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026a6:	2301      	movs	r3, #1
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026aa:	f7fe fc5d 	bl	8000f68 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d803      	bhi.n	80026c2 <HAL_SPI_TransmitReceive+0x2c6>
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d102      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x2cc>
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d103      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026ce:	e029      	b.n	8002724 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1a2      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x224>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d19d      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f9b5 	bl	8002a58 <SPI_EndRxTxTransaction>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002700:	e010      	b.n	8002724 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10b      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	e000      	b.n	8002724 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002722:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002738:	4618      	mov	r0, r3
 800273a:	3730      	adds	r7, #48	; 0x30
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10f      	bne.n	8002784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
    return;
 8002782:	e0be      	b.n	8002902 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_SPI_IRQHandler+0x66>
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	09db      	lsrs	r3, r3, #7
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
    return;
 80027a4:	e0ad      	b.n	8002902 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_SPI_IRQHandler+0x80>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80a1 	beq.w	8002902 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 809a 	beq.w	8002902 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d023      	beq.n	8002822 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d011      	beq.n	800280a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	f043 0204 	orr.w	r2, r3, #4
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	e00b      	b.n	8002822 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
        return;
 8002820:	e06f      	b.n	8002902 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d014      	beq.n	8002858 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	2b00      	cmp	r3, #0
 800285e:	d04f      	beq.n	8002900 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800286e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <HAL_SPI_IRQHandler+0x14c>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d034      	beq.n	80028f6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0203 	bic.w	r2, r2, #3
 800289a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d011      	beq.n	80028c8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a8:	4a17      	ldr	r2, [pc, #92]	; (8002908 <HAL_SPI_IRQHandler+0x1c8>)
 80028aa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fccf 	bl	8001254 <HAL_DMA_Abort_IT>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d016      	beq.n	80028fe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <HAL_SPI_IRQHandler+0x1c8>)
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fcb9 	bl	8001254 <HAL_DMA_Abort_IT>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80028f4:	e003      	b.n	80028fe <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f808 	bl	800290c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80028fc:	e000      	b.n	8002900 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80028fe:	bf00      	nop
    return;
 8002900:	bf00      	nop
  }
}
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	0800291f 	.word	0x0800291f

0800290c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff ffe7 	bl	800290c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002958:	f7fe fb06 	bl	8000f68 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4413      	add	r3, r2
 8002966:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002968:	f7fe fafe 	bl	8000f68 <HAL_GetTick>
 800296c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	015b      	lsls	r3, r3, #5
 8002974:	0d1b      	lsrs	r3, r3, #20
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297e:	e054      	b.n	8002a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d050      	beq.n	8002a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002988:	f7fe faee 	bl	8000f68 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	429a      	cmp	r2, r3
 8002996:	d902      	bls.n	800299e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d13d      	bne.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b6:	d111      	bne.n	80029dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c0:	d004      	beq.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d107      	bne.n	80029dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e4:	d10f      	bne.n	8002a06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e017      	b.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4013      	ands	r3, r2
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d19b      	bne.n	8002980 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000060 	.word	0x20000060

08002a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff ff6a 	bl	8002948 <SPI_WaitFlagStateUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e000      	b.n	8002a8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e041      	b.n	8002b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe f8e4 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f000 fa96 	bl	8003004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <HAL_TIM_Base_Stop+0x38>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	f240 4344 	movw	r3, #1092	; 0x444
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <HAL_TIM_Base_Stop+0x38>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d001      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e03a      	b.n	8002c0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_TIM_Base_Start_IT+0x98>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x58>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc2:	d009      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x58>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_TIM_Base_Start_IT+0x9c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x58>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d010      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	e007      	b.n	8002c0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40000800 	.word	0x40000800

08002c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d122      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0202 	mvn.w	r2, #2
 8002c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9b1 	bl	8002fce <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f9a4 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f9b3 	bl	8002fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d122      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0204 	mvn.w	r2, #4
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f987 	bl	8002fce <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f97a 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f989 	bl	8002fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d122      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d11b      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0208 	mvn.w	r2, #8
 8002cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f95d 	bl	8002fce <HAL_TIM_IC_CaptureCallback>
 8002d14:	e005      	b.n	8002d22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f950 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f95f 	bl	8002fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d122      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d11b      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0210 	mvn.w	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2208      	movs	r2, #8
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f933 	bl	8002fce <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f926 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f935 	bl	8002fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10e      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0201 	mvn.w	r2, #1
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fe88 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d10e      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	2b80      	cmp	r3, #128	; 0x80
 8002dc2:	d107      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa77 	bl	80032c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8f9 	bl	8002ff2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0220 	mvn.w	r2, #32
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa42 	bl	80032b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIM_ConfigClockSource+0x18>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e0b3      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x180>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e84:	d03e      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0xd0>
 8002e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8a:	f200 8087 	bhi.w	8002f9c <HAL_TIM_ConfigClockSource+0x168>
 8002e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e92:	f000 8085 	beq.w	8002fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9a:	d87f      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x168>
 8002e9c:	2b70      	cmp	r3, #112	; 0x70
 8002e9e:	d01a      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0xa2>
 8002ea0:	2b70      	cmp	r3, #112	; 0x70
 8002ea2:	d87b      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x168>
 8002ea4:	2b60      	cmp	r3, #96	; 0x60
 8002ea6:	d050      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x116>
 8002ea8:	2b60      	cmp	r3, #96	; 0x60
 8002eaa:	d877      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x168>
 8002eac:	2b50      	cmp	r3, #80	; 0x50
 8002eae:	d03c      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0xf6>
 8002eb0:	2b50      	cmp	r3, #80	; 0x50
 8002eb2:	d873      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x168>
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d058      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0x136>
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d86f      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x168>
 8002ebc:	2b30      	cmp	r3, #48	; 0x30
 8002ebe:	d064      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x156>
 8002ec0:	2b30      	cmp	r3, #48	; 0x30
 8002ec2:	d86b      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x168>
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d060      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x156>
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d867      	bhi.n	8002f9c <HAL_TIM_ConfigClockSource+0x168>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05c      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x156>
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d05a      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ed4:	e062      	b.n	8002f9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f000 f966 	bl	80031b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ef8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	609a      	str	r2, [r3, #8]
      break;
 8002f02:	e04e      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6899      	ldr	r1, [r3, #8]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f000 f94f 	bl	80031b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f26:	609a      	str	r2, [r3, #8]
      break;
 8002f28:	e03b      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 f8c6 	bl	80030c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2150      	movs	r1, #80	; 0x50
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f91d 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002f48:	e02b      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f000 f8e4 	bl	8003124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2160      	movs	r1, #96	; 0x60
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f90d 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002f68:	e01b      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f8a6 	bl	80030c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2140      	movs	r1, #64	; 0x40
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f8fd 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002f88:	e00b      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f000 f8f4 	bl	8003182 <TIM_ITRx_SetConfig>
        break;
 8002f9a:	e002      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f9c:	bf00      	nop
 8002f9e:	e000      	b.n	8002fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a29      	ldr	r2, [pc, #164]	; (80030bc <TIM_Base_SetConfig+0xb8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00b      	beq.n	8003034 <TIM_Base_SetConfig+0x30>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003022:	d007      	beq.n	8003034 <TIM_Base_SetConfig+0x30>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <TIM_Base_SetConfig+0xbc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_Base_SetConfig+0x30>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <TIM_Base_SetConfig+0xc0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d108      	bne.n	8003046 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <TIM_Base_SetConfig+0xb8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00b      	beq.n	8003066 <TIM_Base_SetConfig+0x62>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d007      	beq.n	8003066 <TIM_Base_SetConfig+0x62>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <TIM_Base_SetConfig+0xbc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_Base_SetConfig+0x62>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <TIM_Base_SetConfig+0xc0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d108      	bne.n	8003078 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a07      	ldr	r2, [pc, #28]	; (80030bc <TIM_Base_SetConfig+0xb8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d103      	bne.n	80030ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	615a      	str	r2, [r3, #20]
}
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800

080030c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0201 	bic.w	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 030a 	bic.w	r3, r3, #10
 8003104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800314e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	031b      	lsls	r3, r3, #12
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003160:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	f043 0307 	orr.w	r3, r3, #7
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	021a      	lsls	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4313      	orrs	r3, r2
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	609a      	str	r2, [r3, #8]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003208:	2302      	movs	r3, #2
 800320a:	e046      	b.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d009      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10c      	bne.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	4313      	orrs	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800

080032b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e03f      	b.n	8003366 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd fd06 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	; 0x24
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fbe5 	bl	8003ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800332c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800333c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800334c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	4613      	mov	r3, r2
 800337a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	d130      	bne.n	80033ea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_UART_Transmit_IT+0x26>
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e029      	b.n	80033ec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Transmit_IT+0x38>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e022      	b.n	80033ec <HAL_UART_Transmit_IT+0x7e>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2221      	movs	r2, #33	; 0x21
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	4613      	mov	r3, r2
 8003402:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	d11d      	bne.n	800344c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_UART_Receive_IT+0x26>
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e016      	b.n	800344e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_UART_Receive_IT+0x38>
 800342a:	2302      	movs	r3, #2
 800342c:	e00f      	b.n	800344e <HAL_UART_Receive_IT+0x58>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	461a      	mov	r2, r3
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f9c6 	bl	80037d4 <UART_Start_Receive_IT>
 8003448:	4603      	mov	r3, r0
 800344a:	e000      	b.n	800344e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_UART_IRQHandler+0x52>
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa76 	bl	8003994 <UART_Receive_IT>
      return;
 80034a8:	e17b      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80b1 	beq.w	8003614 <HAL_UART_IRQHandler+0x1bc>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_UART_IRQHandler+0x70>
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80a6 	beq.w	8003614 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_UART_IRQHandler+0x90>
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_UART_IRQHandler+0xb0>
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0202 	orr.w	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_UART_IRQHandler+0xd0>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 0204 	orr.w	r2, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00f      	beq.n	8003552 <HAL_UART_IRQHandler+0xfa>
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d104      	bne.n	8003546 <HAL_UART_IRQHandler+0xee>
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0208 	orr.w	r2, r3, #8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 811e 	beq.w	8003798 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_UART_IRQHandler+0x11e>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fa0f 	bl	8003994 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <HAL_UART_IRQHandler+0x146>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d031      	beq.n	8003602 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f951 	bl	8003846 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d023      	beq.n	80035fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d013      	beq.n	80035f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	4a76      	ldr	r2, [pc, #472]	; (80037a8 <HAL_UART_IRQHandler+0x350>)
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fe3c 	bl	8001254 <HAL_DMA_Abort_IT>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ec:	4610      	mov	r0, r2
 80035ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f0:	e00e      	b.n	8003610 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8da 	bl	80037ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	e00a      	b.n	8003610 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8d6 	bl	80037ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	e006      	b.n	8003610 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8d2 	bl	80037ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800360e:	e0c3      	b.n	8003798 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	bf00      	nop
    return;
 8003612:	e0c1      	b.n	8003798 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2b01      	cmp	r3, #1
 800361a:	f040 80a1 	bne.w	8003760 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 809b 	beq.w	8003760 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8095 	beq.w	8003760 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04e      	beq.n	80036f8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003664:	8a3b      	ldrh	r3, [r7, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8098 	beq.w	800379c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003670:	8a3a      	ldrh	r2, [r7, #16]
 8003672:	429a      	cmp	r2, r3
 8003674:	f080 8092 	bcs.w	800379c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8a3a      	ldrh	r2, [r7, #16]
 800367c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b20      	cmp	r3, #32
 8003686:	d02b      	beq.n	80036e0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003696:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0210 	bic.w	r2, r2, #16
 80036d4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd fd7f 	bl	80011de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4619      	mov	r1, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f864 	bl	80037be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036f6:	e051      	b.n	800379c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003700:	b29b      	uxth	r3, r3
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d047      	beq.n	80037a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003710:	8a7b      	ldrh	r3, [r7, #18]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d044      	beq.n	80037a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003724:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0210 	bic.w	r2, r2, #16
 8003752:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003754:	8a7b      	ldrh	r3, [r7, #18]
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f830 	bl	80037be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800375e:	e01f      	b.n	80037a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_UART_IRQHandler+0x324>
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f8a6 	bl	80038c6 <UART_Transmit_IT>
    return;
 800377a:	e012      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <HAL_UART_IRQHandler+0x34a>
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8e7 	bl	8003964 <UART_EndTransmit_IT>
    return;
 8003796:	e004      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003798:	bf00      	nop
 800379a:	e002      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80037a0:	bf00      	nop
  }
}
 80037a2:	3728      	adds	r7, #40	; 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	0800389f 	.word	0x0800389f

080037ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2222      	movs	r2, #34	; 0x22
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003818:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0220 	orr.w	r2, r2, #32
 8003838:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800385c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	2b01      	cmp	r3, #1
 8003874:	d107      	bne.n	8003886 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0210 	bic.w	r2, r2, #16
 8003884:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7ff ff77 	bl	80037ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b085      	sub	sp, #20
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b21      	cmp	r3, #33	; 0x21
 80038d8:	d13e      	bne.n	8003958 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e2:	d114      	bne.n	800390e <UART_Transmit_IT+0x48>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d110      	bne.n	800390e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003900:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	1c9a      	adds	r2, r3, #2
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	621a      	str	r2, [r3, #32]
 800390c:	e008      	b.n	8003920 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	1c59      	adds	r1, r3, #1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6211      	str	r1, [r2, #32]
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29b      	uxth	r3, r3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4619      	mov	r1, r3
 800392e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10f      	bne.n	8003954 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003942:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003952:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fd f881 	bl	8000a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b22      	cmp	r3, #34	; 0x22
 80039a6:	f040 8099 	bne.w	8003adc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d117      	bne.n	80039e4 <UART_Receive_IT+0x50>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d113      	bne.n	80039e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	629a      	str	r2, [r3, #40]	; 0x28
 80039e2:	e026      	b.n	8003a32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	d007      	beq.n	8003a08 <UART_Receive_IT+0x74>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <UART_Receive_IT+0x82>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e008      	b.n	8003a28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d148      	bne.n	8003ad8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0220 	bic.w	r2, r2, #32
 8003a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d123      	bne.n	8003ace <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0210 	bic.w	r2, r2, #16
 8003a9a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d10a      	bne.n	8003ac0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff fe79 	bl	80037be <HAL_UARTEx_RxEventCallback>
 8003acc:	e002      	b.n	8003ad4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc ffa0 	bl	8000a14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e002      	b.n	8003ade <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b22:	f023 030c 	bic.w	r3, r3, #12
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <UART_SetConfig+0x114>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d103      	bne.n	8003b58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7fe fb9e 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	e002      	b.n	8003b5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7fe fb86 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009a      	lsls	r2, r3, #2
 8003b68:	441a      	add	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <UART_SetConfig+0x118>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	0119      	lsls	r1, r3, #4
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009a      	lsls	r2, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <UART_SetConfig+0x118>)
 8003b96:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2064      	movs	r0, #100	; 0x64
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3332      	adds	r3, #50	; 0x32
 8003ba8:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <UART_SetConfig+0x118>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb4:	4419      	add	r1, r3
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009a      	lsls	r2, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <UART_SetConfig+0x118>)
 8003bce:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2064      	movs	r0, #100	; 0x64
 8003bd6:	fb00 f303 	mul.w	r3, r0, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <UART_SetConfig+0x118>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	440a      	add	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	51eb851f 	.word	0x51eb851f

08003c04 <__libc_init_array>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	2600      	movs	r6, #0
 8003c08:	4d0c      	ldr	r5, [pc, #48]	; (8003c3c <__libc_init_array+0x38>)
 8003c0a:	4c0d      	ldr	r4, [pc, #52]	; (8003c40 <__libc_init_array+0x3c>)
 8003c0c:	1b64      	subs	r4, r4, r5
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	42a6      	cmp	r6, r4
 8003c12:	d109      	bne.n	8003c28 <__libc_init_array+0x24>
 8003c14:	f000 f822 	bl	8003c5c <_init>
 8003c18:	2600      	movs	r6, #0
 8003c1a:	4d0a      	ldr	r5, [pc, #40]	; (8003c44 <__libc_init_array+0x40>)
 8003c1c:	4c0a      	ldr	r4, [pc, #40]	; (8003c48 <__libc_init_array+0x44>)
 8003c1e:	1b64      	subs	r4, r4, r5
 8003c20:	10a4      	asrs	r4, r4, #2
 8003c22:	42a6      	cmp	r6, r4
 8003c24:	d105      	bne.n	8003c32 <__libc_init_array+0x2e>
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2c:	4798      	blx	r3
 8003c2e:	3601      	adds	r6, #1
 8003c30:	e7ee      	b.n	8003c10 <__libc_init_array+0xc>
 8003c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c36:	4798      	blx	r3
 8003c38:	3601      	adds	r6, #1
 8003c3a:	e7f2      	b.n	8003c22 <__libc_init_array+0x1e>
 8003c3c:	08003c9c 	.word	0x08003c9c
 8003c40:	08003c9c 	.word	0x08003c9c
 8003c44:	08003c9c 	.word	0x08003c9c
 8003c48:	08003ca4 	.word	0x08003ca4

08003c4c <memset>:
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4402      	add	r2, r0
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d100      	bne.n	8003c56 <memset+0xa>
 8003c54:	4770      	bx	lr
 8003c56:	f803 1b01 	strb.w	r1, [r3], #1
 8003c5a:	e7f9      	b.n	8003c50 <memset+0x4>

08003c5c <_init>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr

08003c68 <_fini>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr

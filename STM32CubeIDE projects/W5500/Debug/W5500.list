
W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000557c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b4  080057b4  000204fc  2**0
                  CONTENTS
  4 .ARM          00000000  080057b4  080057b4  000204fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b4  080057b4  000204fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004fc  20000000  080057c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002140  20000500  08005cc0  00020500  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002640  08005cc0  00022640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117f4  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae0  00000000  00000000  00031d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00034800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  000358e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a730  00000000  00000000  000368c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b73  00000000  00000000  00050ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f111  00000000  00000000  00062b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1c7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f4  00000000  00000000  000f1ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000500 	.word	0x20000500
 8000128:	00000000 	.word	0x00000000
 800012c:	08005670 	.word	0x08005670

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000504 	.word	0x20000504
 8000148:	08005670 	.word	0x08005670

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
//#pragma once
#include "W5500.h"

W5500::W5500(
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	807b      	strh	r3, [r7, #2]
		SPI_HandleTypeDef* hspi_m,
		GPIO_TypeDef* W5500_CS_GPIO_Port_m,
		uint16_t W5500_CS_Pin_m,
		GPIO_TypeDef* W5500_RST_GPIO_Port_m,
		uint16_t W5500_RST_Pin_m
		)
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	3310      	adds	r3, #16
 800016e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f005 f9ed 	bl	8005554 <memset>
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f005 f9e4 	bl	8005554 <memset>
{
	hspi_w = hspi_m;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	68ba      	ldr	r2, [r7, #8]
 8000190:	601a      	str	r2, [r3, #0]
	W5500_CS_GPIO_Port_w = W5500_CS_GPIO_Port_m;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	605a      	str	r2, [r3, #4]
	W5500_CS_Pin_w = W5500_CS_Pin_m;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	887a      	ldrh	r2, [r7, #2]
 800019c:	819a      	strh	r2, [r3, #12]
	W5500_RST_GPIO_Port_w = W5500_RST_GPIO_Port_m;
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	69ba      	ldr	r2, [r7, #24]
 80001a2:	609a      	str	r2, [r3, #8]
	W5500_RST_Pin_w = W5500_RST_Pin_m;
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	8bba      	ldrh	r2, [r7, #28]
 80001a8:	81da      	strh	r2, [r3, #14]
}
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	4618      	mov	r0, r3
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <_ZN5W5500D1Ev>:

W5500::~W5500()
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
{
}
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	4618      	mov	r0, r3
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <_ZN5W55005resetEv>:

// аппаратный сброс чипа
void W5500::reset()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// для аппаратного сброса "тянем" вход RSTn к "0" на 1 мс
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_RESET);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6898      	ldr	r0, [r3, #8]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	89db      	ldrh	r3, [r3, #14]
 80001d8:	2200      	movs	r2, #0
 80001da:	4619      	mov	r1, r3
 80001dc:	f002 ff5f 	bl	800309e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f002 f9df 	bl	80025a4 <HAL_Delay>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	6898      	ldr	r0, [r3, #8]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	89db      	ldrh	r3, [r3, #14]
 80001ee:	2201      	movs	r2, #1
 80001f0:	4619      	mov	r1, r3
 80001f2:	f002 ff54 	bl	800309e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f002 f9d4 	bl	80025a4 <HAL_Delay>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <_ZN5W550015readByteFromCRBEh>:

//---------------------------------------------------------------------------

// читаем байт из регистра блока CRB
uint8_t W5500::readByteFromCRB(uint8_t address)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af02      	add	r7, sp, #8
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	mosiBytes_w[0] = 0;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	78fa      	ldrb	r2, [r7, #3]
 800021a:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	6858      	ldr	r0, [r3, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	899b      	ldrh	r3, [r3, #12]
 800022a:	2200      	movs	r2, #0
 800022c:	4619      	mov	r1, r3
 800022e:	f002 ff36 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f103 0110 	add.w	r1, r3, #16
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2304      	movs	r3, #4
 800024a:	f003 fd35 	bl	8003cb8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6858      	ldr	r0, [r3, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	899b      	ldrh	r3, [r3, #12]
 8000256:	2201      	movs	r2, #1
 8000258:	4619      	mov	r1, r3
 800025a:	f002 ff20 	bl	800309e <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <_ZN5W550015writeArrayToCRBEPhhh>:
	return;
}

// записываем массив байт в регистры блока CRB
void W5500::writeArrayToCRB(uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	460b      	mov	r3, r1
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	4613      	mov	r3, r2
 8000280:	71bb      	strb	r3, [r7, #6]
	mosiBytes_w[0] = 0;
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2200      	movs	r2, #0
 8000286:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	79ba      	ldrb	r2, [r7, #6]
 800028c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	2204      	movs	r2, #4
 8000292:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	429a      	cmp	r2, r3
 800029e:	da0d      	bge.n	80002bc <_ZN5W550015writeArrayToCRBEPhhh+0x50>
	{
		mosiBytes_w[i+3] = array[i];
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	441a      	add	r2, r3
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3303      	adds	r3, #3
 80002aa:	7811      	ldrb	r1, [r2, #0]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	4413      	add	r3, r2
 80002b0:	460a      	mov	r2, r1
 80002b2:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	3301      	adds	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	e7ed      	b.n	8000298 <_ZN5W550015writeArrayToCRBEPhhh+0x2c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	6858      	ldr	r0, [r3, #4]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	899b      	ldrh	r3, [r3, #12]
 80002c4:	2200      	movs	r2, #0
 80002c6:	4619      	mov	r1, r3
 80002c8:	f002 fee9 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f103 0110 	add.w	r1, r3, #16
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	3303      	adds	r3, #3
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	f003 fbad 	bl	8003a40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	6858      	ldr	r0, [r3, #4]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	899b      	ldrh	r3, [r3, #12]
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	f002 fed4 	bl	800309e <HAL_GPIO_WritePin>
	return;
 80002f6:	bf00      	nop
}
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <_ZN5W550015readByteFromSRBEhh>:

// читаем байт из регистра блока SRB
uint8_t W5500::readByteFromSRB(uint8_t socket, uint8_t address)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b084      	sub	sp, #16
 8000302:	af02      	add	r7, sp, #8
 8000304:	6078      	str	r0, [r7, #4]
 8000306:	460b      	mov	r3, r1
 8000308:	70fb      	strb	r3, [r7, #3]
 800030a:	4613      	mov	r3, r2
 800030c:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	78ba      	ldrb	r2, [r7, #2]
 8000318:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	78fa      	ldrb	r2, [r7, #3]
 800031e:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6858      	ldr	r0, [r3, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	899b      	ldrh	r3, [r3, #12]
 8000328:	2200      	movs	r2, #0
 800032a:	4619      	mov	r1, r3
 800032c:	f002 feb7 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6818      	ldr	r0, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f103 0110 	add.w	r1, r3, #16
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2304      	movs	r3, #4
 8000348:	f003 fcb6 	bl	8003cb8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6858      	ldr	r0, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	899b      	ldrh	r3, [r3, #12]
 8000354:	2201      	movs	r2, #1
 8000356:	4619      	mov	r1, r3
 8000358:	f002 fea1 	bl	800309e <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <_ZN5W550015readWordFromSRBEhh>:

// читаем слово (2 байта) из регистров блока SRB
uint16_t W5500::readWordFromSRB(uint8_t socket, uint8_t address)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b086      	sub	sp, #24
 800036e:	af02      	add	r7, sp, #8
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	460b      	mov	r3, r1
 8000374:	70fb      	strb	r3, [r7, #3]
 8000376:	4613      	mov	r3, r2
 8000378:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	78ba      	ldrb	r2, [r7, #2]
 8000384:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	78fa      	ldrb	r2, [r7, #3]
 800038a:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6858      	ldr	r0, [r3, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	899b      	ldrh	r3, [r3, #12]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	f002 fe81 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 5, 1000);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6818      	ldr	r0, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f103 0110 	add.w	r1, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80003ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2305      	movs	r3, #5
 80003b4:	f003 fc80 	bl	8003cb8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6858      	ldr	r0, [r3, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	899b      	ldrh	r3, [r3, #12]
 80003c0:	2201      	movs	r2, #1
 80003c2:	4619      	mov	r1, r3
 80003c4:	f002 fe6b 	bl	800309e <HAL_GPIO_WritePin>
	word_w5500 temp;
	temp.byte[0] = misoBytes_w[4];
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80003ce:	733b      	strb	r3, [r7, #12]
	temp.byte[1] = misoBytes_w[3];
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80003d6:	737b      	strb	r3, [r7, #13]
	return temp.word;
 80003d8:	89bb      	ldrh	r3, [r7, #12]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <_ZN5W550014writeByteToSRBEhhh>:
	return;
}

// записываем байт в регистр блока SRB
void W5500::writeByteToSRB(uint8_t socket, uint8_t value, uint8_t address)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b082      	sub	sp, #8
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	4608      	mov	r0, r1
 80003ec:	4611      	mov	r1, r2
 80003ee:	461a      	mov	r2, r3
 80003f0:	4603      	mov	r3, r0
 80003f2:	70fb      	strb	r3, [r7, #3]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70bb      	strb	r3, [r7, #2]
 80003f8:	4613      	mov	r3, r2
 80003fa:	707b      	strb	r3, [r7, #1]
	mosiBytes_w[0] = 0;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	787a      	ldrb	r2, [r7, #1]
 8000406:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	b2da      	uxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = value;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	78ba      	ldrb	r2, [r7, #2]
 8000418:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6858      	ldr	r0, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	899b      	ldrh	r3, [r3, #12]
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	f002 fe3a 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 1000);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f103 0110 	add.w	r1, r3, #16
 8000434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000438:	2204      	movs	r2, #4
 800043a:	f003 fb01 	bl	8003a40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6858      	ldr	r0, [r3, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	899b      	ldrh	r3, [r3, #12]
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	f002 fe28 	bl	800309e <HAL_GPIO_WritePin>
	return;
 800044e:	bf00      	nop
}
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_ZN5W550014writeWordToSRBEhth>:

// записываем слово (2 байта) в регистры блока SRB
void W5500::writeWordToSRB(uint8_t socket, uint16_t value, uint8_t address)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b084      	sub	sp, #16
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	4608      	mov	r0, r1
 8000460:	4611      	mov	r1, r2
 8000462:	461a      	mov	r2, r3
 8000464:	4603      	mov	r3, r0
 8000466:	70fb      	strb	r3, [r7, #3]
 8000468:	460b      	mov	r3, r1
 800046a:	803b      	strh	r3, [r7, #0]
 800046c:	4613      	mov	r3, r2
 800046e:	70bb      	strb	r3, [r7, #2]
	word_w5500 temp;
	temp.word = value;
 8000470:	883b      	ldrh	r3, [r7, #0]
 8000472:	81bb      	strh	r3, [r7, #12]
	mosiBytes_w[0] = 0;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	78ba      	ldrb	r2, [r7, #2]
 800047e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	b2da      	uxtb	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = temp.byte[1];
 800048c:	7b7a      	ldrb	r2, [r7, #13]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = temp.byte[0];
 8000492:	7b3a      	ldrb	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	751a      	strb	r2, [r3, #20]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6858      	ldr	r0, [r3, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	899b      	ldrh	r3, [r3, #12]
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	f002 fdfb 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 5, 1000);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f103 0110 	add.w	r1, r3, #16
 80004b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b6:	2205      	movs	r2, #5
 80004b8:	f003 fac2 	bl	8003a40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6858      	ldr	r0, [r3, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	899b      	ldrh	r3, [r3, #12]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	f002 fde9 	bl	800309e <HAL_GPIO_WritePin>
	return;
 80004cc:	bf00      	nop
}
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_ZN5W550015writeArrayToSRBEhPhhh>:

// записываем массив байт в регистры блока SRB
void W5500::writeArrayToSRB(uint8_t socket, uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	461a      	mov	r2, r3
 80004e0:	460b      	mov	r3, r1
 80004e2:	72fb      	strb	r3, [r7, #11]
 80004e4:	4613      	mov	r3, r2
 80004e6:	72bb      	strb	r3, [r7, #10]
	mosiBytes_w[0] = 0;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2200      	movs	r2, #0
 80004ec:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004f4:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	7abb      	ldrb	r3, [r7, #10]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	429a      	cmp	r2, r3
 800050c:	da0d      	bge.n	800052a <_ZN5W550015writeArrayToSRBEhPhhh+0x56>
	{
		mosiBytes_w[i+3] = array[i];
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	441a      	add	r2, r3
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3303      	adds	r3, #3
 8000518:	7811      	ldrb	r1, [r2, #0]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	460a      	mov	r2, r1
 8000520:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e7ed      	b.n	8000506 <_ZN5W550015writeArrayToSRBEhPhhh+0x32>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6858      	ldr	r0, [r3, #4]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	899b      	ldrh	r3, [r3, #12]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	f002 fdb2 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f103 0110 	add.w	r1, r3, #16
 8000544:	7abb      	ldrb	r3, [r7, #10]
 8000546:	b29b      	uxth	r3, r3
 8000548:	3303      	adds	r3, #3
 800054a:	b29a      	uxth	r2, r3
 800054c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000550:	f003 fa76 	bl	8003a40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	899b      	ldrh	r3, [r3, #12]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f002 fd9d 	bl	800309e <HAL_GPIO_WritePin>
	return;
 8000564:	bf00      	nop
}
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <_ZN5W550021readArrayFromRXbufferEhPht6word_y>:

//---------------------------------------------------------------------------

// читаем массив байт в буфер TX
void W5500::readArrayFromRXbuffer(uint8_t socket, uint8_t* destinationArray, uint16_t sizeArray, word_y beginAddress)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b089      	sub	sp, #36	; 0x24
 8000570:	af02      	add	r7, sp, #8
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	72fb      	strb	r3, [r7, #11]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 8000580:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 8000588:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket + 16);
 8000590:	7afb      	ldrb	r3, [r7, #11]
 8000592:	3310      	adds	r3, #16
 8000594:	b2da      	uxtb	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6858      	ldr	r0, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	899b      	ldrh	r3, [r3, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	f002 fd7a 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, (sizeArray + 3), 1000);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0110 	add.w	r1, r3, #16
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80005ba:	893b      	ldrh	r3, [r7, #8]
 80005bc:	3303      	adds	r3, #3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80005c4:	9400      	str	r4, [sp, #0]
 80005c6:	f003 fb77 	bl	8003cb8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6858      	ldr	r0, [r3, #4]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f002 fd62 	bl	800309e <HAL_GPIO_WritePin>
	for(int i = 0; i < sizeArray; ++i)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	893b      	ldrh	r3, [r7, #8]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	da0d      	bge.n	8000602 <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x96>
	{
		destinationArray[i] = misoBytes_w[i+3];
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	1cda      	adds	r2, r3, #3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	68f9      	ldr	r1, [r7, #12]
 80005f2:	440a      	add	r2, r1
 80005f4:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 80005f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeArray; ++i)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e7ed      	b.n	80005de <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x72>
	}
	return;
 8000602:	bf00      	nop
}
 8000604:	371c      	adds	r7, #28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd90      	pop	{r4, r7, pc}

0800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>:


// записываем массив байт в буфер TX
void W5500::writeArrayToTXbuffer(uint8_t socket, uint8_t* array, uint16_t sizeArray, word_y beginAddress)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	461a      	mov	r2, r3
 8000616:	460b      	mov	r3, r1
 8000618:	72fb      	strb	r3, [r7, #11]
 800061a:	4613      	mov	r3, r2
 800061c:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 800061e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 8000626:	f897 2020 	ldrb.w	r2, [r7, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = ((socket + 8) | 0b00000100);
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	3308      	adds	r3, #8
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b25b      	sxtb	r3, r3
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	893b      	ldrh	r3, [r7, #8]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	429a      	cmp	r2, r3
 800064c:	da0d      	bge.n	800066a <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x60>
	{
		mosiBytes_w[i+3] = array[i];
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	441a      	add	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3303      	adds	r3, #3
 8000658:	7811      	ldrb	r1, [r2, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e7ed      	b.n	8000646 <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x3c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6858      	ldr	r0, [r3, #4]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	f002 fd12 	bl	800309e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f103 0110 	add.w	r1, r3, #16
 8000684:	893b      	ldrh	r3, [r7, #8]
 8000686:	3303      	adds	r3, #3
 8000688:	b29a      	uxth	r2, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	f003 f9d7 	bl	8003a40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6858      	ldr	r0, [r3, #4]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	899b      	ldrh	r3, [r3, #12]
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	f002 fcfe 	bl	800309e <HAL_GPIO_WritePin>
	return;
 80006a2:	bf00      	nop
}
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_ZN5W550013receivePacketEhPhPt>:

//---------------------------------------------------------------------------

// получаем данные по протоколу UDP
void W5500::receivePacket(uint8_t socket, uint8_t* dataForReceive, uint16_t* sizeArray)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b08a      	sub	sp, #40	; 0x28
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	460b      	mov	r3, r1
 80006b8:	72fb      	strb	r3, [r7, #11]
	// временные переменные для хранения значений регистров RX_RSR и RX_RD
	word_y valueRSR, valueRSRretry, valueRD;

	// читаем регистр RX_RSR (разница между значениями RX_WR и RX_RD)
	valueRSR.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2226      	movs	r2, #38	; 0x26
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff fe52 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006c6:	4603      	mov	r3, r0
 80006c8:	83bb      	strh	r3, [r7, #28]
	// считываем еще раз
	valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	2226      	movs	r2, #38	; 0x26
 80006ce:	4619      	mov	r1, r3
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff fe4a 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006d6:	4603      	mov	r3, r0
 80006d8:	833b      	strh	r3, [r7, #24]
	// сравниваем, тем самым исключая изменения в нём в момент считывания
	while (valueRSR.word != valueRSRretry.word)
 80006da:	8bba      	ldrh	r2, [r7, #28]
 80006dc:	8b3b      	ldrh	r3, [r7, #24]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d00a      	beq.n	80006f8 <_ZN5W550013receivePacketEhPhPt+0x4e>
	{
		valueRSR.word = valueRSRretry.word;
 80006e2:	8b3b      	ldrh	r3, [r7, #24]
 80006e4:	83bb      	strh	r3, [r7, #28]
		valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	2226      	movs	r2, #38	; 0x26
 80006ea:	4619      	mov	r1, r3
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff fe3c 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	833b      	strh	r3, [r7, #24]
	while (valueRSR.word != valueRSRretry.word)
 80006f6:	e7f0      	b.n	80006da <_ZN5W550013receivePacketEhPhPt+0x30>
	}

	// читаем регистр RX_RD (указатель на начало полученных данных)
	valueRD.word = readWordFromSRB(socket, W5500_Sn_RX_RD);
 80006f8:	7afb      	ldrb	r3, [r7, #11]
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	4619      	mov	r1, r3
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff fe33 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000704:	4603      	mov	r3, r0
 8000706:	82bb      	strh	r3, [r7, #20]

	// читаем буфер RX
	readArrayFromRXbuffer(socket, dataForReceive, valueRSR.word, valueRD);
 8000708:	8bba      	ldrh	r2, [r7, #28]
 800070a:	7af9      	ldrb	r1, [r7, #11]
 800070c:	8abb      	ldrh	r3, [r7, #20]
 800070e:	f8ad 3000 	strh.w	r3, [sp]
 8000712:	4613      	mov	r3, r2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff28 	bl	800056c <_ZN5W550021readArrayFromRXbufferEhPht6word_y>

	// увеличиваем значение указателя на полученные данные на число считанных байт
	valueRD.word += valueRSR.word;
 800071c:	8aba      	ldrh	r2, [r7, #20]
 800071e:	8bbb      	ldrh	r3, [r7, #28]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	82bb      	strh	r3, [r7, #20]
	writeWordToSRB(socket, valueRD.word, W5500_Sn_RX_RD);
 8000726:	8aba      	ldrh	r2, [r7, #20]
 8000728:	7af9      	ldrb	r1, [r7, #11]
 800072a:	2328      	movs	r3, #40	; 0x28
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff fe92 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// завершаем процесс чтения из буфера RX
	writeByteToSRB(socket, W5500_Sn_CR_RECV, W5500_Sn_CR);
 8000732:	7af9      	ldrb	r1, [r7, #11]
 8000734:	2301      	movs	r3, #1
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff fe52 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

	// записываем значение полученных байт
	*sizeArray = valueRSR.word;
 800073e:	8bba      	ldrh	r2, [r7, #28]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	801a      	strh	r2, [r3, #0]
	return;
 8000744:	bf00      	nop
}
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <_ZN5W550010sendPacketEhPht>:

// отправляем данные по протоколу UDP
void W5500::sendPacket(uint8_t socket, uint8_t* dataForSend, uint16_t sizeArray)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af02      	add	r7, sp, #8
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	461a      	mov	r2, r3
 8000758:	460b      	mov	r3, r1
 800075a:	72fb      	strb	r3, [r7, #11]
 800075c:	4613      	mov	r3, r2
 800075e:	813b      	strh	r3, [r7, #8]
	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	2220      	movs	r2, #32
 8000764:	4619      	mov	r1, r3
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f7ff fdff 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 800076c:	4603      	mov	r3, r0
 800076e:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000770:	8abb      	ldrh	r3, [r7, #20]
 8000772:	893a      	ldrh	r2, [r7, #8]
 8000774:	429a      	cmp	r2, r3
 8000776:	d823      	bhi.n	80007c0 <_ZN5W550010sendPacketEhPht+0x74>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 8000778:	7afb      	ldrb	r3, [r7, #11]
 800077a:	2224      	movs	r2, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff fdf3 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000784:	4603      	mov	r3, r0
 8000786:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, dataForSend, sizeArray, valueWR);
 8000788:	893a      	ldrh	r2, [r7, #8]
 800078a:	7af9      	ldrb	r1, [r7, #11]
 800078c:	8a3b      	ldrh	r3, [r7, #16]
 800078e:	f8ad 3000 	strh.w	r3, [sp]
 8000792:	4613      	mov	r3, r2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff ff37 	bl	800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 800079c:	8a3a      	ldrh	r2, [r7, #16]
 800079e:	893b      	ldrh	r3, [r7, #8]
 80007a0:	4413      	add	r3, r2
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 80007a6:	8a3a      	ldrh	r2, [r7, #16]
 80007a8:	7af9      	ldrb	r1, [r7, #11]
 80007aa:	2324      	movs	r3, #36	; 0x24
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff fe52 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 80007b2:	7af9      	ldrb	r1, [r7, #11]
 80007b4:	2301      	movs	r3, #1
 80007b6:	2220      	movs	r2, #32
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff fe12 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
	return;
 80007be:	e000      	b.n	80007c2 <_ZN5W550010sendPacketEhPht+0x76>
	if((uint16_t)sizeArray > valueFSR.word) return;
 80007c0:	bf00      	nop
}
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZN5W550010sendStringEhPc>:

// отправляем строку
void W5500::sendString(uint8_t socket, char* stringForSend)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	460b      	mov	r3, r1
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	72fb      	strb	r3, [r7, #11]
	// вычисляем размер передаваемой строки
	uint16_t sizeArray = strlen(stringForSend);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fcb8 	bl	800014c <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	82fb      	strh	r3, [r7, #22]

	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	2220      	movs	r2, #32
 80007e4:	4619      	mov	r1, r3
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff fdbf 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80007ec:	4603      	mov	r3, r0
 80007ee:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 80007f0:	8abb      	ldrh	r3, [r7, #20]
 80007f2:	8afa      	ldrh	r2, [r7, #22]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d823      	bhi.n	8000840 <_ZN5W550010sendStringEhPc+0x78>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	2224      	movs	r2, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff fdb3 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000804:	4603      	mov	r3, r0
 8000806:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, (uint8_t*)stringForSend, sizeArray, valueWR);
 8000808:	8afa      	ldrh	r2, [r7, #22]
 800080a:	7af9      	ldrb	r1, [r7, #11]
 800080c:	8a3b      	ldrh	r3, [r7, #16]
 800080e:	f8ad 3000 	strh.w	r3, [sp]
 8000812:	4613      	mov	r3, r2
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff fef7 	bl	800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 800081c:	8a3a      	ldrh	r2, [r7, #16]
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	4413      	add	r3, r2
 8000822:	b29b      	uxth	r3, r3
 8000824:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 8000826:	8a3a      	ldrh	r2, [r7, #16]
 8000828:	7af9      	ldrb	r1, [r7, #11]
 800082a:	2324      	movs	r3, #36	; 0x24
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff fe12 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 8000832:	7af9      	ldrb	r1, [r7, #11]
 8000834:	2301      	movs	r3, #1
 8000836:	2220      	movs	r2, #32
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fdd2 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
	return;
 800083e:	e000      	b.n	8000842 <_ZN5W550010sendStringEhPc+0x7a>
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000840:	bf00      	nop
}
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
}
 8000850:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <__NVIC_SystemReset+0x24>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800085a:	4904      	ldr	r1, [pc, #16]	; (800086c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_SystemReset+0x28>)
 800085e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000860:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000862:	f3bf 8f4f 	dsb	sy
}
 8000866:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <__NVIC_SystemReset+0x20>
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	05fa0004 	.word	0x05fa0004

08000874 <_Z8hex2charRc>:
char textError[] {"ERROR"};
char textApply[] {"Your setting will be saved and device will be reboot"};
char textNotApply[] {"Your setting is NOT saved\n\n\rPress [ENTER] to disconnect "};

void hex2char(char& digit)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (digit <= 9) digit += 48;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b09      	cmp	r3, #9
 8000882:	d806      	bhi.n	8000892 <_Z8hex2charRc+0x1e>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	3330      	adds	r3, #48	; 0x30
 800088a:	b2da      	uxtb	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	701a      	strb	r2, [r3, #0]
	else digit += 55;
	return;
 8000890:	e006      	b.n	80008a0 <_Z8hex2charRc+0x2c>
	else digit += 55;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3337      	adds	r3, #55	; 0x37
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	701a      	strb	r2, [r3, #0]
	return;
 800089e:	bf00      	nop
}
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <_Z10hex2letterRc>:

void hex2letter(char& digit)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	  if (digit <= 9) digit += 48;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b09      	cmp	r3, #9
 80008b6:	d806      	bhi.n	80008c6 <_Z10hex2letterRc+0x1e>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3330      	adds	r3, #48	; 0x30
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	701a      	strb	r2, [r3, #0]
	  else digit += 55;
	  return;
 80008c4:	e006      	b.n	80008d4 <_Z10hex2letterRc+0x2c>
	  else digit += 55;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3337      	adds	r3, #55	; 0x37
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	701a      	strb	r2, [r3, #0]
	  return;
 80008d2:	bf00      	nop
}
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <_Z14adr_int2stringPKhPc>:

// четыре байта в строку
void adr_int2string(const uint8_t* adr, char* text)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	int index{ 0 };
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
	char num, num2;
	for (int i = 0; i < 4; ++i)
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	dc64      	bgt.n	80009be <_Z14adr_int2stringPKhPc+0xe2>
	{
		num = adr[i] / 100;
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4a32      	ldr	r2, [pc, #200]	; (80009c8 <_Z14adr_int2stringPKhPc+0xec>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	73fb      	strb	r3, [r7, #15]
		if (num)
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d009      	beq.n	8000920 <_Z14adr_int2stringPKhPc+0x44>
		{
			text[index] = num + 48;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	3230      	adds	r2, #48	; 0x30
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	701a      	strb	r2, [r3, #0]
			++index;
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
		}
		num2 = (adr[i] / 10) % 10;
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4a28      	ldr	r2, [pc, #160]	; (80009cc <_Z14adr_int2stringPKhPc+0xf0>)
 800092a:	fba2 2303 	umull	r2, r3, r2, r3
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <_Z14adr_int2stringPKhPc+0xf0>)
 8000934:	fba3 1302 	umull	r1, r3, r3, r2
 8000938:	08d9      	lsrs	r1, r3, #3
 800093a:	460b      	mov	r3, r1
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	73bb      	strb	r3, [r7, #14]
		if (num2 || num)
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_Z14adr_int2stringPKhPc+0x76>
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d009      	beq.n	8000966 <_Z14adr_int2stringPKhPc+0x8a>
		{
			text[index] = num2 + 48;
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	4413      	add	r3, r2
 8000958:	7bba      	ldrb	r2, [r7, #14]
 800095a:	3230      	adds	r2, #48	; 0x30
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	701a      	strb	r2, [r3, #0]
			++index;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
		}
		text[index] = adr[i] % 10 + 48;
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <_Z14adr_int2stringPKhPc+0xf0>)
 8000970:	fba3 1302 	umull	r1, r3, r3, r2
 8000974:	08d9      	lsrs	r1, r3, #3
 8000976:	460b      	mov	r3, r1
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	b2da      	uxtb	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	6839      	ldr	r1, [r7, #0]
 8000986:	440b      	add	r3, r1
 8000988:	3230      	adds	r2, #48	; 0x30
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	701a      	strb	r2, [r3, #0]
		++index;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
		if (i < 3)
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	2b02      	cmp	r3, #2
 8000998:	dc08      	bgt.n	80009ac <_Z14adr_int2stringPKhPc+0xd0>
		{
			text[index] = '.';
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	222e      	movs	r2, #46	; 0x2e
 80009a2:	701a      	strb	r2, [r3, #0]
			++index;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e004      	b.n	80009b6 <_Z14adr_int2stringPKhPc+0xda>
		}
		else
		{
			text[index] = '\0';
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i)
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	3301      	adds	r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	e797      	b.n	80008ee <_Z14adr_int2stringPKhPc+0x12>
		}
	}
	return;
 80009be:	bf00      	nop
}
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	51eb851f 	.word	0x51eb851f
 80009cc:	cccccccd 	.word	0xcccccccd

080009d0 <_Z14mac_int2stringPKhPc>:

// шесть октетов MAC-адреса в строку
void mac_int2string(const uint8_t* adr, char* text)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	int index{ 0 };
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 6; ++i)
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	2b05      	cmp	r3, #5
 80009e6:	dc3b      	bgt.n	8000a60 <_Z14mac_int2stringPKhPc+0x90>
	{
		text[index] = adr[i] / 16;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	440b      	add	r3, r1
 80009f6:	0912      	lsrs	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	701a      	strb	r2, [r3, #0]
		hex2char(text[index]);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff36 	bl	8000874 <_Z8hex2charRc>
		++index;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
		text[index] = adr[i] % 16;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6839      	ldr	r1, [r7, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f002 020f 	and.w	r2, r2, #15
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	701a      	strb	r2, [r3, #0]
		hex2char(text[index]);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff22 	bl	8000874 <_Z8hex2charRc>
		++index;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
		if (i < 5)
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	dc08      	bgt.n	8000a4e <_Z14mac_int2stringPKhPc+0x7e>
		{
			text[index] = ':';
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	223a      	movs	r2, #58	; 0x3a
 8000a44:	701a      	strb	r2, [r3, #0]
			++index;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e004      	b.n	8000a58 <_Z14mac_int2stringPKhPc+0x88>
		}
		else
		{
			text[index] = '\0';
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	e7c0      	b.n	80009e2 <_Z14mac_int2stringPKhPc+0x12>
		}
	}
	return;
 8000a60:	bf00      	nop
}
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <_Z15byte_int2stringRKhPc>:

// байт адреса в строку
void byte_int2string(const uint8_t& byte, char* text)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	int index{ 0 };
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
	char num, num2;

	num = byte / 100;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4a29      	ldr	r2, [pc, #164]	; (8000b20 <_Z15byte_int2stringRKhPc+0xb8>)
 8000a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a80:	095b      	lsrs	r3, r3, #5
 8000a82:	72fb      	strb	r3, [r7, #11]
	if (num)
 8000a84:	7afb      	ldrb	r3, [r7, #11]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d009      	beq.n	8000a9e <_Z15byte_int2stringRKhPc+0x36>
	{
		text[index] = num + 48;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	7afa      	ldrb	r2, [r7, #11]
 8000a92:	3230      	adds	r2, #48	; 0x30
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	701a      	strb	r2, [r3, #0]
		++index;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
	}
	num2 = (byte / 10) % 10;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <_Z15byte_int2stringRKhPc+0xbc>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <_Z15byte_int2stringRKhPc+0xbc>)
 8000aae:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab2:	08d9      	lsrs	r1, r3, #3
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	72bb      	strb	r3, [r7, #10]
	if (num2 || num)
 8000ac0:	7abb      	ldrb	r3, [r7, #10]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d102      	bne.n	8000acc <_Z15byte_int2stringRKhPc+0x64>
 8000ac6:	7afb      	ldrb	r3, [r7, #11]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <_Z15byte_int2stringRKhPc+0x78>
	{
		text[index] = num2 + 48;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	7aba      	ldrb	r2, [r7, #10]
 8000ad4:	3230      	adds	r2, #48	; 0x30
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	701a      	strb	r2, [r3, #0]
		++index;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
	}
	text[index] = byte % 10 + 48;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <_Z15byte_int2stringRKhPc+0xbc>)
 8000ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aea:	08d9      	lsrs	r1, r3, #3
 8000aec:	460b      	mov	r3, r1
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	440b      	add	r3, r1
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	440b      	add	r3, r1
 8000afe:	3230      	adds	r2, #48	; 0x30
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	701a      	strb	r2, [r3, #0]
	++index;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]

	text[index] = '\0';
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]

	return;
 8000b14:	bf00      	nop
}
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	51eb851f 	.word	0x51eb851f
 8000b24:	cccccccd 	.word	0xcccccccd

08000b28 <_Z15macOctet2stringRKhPc>:

// октет MAC-адреса в строку
void macOctet2string(const uint8_t& byte, char* text)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	text[0] = byte / 16;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	701a      	strb	r2, [r3, #0]
	hex2letter(text[0]);
 8000b3e:	6838      	ldr	r0, [r7, #0]
 8000b40:	f7ff feb2 	bl	80008a8 <_Z10hex2letterRc>
	text[1] = byte % 16;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f002 020f 	and.w	r2, r2, #15
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	701a      	strb	r2, [r3, #0]
	hex2letter(text[1]);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fea5 	bl	80008a8 <_Z10hex2letterRc>
	text[2] = '\0';
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	3302      	adds	r3, #2
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_Z19concatenate3stringsPcPKcS1_>:

// склеивание трех строк
void concatenate3strings(char* moderated, const char* second, const char* third)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b087      	sub	sp, #28
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
	int index {0};
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
	int index2 {0};
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
	while (moderated[index] != '\0')
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <_Z19concatenate3stringsPcPKcS1_+0x28>
	{
		++index;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
	while (moderated[index] != '\0')
 8000b94:	e7f5      	b.n	8000b82 <_Z19concatenate3stringsPcPKcS1_+0x14>
	}
	while (second[index2] != '\0')
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00e      	beq.n	8000bc0 <_Z19concatenate3stringsPcPKcS1_+0x52>
	{
		moderated[index] = second[index2];
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	441a      	add	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	68f9      	ldr	r1, [r7, #12]
 8000bac:	440b      	add	r3, r1
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	701a      	strb	r2, [r3, #0]
		++index;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
		++index2;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
	while (second[index2] != '\0')
 8000bbe:	e7ea      	b.n	8000b96 <_Z19concatenate3stringsPcPKcS1_+0x28>
	}
	index2 = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
	while (third[index2] != '\0')
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00e      	beq.n	8000bee <_Z19concatenate3stringsPcPKcS1_+0x80>
	{
		moderated[index] = third[index2];
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	441a      	add	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	68f9      	ldr	r1, [r7, #12]
 8000bda:	440b      	add	r3, r1
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	701a      	strb	r2, [r3, #0]
		++index;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
		++index2;
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	3301      	adds	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
	while (third[index2] != '\0')
 8000bec:	e7ea      	b.n	8000bc4 <_Z19concatenate3stringsPcPKcS1_+0x56>
	}
	moderated[index] = '\0';
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
	return;
 8000bf8:	bf00      	nop
}
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <_Z19concatenate7stringsPcPS_>:

void concatenate7strings(char* newString, char** array)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b087      	sub	sp, #28
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
	int index {0};
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 7; ++i)
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	dc22      	bgt.n	8000c60 <_Z19concatenate7stringsPcPS_+0x5e>
	{
		int index2 {0};
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
		while (array[i][index2] != '\0')
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d012      	beq.n	8000c58 <_Z19concatenate7stringsPcPS_+0x56>
		{
			newString[index] = array[i][index2];
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	441a      	add	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	440b      	add	r3, r1
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	701a      	strb	r2, [r3, #0]
			++index;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
			++index2;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
		while (array[i][index2] != '\0')
 8000c56:	e7e2      	b.n	8000c1e <_Z19concatenate7stringsPcPS_+0x1c>
	for (int i = 0; i < 7; ++i)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	e7d9      	b.n	8000c14 <_Z19concatenate7stringsPcPS_+0x12>
		}
	}
	newString[index] = '\0';
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
	return;
 8000c6a:	bf00      	nop
}
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <_Z8fillTextv>:
	}
	else return 0;
}

void fillText()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	byte_int2string(crb.sipr0, textValue);
 8000c78:	493f      	ldr	r1, [pc, #252]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c7a:	4840      	ldr	r0, [pc, #256]	; (8000d7c <_Z8fillTextv+0x108>)
 8000c7c:	f7ff fef4 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text0, textValue, textEnd);
 8000c80:	4a3f      	ldr	r2, [pc, #252]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000c82:	493d      	ldr	r1, [pc, #244]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c84:	483f      	ldr	r0, [pc, #252]	; (8000d84 <_Z8fillTextv+0x110>)
 8000c86:	f7ff ff72 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.sipr1, textValue);
 8000c8a:	493b      	ldr	r1, [pc, #236]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c8c:	483e      	ldr	r0, [pc, #248]	; (8000d88 <_Z8fillTextv+0x114>)
 8000c8e:	f7ff feeb 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text1, textValue, textEnd);
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000c94:	4938      	ldr	r1, [pc, #224]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c96:	483d      	ldr	r0, [pc, #244]	; (8000d8c <_Z8fillTextv+0x118>)
 8000c98:	f7ff ff69 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.sipr2, textValue);
 8000c9c:	4936      	ldr	r1, [pc, #216]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c9e:	483c      	ldr	r0, [pc, #240]	; (8000d90 <_Z8fillTextv+0x11c>)
 8000ca0:	f7ff fee2 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text2, textValue, textEnd);
 8000ca4:	4a36      	ldr	r2, [pc, #216]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000ca6:	4934      	ldr	r1, [pc, #208]	; (8000d78 <_Z8fillTextv+0x104>)
 8000ca8:	483a      	ldr	r0, [pc, #232]	; (8000d94 <_Z8fillTextv+0x120>)
 8000caa:	f7ff ff60 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.sipr3, textValue);
 8000cae:	4932      	ldr	r1, [pc, #200]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cb0:	4839      	ldr	r0, [pc, #228]	; (8000d98 <_Z8fillTextv+0x124>)
 8000cb2:	f7ff fed9 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text3, textValue, textEnd);
 8000cb6:	4a32      	ldr	r2, [pc, #200]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000cb8:	492f      	ldr	r1, [pc, #188]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cba:	4838      	ldr	r0, [pc, #224]	; (8000d9c <_Z8fillTextv+0x128>)
 8000cbc:	f7ff ff57 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>

	byte_int2string(crb.subr0, textValue);
 8000cc0:	492d      	ldr	r1, [pc, #180]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cc2:	4837      	ldr	r0, [pc, #220]	; (8000da0 <_Z8fillTextv+0x12c>)
 8000cc4:	f7ff fed0 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text4, textValue, textEnd);
 8000cc8:	4a2d      	ldr	r2, [pc, #180]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000cca:	492b      	ldr	r1, [pc, #172]	; (8000d78 <_Z8fillTextv+0x104>)
 8000ccc:	4835      	ldr	r0, [pc, #212]	; (8000da4 <_Z8fillTextv+0x130>)
 8000cce:	f7ff ff4e 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.subr1, textValue);
 8000cd2:	4929      	ldr	r1, [pc, #164]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cd4:	4834      	ldr	r0, [pc, #208]	; (8000da8 <_Z8fillTextv+0x134>)
 8000cd6:	f7ff fec7 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text5, textValue, textEnd);
 8000cda:	4a29      	ldr	r2, [pc, #164]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000cdc:	4926      	ldr	r1, [pc, #152]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cde:	4833      	ldr	r0, [pc, #204]	; (8000dac <_Z8fillTextv+0x138>)
 8000ce0:	f7ff ff45 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.subr2, textValue);
 8000ce4:	4924      	ldr	r1, [pc, #144]	; (8000d78 <_Z8fillTextv+0x104>)
 8000ce6:	4832      	ldr	r0, [pc, #200]	; (8000db0 <_Z8fillTextv+0x13c>)
 8000ce8:	f7ff febe 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text6, textValue, textEnd);
 8000cec:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000cee:	4922      	ldr	r1, [pc, #136]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cf0:	4830      	ldr	r0, [pc, #192]	; (8000db4 <_Z8fillTextv+0x140>)
 8000cf2:	f7ff ff3c 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.subr3, textValue);
 8000cf6:	4920      	ldr	r1, [pc, #128]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cf8:	482f      	ldr	r0, [pc, #188]	; (8000db8 <_Z8fillTextv+0x144>)
 8000cfa:	f7ff feb5 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text7, textValue, textEnd);
 8000cfe:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d00:	491d      	ldr	r1, [pc, #116]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d02:	482e      	ldr	r0, [pc, #184]	; (8000dbc <_Z8fillTextv+0x148>)
 8000d04:	f7ff ff33 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>

	macOctet2string(crb.shar0, textValue);
 8000d08:	491b      	ldr	r1, [pc, #108]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d0a:	482d      	ldr	r0, [pc, #180]	; (8000dc0 <_Z8fillTextv+0x14c>)
 8000d0c:	f7ff ff0c 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text8, textValue, textEnd);
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d12:	4919      	ldr	r1, [pc, #100]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d14:	482b      	ldr	r0, [pc, #172]	; (8000dc4 <_Z8fillTextv+0x150>)
 8000d16:	f7ff ff2a 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar1, textValue);
 8000d1a:	4917      	ldr	r1, [pc, #92]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d1c:	482a      	ldr	r0, [pc, #168]	; (8000dc8 <_Z8fillTextv+0x154>)
 8000d1e:	f7ff ff03 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text9, textValue, textEnd);
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d24:	4914      	ldr	r1, [pc, #80]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d26:	4829      	ldr	r0, [pc, #164]	; (8000dcc <_Z8fillTextv+0x158>)
 8000d28:	f7ff ff21 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar2, textValue);
 8000d2c:	4912      	ldr	r1, [pc, #72]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d2e:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <_Z8fillTextv+0x15c>)
 8000d30:	f7ff fefa 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text10, textValue, textEnd);
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d36:	4910      	ldr	r1, [pc, #64]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d38:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <_Z8fillTextv+0x160>)
 8000d3a:	f7ff ff18 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar3, textValue);
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d40:	4825      	ldr	r0, [pc, #148]	; (8000dd8 <_Z8fillTextv+0x164>)
 8000d42:	f7ff fef1 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text11, textValue, textEnd);
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d48:	490b      	ldr	r1, [pc, #44]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d4a:	4824      	ldr	r0, [pc, #144]	; (8000ddc <_Z8fillTextv+0x168>)
 8000d4c:	f7ff ff0f 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar4, textValue);
 8000d50:	4909      	ldr	r1, [pc, #36]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d52:	4823      	ldr	r0, [pc, #140]	; (8000de0 <_Z8fillTextv+0x16c>)
 8000d54:	f7ff fee8 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text12, textValue, textEnd);
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d5a:	4907      	ldr	r1, [pc, #28]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <_Z8fillTextv+0x170>)
 8000d5e:	f7ff ff06 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar5, textValue);
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d64:	4820      	ldr	r0, [pc, #128]	; (8000de8 <_Z8fillTextv+0x174>)
 8000d66:	f7ff fedf 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text13, textValue, textEnd);
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d6c:	4902      	ldr	r1, [pc, #8]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d6e:	481f      	ldr	r0, [pc, #124]	; (8000dec <_Z8fillTextv+0x178>)
 8000d70:	f7ff fefd 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>

	return;
 8000d74:	bf00      	nop
}
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000051c 	.word	0x2000051c
 8000d7c:	2000039f 	.word	0x2000039f
 8000d80:	20000040 	.word	0x20000040
 8000d84:	20000000 	.word	0x20000000
 8000d88:	200003a0 	.word	0x200003a0
 8000d8c:	20000044 	.word	0x20000044
 8000d90:	200003a1 	.word	0x200003a1
 8000d94:	20000068 	.word	0x20000068
 8000d98:	200003a2 	.word	0x200003a2
 8000d9c:	2000008c 	.word	0x2000008c
 8000da0:	20000395 	.word	0x20000395
 8000da4:	200000b0 	.word	0x200000b0
 8000da8:	20000396 	.word	0x20000396
 8000dac:	200000dc 	.word	0x200000dc
 8000db0:	20000397 	.word	0x20000397
 8000db4:	20000108 	.word	0x20000108
 8000db8:	20000398 	.word	0x20000398
 8000dbc:	20000134 	.word	0x20000134
 8000dc0:	20000399 	.word	0x20000399
 8000dc4:	20000160 	.word	0x20000160
 8000dc8:	2000039a 	.word	0x2000039a
 8000dcc:	20000188 	.word	0x20000188
 8000dd0:	2000039b 	.word	0x2000039b
 8000dd4:	200001b0 	.word	0x200001b0
 8000dd8:	2000039c 	.word	0x2000039c
 8000ddc:	200001d8 	.word	0x200001d8
 8000de0:	2000039d 	.word	0x2000039d
 8000de4:	20000200 	.word	0x20000200
 8000de8:	2000039e 	.word	0x2000039e
 8000dec:	20000228 	.word	0x20000228

08000df0 <_Z13fillFinalTextv>:

void fillFinalText()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	adr_int2string(receivedIPAddress, text15);
 8000df4:	4908      	ldr	r1, [pc, #32]	; (8000e18 <_Z13fillFinalTextv+0x28>)
 8000df6:	4809      	ldr	r0, [pc, #36]	; (8000e1c <_Z13fillFinalTextv+0x2c>)
 8000df8:	f7ff fd70 	bl	80008dc <_Z14adr_int2stringPKhPc>
	adr_int2string(receivedSubnetMask, text17);
 8000dfc:	4908      	ldr	r1, [pc, #32]	; (8000e20 <_Z13fillFinalTextv+0x30>)
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <_Z13fillFinalTextv+0x34>)
 8000e00:	f7ff fd6c 	bl	80008dc <_Z14adr_int2stringPKhPc>
	mac_int2string(receivedMACAddress, text19);
 8000e04:	4908      	ldr	r1, [pc, #32]	; (8000e28 <_Z13fillFinalTextv+0x38>)
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <_Z13fillFinalTextv+0x3c>)
 8000e08:	f7ff fde2 	bl	80009d0 <_Z14mac_int2stringPKhPc>
	concatenate7strings(textFinal, arrFinalText);
 8000e0c:	4908      	ldr	r1, [pc, #32]	; (8000e30 <_Z13fillFinalTextv+0x40>)
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <_Z13fillFinalTextv+0x44>)
 8000e10:	f7ff fef7 	bl	8000c02 <_Z19concatenate7stringsPcPS_>
	return;
 8000e14:	bf00      	nop
}
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000520 	.word	0x20000520
 8000e1c:	200023c0 	.word	0x200023c0
 8000e20:	20000530 	.word	0x20000530
 8000e24:	200023c4 	.word	0x200023c4
 8000e28:	20000540 	.word	0x20000540
 8000e2c:	200023c8 	.word	0x200023c8
 8000e30:	20000300 	.word	0x20000300
 8000e34:	20000554 	.word	0x20000554

08000e38 <_Z12saveSettingsv>:

void saveSettings()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	crb.sipr0 = receivedIPAddress[0];
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <_Z12saveSettingsv+0x7c>)
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e42:	73da      	strb	r2, [r3, #15]
	crb.sipr1 = receivedIPAddress[1];
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <_Z12saveSettingsv+0x7c>)
 8000e46:	785a      	ldrb	r2, [r3, #1]
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e4a:	741a      	strb	r2, [r3, #16]
	crb.sipr2 = receivedIPAddress[2];
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <_Z12saveSettingsv+0x7c>)
 8000e4e:	789a      	ldrb	r2, [r3, #2]
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e52:	745a      	strb	r2, [r3, #17]
	crb.sipr3 = receivedIPAddress[3];
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <_Z12saveSettingsv+0x7c>)
 8000e56:	78da      	ldrb	r2, [r3, #3]
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e5a:	749a      	strb	r2, [r3, #18]
	crb.subr0 = receivedSubnetMask[0];
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <_Z12saveSettingsv+0x84>)
 8000e5e:	781a      	ldrb	r2, [r3, #0]
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e62:	715a      	strb	r2, [r3, #5]
	crb.subr1 = receivedSubnetMask[1];
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_Z12saveSettingsv+0x84>)
 8000e66:	785a      	ldrb	r2, [r3, #1]
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e6a:	719a      	strb	r2, [r3, #6]
	crb.subr2 = receivedSubnetMask[2];
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_Z12saveSettingsv+0x84>)
 8000e6e:	789a      	ldrb	r2, [r3, #2]
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e72:	71da      	strb	r2, [r3, #7]
	crb.subr3 = receivedSubnetMask[3];
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_Z12saveSettingsv+0x84>)
 8000e76:	78da      	ldrb	r2, [r3, #3]
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e7a:	721a      	strb	r2, [r3, #8]
	crb.shar0 = receivedMACAddress[0];
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e82:	725a      	strb	r2, [r3, #9]
	crb.shar1 = receivedMACAddress[1];
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e86:	785a      	ldrb	r2, [r3, #1]
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e8a:	729a      	strb	r2, [r3, #10]
	crb.shar2 = receivedMACAddress[2];
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e8e:	789a      	ldrb	r2, [r3, #2]
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e92:	72da      	strb	r2, [r3, #11]
	crb.shar3 = receivedMACAddress[3];
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e96:	78da      	ldrb	r2, [r3, #3]
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e9a:	731a      	strb	r2, [r3, #12]
	crb.shar4 = receivedMACAddress[4];
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e9e:	791a      	ldrb	r2, [r3, #4]
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000ea2:	735a      	strb	r2, [r3, #13]
	crb.shar5 = receivedMACAddress[5];
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000ea6:	795a      	ldrb	r2, [r3, #5]
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000eaa:	739a      	strb	r2, [r3, #14]

	writeFLASH();
 8000eac:	f000 f80a 	bl	8000ec4 <_Z10writeFLASHv>

	NVIC_SystemReset();
 8000eb0:	f7ff fcca 	bl	8000848 <__NVIC_SystemReset>
 8000eb4:	200023c0 	.word	0x200023c0
 8000eb8:	20000390 	.word	0x20000390
 8000ebc:	200023c4 	.word	0x200023c4
 8000ec0:	200023c8 	.word	0x200023c8

08000ec4 <_Z10writeFLASHv>:
extern struct CommonRegisterBlock crb;
extern struct SocketRegisterBlock srb0, srb1, srb2, srb3, srb4, srb5, srb6, srb7;

// Запись во FLASH
void writeFLASH()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
	// Открываем доступ к FLASH (она закрыта от случайной записи)
	HAL_FLASH_Unlock();
 8000eca:	f001 fdbd 	bl	8002a48 <HAL_FLASH_Unlock>

	// Объявляем структуру, необходимую для функции стирания страницы
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES; // Стираем постранично
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
	//eraseInit.Banks = FLASH_BANK_1;
	eraseInit.PageAddress = CONFIG_FLASHPAGE; // Адрес страницы для стирания
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <_Z10writeFLASHv+0x90>)
 8000ed4:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = 1; // Число страниц = 1
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]

	// Объявляем переменную для сохранения результата стирания FLASH (функции HAL_FLASHEx_Erase()), д.б. 0xFFFFFFFF (не используем)
	uint32_t statusFLASHerase {0};
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]

	// Очищаем страницу
	HAL_FLASHEx_Erase(&eraseInit, &statusFLASHerase);
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fe96 	bl	8002c18 <HAL_FLASHEx_Erase>

	// Записываем блок Common Register
	writeBlockFLASH(CONFIG_FLASHPAGE, (uint64_t*) &crb, sizeof(crb)/8);
 8000eec:	2206      	movs	r2, #6
 8000eee:	491a      	ldr	r1, [pc, #104]	; (8000f58 <_Z10writeFLASHv+0x94>)
 8000ef0:	4818      	ldr	r0, [pc, #96]	; (8000f54 <_Z10writeFLASHv+0x90>)
 8000ef2:	f000 f853 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 0 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 64, (uint64_t*) &srb0, sizeof(srb0)/8);
 8000ef6:	2206      	movs	r2, #6
 8000ef8:	4918      	ldr	r1, [pc, #96]	; (8000f5c <_Z10writeFLASHv+0x98>)
 8000efa:	4819      	ldr	r0, [pc, #100]	; (8000f60 <_Z10writeFLASHv+0x9c>)
 8000efc:	f000 f84e 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 1 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 120, (uint64_t*) &srb1, sizeof(srb1)/8);
 8000f00:	2206      	movs	r2, #6
 8000f02:	4918      	ldr	r1, [pc, #96]	; (8000f64 <_Z10writeFLASHv+0xa0>)
 8000f04:	4818      	ldr	r0, [pc, #96]	; (8000f68 <_Z10writeFLASHv+0xa4>)
 8000f06:	f000 f849 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 2 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 176, (uint64_t*) &srb2, sizeof(srb2)/8);
 8000f0a:	2206      	movs	r2, #6
 8000f0c:	4917      	ldr	r1, [pc, #92]	; (8000f6c <_Z10writeFLASHv+0xa8>)
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <_Z10writeFLASHv+0xac>)
 8000f10:	f000 f844 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 3 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 232, (uint64_t*) &srb3, sizeof(srb3)/8);
 8000f14:	2206      	movs	r2, #6
 8000f16:	4917      	ldr	r1, [pc, #92]	; (8000f74 <_Z10writeFLASHv+0xb0>)
 8000f18:	4817      	ldr	r0, [pc, #92]	; (8000f78 <_Z10writeFLASHv+0xb4>)
 8000f1a:	f000 f83f 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 4 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 288, (uint64_t*) &srb4, sizeof(srb4)/8);
 8000f1e:	2206      	movs	r2, #6
 8000f20:	4916      	ldr	r1, [pc, #88]	; (8000f7c <_Z10writeFLASHv+0xb8>)
 8000f22:	4817      	ldr	r0, [pc, #92]	; (8000f80 <_Z10writeFLASHv+0xbc>)
 8000f24:	f000 f83a 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 5 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 344, (uint64_t*) &srb5, sizeof(srb5)/8);
 8000f28:	2206      	movs	r2, #6
 8000f2a:	4916      	ldr	r1, [pc, #88]	; (8000f84 <_Z10writeFLASHv+0xc0>)
 8000f2c:	4816      	ldr	r0, [pc, #88]	; (8000f88 <_Z10writeFLASHv+0xc4>)
 8000f2e:	f000 f835 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 6 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 400, (uint64_t*) &srb6, sizeof(srb6)/8);
 8000f32:	2206      	movs	r2, #6
 8000f34:	4915      	ldr	r1, [pc, #84]	; (8000f8c <_Z10writeFLASHv+0xc8>)
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <_Z10writeFLASHv+0xcc>)
 8000f38:	f000 f830 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 7 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 456, (uint64_t*) &srb7, sizeof(srb7)/8);
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	4915      	ldr	r1, [pc, #84]	; (8000f94 <_Z10writeFLASHv+0xd0>)
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <_Z10writeFLASHv+0xd4>)
 8000f42:	f000 f82b 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Закрываем доступ к FLASH, от случайной записи
	HAL_FLASH_Lock();
 8000f46:	f001 fda5 	bl	8002a94 <HAL_FLASH_Lock>
	return;
 8000f4a:	bf00      	nop
}
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	0801fc00 	.word	0x0801fc00
 8000f58:	20000390 	.word	0x20000390
 8000f5c:	200003c0 	.word	0x200003c0
 8000f60:	0801fc40 	.word	0x0801fc40
 8000f64:	200003f0 	.word	0x200003f0
 8000f68:	0801fc78 	.word	0x0801fc78
 8000f6c:	20000420 	.word	0x20000420
 8000f70:	0801fcb0 	.word	0x0801fcb0
 8000f74:	200007c8 	.word	0x200007c8
 8000f78:	0801fce8 	.word	0x0801fce8
 8000f7c:	200007f8 	.word	0x200007f8
 8000f80:	0801fd20 	.word	0x0801fd20
 8000f84:	20000828 	.word	0x20000828
 8000f88:	0801fd58 	.word	0x0801fd58
 8000f8c:	20000858 	.word	0x20000858
 8000f90:	0801fd90 	.word	0x0801fd90
 8000f94:	20000450 	.word	0x20000450
 8000f98:	0801fdc8 	.word	0x0801fdc8

08000f9c <_Z15writeBlockFLASHmPyj>:

// Запись области во FLASH, по 64бита (doubleword)
void writeBlockFLASH(uint32_t address, uint64_t* pData64, unsigned int size)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	// Объявляем переменную для сохранения результата записи во FLASH (функции HAL_FLASH_Program())
	HAL_StatusTypeDef statusFLASHprogram;

	// Записываем нужную область памяти
	for (unsigned int i = 0; i < size; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d217      	bcs.n	8000fe4 <_Z15writeBlockFLASHmPyj+0x48>
	{
		statusFLASHprogram = HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD, address + i*8, *(pData64++));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	00da      	lsls	r2, r3, #3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	18d1      	adds	r1, r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f103 0208 	add.w	r2, r3, #8
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f001 fccd 	bl	8002968 <HAL_FLASH_Program>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	74fb      	strb	r3, [r7, #19]
		if (statusFLASHprogram != HAL_OK) break; // Если что-то пошло не так - выходим из цикла
 8000fd2:	7cfb      	ldrb	r3, [r7, #19]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d103      	bne.n	8000fe0 <_Z15writeBlockFLASHmPyj+0x44>
	for (unsigned int i = 0; i < size; i++)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e7e5      	b.n	8000fac <_Z15writeBlockFLASHmPyj+0x10>
		if (statusFLASHprogram != HAL_OK) break; // Если что-то пошло не так - выходим из цикла
 8000fe0:	bf00      	nop
	}
	return;
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
}
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_Z16readCRBfromFlashPm>:
	return;
}

// Чтение CRB из FLASH
void readCRBfromFlash(uint32_t* pData32)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	for (unsigned int i = 0; i < 12; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b0b      	cmp	r3, #11
 8000ffc:	d810      	bhi.n	8001020 <_Z16readCRBfromFlashPm+0x34>
	{
		*(pData32 + i) = *((volatile uint32_t*)(CONFIG_FLASHPAGE+i*4));
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001004:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4619      	mov	r1, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	680a      	ldr	r2, [r1, #0]
 8001016:	601a      	str	r2, [r3, #0]
	for (unsigned int i = 0; i < 12; i++)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e7eb      	b.n	8000ff8 <_Z16readCRBfromFlashPm+0xc>
	}
	return;
 8001020:	bf00      	nop
}
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
	...

0800102c <_Z10eraseFLASHv>:

void eraseFLASH()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
	// Открываем доступ к FLASH (она закрыта от случайной записи)
	HAL_FLASH_Unlock();
 8001032:	f001 fd09 	bl	8002a48 <HAL_FLASH_Unlock>

	// Объявляем структуру, необходимую для функции стирания страницы
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES; // Стираем постранично
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
	//eraseInit.Banks = FLASH_BANK_1;
	eraseInit.PageAddress = CONFIG_FLASHPAGE; // Адрес страницы для стирания
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <_Z10eraseFLASHv+0x34>)
 800103c:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = 1; // Число страниц = 1
 800103e:	2301      	movs	r3, #1
 8001040:	617b      	str	r3, [r7, #20]

	// Объявляем переменную для сохранения результата стирания FLASH (функции HAL_FLASHEx_Erase()), д.б. 0xFFFFFFFF (не используем)
	uint32_t statusFLASHerase {0};
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]

	// Очищаем страницу
	HAL_FLASHEx_Erase(&eraseInit, &statusFLASHerase);
 8001046:	1d3a      	adds	r2, r7, #4
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fde2 	bl	8002c18 <HAL_FLASHEx_Erase>

	// Закрываем доступ к FLASH, от случайной записи
	HAL_FLASH_Lock();
 8001054:	f001 fd1e 	bl	8002a94 <HAL_FLASH_Lock>
	return;
 8001058:	bf00      	nop
}
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	0801fc00 	.word	0x0801fc00

08001064 <__NVIC_SystemReset>:
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001068:	f3bf 8f4f 	dsb	sy
}
 800106c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <__NVIC_SystemReset+0x24>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001076:	4904      	ldr	r1, [pc, #16]	; (8001088 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_SystemReset+0x28>)
 800107a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800107c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800107e:	f3bf 8f4f 	dsb	sy
}
 8001082:	bf00      	nop
    __NOP();
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <__NVIC_SystemReset+0x20>
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	05fa0004 	.word	0x05fa0004

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001096:	f001 fa23 	bl	80024e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109a:	f000 fbd5 	bl	8001848 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109e:	f000 fda1 	bl	8001be4 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80010a2:	f000 fc21 	bl	80018e8 <_ZL12MX_SPI1_Initv>


  MX_USART1_UART_Init();
 80010a6:	f000 fd6f 	bl	8001b88 <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 80010aa:	f000 fd11 	bl	8001ad0 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 80010ae:	f000 fcb3 	bl	8001a18 <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 80010b2:	f000 fc55 	bl	8001960 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  readCRBfromFlash(tempCRBfromFlash);
 80010b6:	48aa      	ldr	r0, [pc, #680]	; (8001360 <main+0x2d0>)
 80010b8:	f7ff ff98 	bl	8000fec <_Z16readCRBfromFlashPm>
  if (tempCRBfromFlash[11] != 0xFFFFFFFF)
 80010bc:	4ba8      	ldr	r3, [pc, #672]	; (8001360 <main+0x2d0>)
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d013      	beq.n	80010ee <main+0x5e>
  {
	  uint32_t* pData32 = (uint32_t*) &crb;
 80010c6:	4ba7      	ldr	r3, [pc, #668]	; (8001364 <main+0x2d4>)
 80010c8:	603b      	str	r3, [r7, #0]
	  for (unsigned int i = 0; i < 12; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b0b      	cmp	r3, #11
 80010d2:	d80c      	bhi.n	80010ee <main+0x5e>
	  {
		  *(pData32 + i) = tempCRBfromFlash[i];
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	49a0      	ldr	r1, [pc, #640]	; (8001360 <main+0x2d0>)
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010e4:	601a      	str	r2, [r3, #0]
	  for (unsigned int i = 0; i < 12; i++)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e7ef      	b.n	80010ce <main+0x3e>

  //char temp[4];
  //utoa(crb.sipr0, temp, 4);
  //text0[23] = temp[0];

  fillText();
 80010ee:	f7ff fdc1 	bl	8000c74 <_Z8fillTextv>

  // Включаем чип W5500 через �?бро�?
  ethernetA1.reset();
 80010f2:	489d      	ldr	r0, [pc, #628]	; (8001368 <main+0x2d8>)
 80010f4:	f7ff f868 	bl	80001c8 <_ZN5W55005resetEv>

  // Запи�?ываем "на�?тройки" в блок реги�?тров CRB
  ethernetA1.writeArrayToCRB(&crb.mr, 47, W5500_MR);
 80010f8:	2300      	movs	r3, #0
 80010fa:	222f      	movs	r2, #47	; 0x2f
 80010fc:	4999      	ldr	r1, [pc, #612]	; (8001364 <main+0x2d4>)
 80010fe:	489a      	ldr	r0, [pc, #616]	; (8001368 <main+0x2d8>)
 8001100:	f7ff f8b4 	bl	800026c <_ZN5W550015writeArrayToCRBEPhhh>

  HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f001 fa4d 	bl	80025a4 <HAL_Delay>

  // У�?танавливаем режим UDP дл�? �?окета 0
  //ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP, W5500_Sn_MR);
 800110a:	2300      	movs	r3, #0
 800110c:	2202      	movs	r2, #2
 800110e:	2108      	movs	r1, #8
 8001110:	4895      	ldr	r0, [pc, #596]	; (8001368 <main+0x2d8>)
 8001112:	f7ff f966 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // У�?танавливаем режим TCP дл�? �?окета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 8001116:	2300      	movs	r3, #0
 8001118:	2281      	movs	r2, #129	; 0x81
 800111a:	2128      	movs	r1, #40	; 0x28
 800111c:	4892      	ldr	r0, [pc, #584]	; (8001368 <main+0x2d8>)
 800111e:	f7ff f960 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // У�?танавливаем режим TCP дл�? �?окета 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 8001122:	2300      	movs	r3, #0
 8001124:	2281      	movs	r2, #129	; 0x81
 8001126:	2148      	movs	r1, #72	; 0x48
 8001128:	488f      	ldr	r0, [pc, #572]	; (8001368 <main+0x2d8>)
 800112a:	f7ff f95a 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке дл�? �?окета 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 800112e:	232c      	movs	r3, #44	; 0x2c
 8001130:	22ef      	movs	r2, #239	; 0xef
 8001132:	2108      	movs	r1, #8
 8001134:	488c      	ldr	r0, [pc, #560]	; (8001368 <main+0x2d8>)
 8001136:	f7ff f954 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке, �?оединении дл�? �?окета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IMR_SEND_OK_OFF & W5500_Sn_IMR_CON_OFF, W5500_Sn_IMR);
 800113a:	232c      	movs	r3, #44	; 0x2c
 800113c:	22ee      	movs	r2, #238	; 0xee
 800113e:	2128      	movs	r1, #40	; 0x28
 8001140:	4889      	ldr	r0, [pc, #548]	; (8001368 <main+0x2d8>)
 8001142:	f7ff f94e 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке дл�? �?окета 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 8001146:	232c      	movs	r3, #44	; 0x2c
 8001148:	22ef      	movs	r2, #239	; 0xef
 800114a:	2148      	movs	r1, #72	; 0x48
 800114c:	4886      	ldr	r0, [pc, #536]	; (8001368 <main+0x2d8>)
 800114e:	f7ff f948 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(10);
 8001152:	200a      	movs	r0, #10
 8001154:	f001 fa26 	bl	80025a4 <HAL_Delay>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 0
  ethernetA1.writeArrayToSRB(SOCKET0, &srb0.sNport0, 14, W5500_Sn_PORT);
 8001158:	2304      	movs	r3, #4
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	230e      	movs	r3, #14
 800115e:	4a83      	ldr	r2, [pc, #524]	; (800136c <main+0x2dc>)
 8001160:	2108      	movs	r1, #8
 8001162:	4881      	ldr	r0, [pc, #516]	; (8001368 <main+0x2d8>)
 8001164:	f7ff f9b6 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 1
  ethernetA1.writeArrayToSRB(SOCKET1, &srb1.sNport0, 14, W5500_Sn_PORT);
 8001168:	2304      	movs	r3, #4
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	230e      	movs	r3, #14
 800116e:	4a80      	ldr	r2, [pc, #512]	; (8001370 <main+0x2e0>)
 8001170:	2128      	movs	r1, #40	; 0x28
 8001172:	487d      	ldr	r0, [pc, #500]	; (8001368 <main+0x2d8>)
 8001174:	f7ff f9ae 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 2
  ethernetA1.writeArrayToSRB(SOCKET2, &srb2.sNport0, 14, W5500_Sn_PORT);
 8001178:	2304      	movs	r3, #4
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	230e      	movs	r3, #14
 800117e:	4a7d      	ldr	r2, [pc, #500]	; (8001374 <main+0x2e4>)
 8001180:	2148      	movs	r1, #72	; 0x48
 8001182:	4879      	ldr	r0, [pc, #484]	; (8001368 <main+0x2d8>)
 8001184:	f7ff f9a6 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f001 fa0b 	bl	80025a4 <HAL_Delay>

  // Открываем �?окет 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 800118e:	2301      	movs	r3, #1
 8001190:	2201      	movs	r2, #1
 8001192:	2108      	movs	r1, #8
 8001194:	4874      	ldr	r0, [pc, #464]	; (8001368 <main+0x2d8>)
 8001196:	f7ff f924 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем �?окет 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 800119a:	2301      	movs	r3, #1
 800119c:	2201      	movs	r2, #1
 800119e:	2128      	movs	r1, #40	; 0x28
 80011a0:	4871      	ldr	r0, [pc, #452]	; (8001368 <main+0x2d8>)
 80011a2:	f7ff f91e 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем �?окет 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 80011a6:	2301      	movs	r3, #1
 80011a8:	2201      	movs	r2, #1
 80011aa:	2148      	movs	r1, #72	; 0x48
 80011ac:	486e      	ldr	r0, [pc, #440]	; (8001368 <main+0x2d8>)
 80011ae:	f7ff f918 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f001 f9f6 	bl	80025a4 <HAL_Delay>

  // провер�?ем что �?окет 1 проиницилизирован и запу�?каем режим �?ервера
  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 80011b8:	2203      	movs	r2, #3
 80011ba:	2128      	movs	r1, #40	; 0x28
 80011bc:	486a      	ldr	r0, [pc, #424]	; (8001368 <main+0x2d8>)
 80011be:	f7ff f89e 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b13      	cmp	r3, #19
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <main+0x14e>
  {
	  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 80011d2:	2301      	movs	r3, #1
 80011d4:	2202      	movs	r2, #2
 80011d6:	2128      	movs	r1, #40	; 0x28
 80011d8:	4863      	ldr	r0, [pc, #396]	; (8001368 <main+0x2d8>)
 80011da:	f7ff f902 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
  }

  // провер�?ем что �?окет 2 проиницилизирован и запу�?каем режим �?ервера
  if (ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 80011de:	2203      	movs	r2, #3
 80011e0:	2148      	movs	r1, #72	; 0x48
 80011e2:	4861      	ldr	r0, [pc, #388]	; (8001368 <main+0x2d8>)
 80011e4:	f7ff f88b 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b13      	cmp	r3, #19
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <main+0x174>
  {
	  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 80011f8:	2301      	movs	r3, #1
 80011fa:	2202      	movs	r2, #2
 80011fc:	2148      	movs	r1, #72	; 0x48
 80011fe:	485a      	ldr	r0, [pc, #360]	; (8001368 <main+0x2d8>)
 8001200:	f7ff f8ef 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
  }

  HAL_Delay(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f001 f9cd 	bl	80025a4 <HAL_Delay>

  // Разрешаем прием по UART
  HAL_UART_Receive_IT(&huart1, &receivedByteUART, 1);
 800120a:	2201      	movs	r2, #1
 800120c:	495a      	ldr	r1, [pc, #360]	; (8001378 <main+0x2e8>)
 800120e:	485b      	ldr	r0, [pc, #364]	; (800137c <main+0x2ec>)
 8001210:	f003 fd4f 	bl	8004cb2 <HAL_UART_Receive_IT>

  // очищаем флаги прерываний
  CLEAR_BIT(TIM2->SR, TIM_SR_UIF);
 8001214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(TIM3->SR, TIM_SR_UIF);
 8001224:	4b56      	ldr	r3, [pc, #344]	; (8001380 <main+0x2f0>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	4a55      	ldr	r2, [pc, #340]	; (8001380 <main+0x2f0>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(TIM4->SR, TIM_SR_UIF);
 8001230:	4b54      	ldr	r3, [pc, #336]	; (8001384 <main+0x2f4>)
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	4a53      	ldr	r2, [pc, #332]	; (8001384 <main+0x2f4>)
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	6113      	str	r3, [r2, #16]

  // запу�?каем таймер TIM2, от�?читываем время по 100мс
  HAL_TIM_Base_Start_IT(&htim2);
 800123c:	4852      	ldr	r0, [pc, #328]	; (8001388 <main+0x2f8>)
 800123e:	f003 f8fd 	bl	800443c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // провер�?ем е�?ть ли данные по UDP
	  if (socket0dataReady)
 8001242:	4b52      	ldr	r3, [pc, #328]	; (800138c <main+0x2fc>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d022      	beq.n	8001290 <main+0x200>
	  {
		  if((HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY) || (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX))
 800124a:	484c      	ldr	r0, [pc, #304]	; (800137c <main+0x2ec>)
 800124c:	f003 ff20 	bl	8005090 <HAL_UART_GetState>
 8001250:	4603      	mov	r3, r0
 8001252:	2b20      	cmp	r3, #32
 8001254:	d005      	beq.n	8001262 <main+0x1d2>
 8001256:	4849      	ldr	r0, [pc, #292]	; (800137c <main+0x2ec>)
 8001258:	f003 ff1a 	bl	8005090 <HAL_UART_GetState>
 800125c:	4603      	mov	r3, r0
 800125e:	2b22      	cmp	r3, #34	; 0x22
 8001260:	d101      	bne.n	8001266 <main+0x1d6>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <main+0x1d8>
 8001266:	2300      	movs	r3, #0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d011      	beq.n	8001290 <main+0x200>
		  {
			  //// изначально было TX
			  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001272:	4847      	ldr	r0, [pc, #284]	; (8001390 <main+0x300>)
 8001274:	f001 ff13 	bl	800309e <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, &receiveSocket0data[8], (sizeOfReceiveSocket0data-8));
 8001278:	4b46      	ldr	r3, [pc, #280]	; (8001394 <main+0x304>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	3b08      	subs	r3, #8
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4945      	ldr	r1, [pc, #276]	; (8001398 <main+0x308>)
 8001284:	483d      	ldr	r0, [pc, #244]	; (800137c <main+0x2ec>)
 8001286:	f003 fcd0 	bl	8004c2a <HAL_UART_Transmit_IT>

			  socket0dataReady = false;
 800128a:	4b40      	ldr	r3, [pc, #256]	; (800138c <main+0x2fc>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // провер�?ем е�?ть ли данные по TCP
	  if (socket1dataReady)
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <main+0x30c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <main+0x24a>
	  {
		  if((HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY) || (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX))
 8001298:	4838      	ldr	r0, [pc, #224]	; (800137c <main+0x2ec>)
 800129a:	f003 fef9 	bl	8005090 <HAL_UART_GetState>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b20      	cmp	r3, #32
 80012a2:	d005      	beq.n	80012b0 <main+0x220>
 80012a4:	4835      	ldr	r0, [pc, #212]	; (800137c <main+0x2ec>)
 80012a6:	f003 fef3 	bl	8005090 <HAL_UART_GetState>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b22      	cmp	r3, #34	; 0x22
 80012ae:	d101      	bne.n	80012b4 <main+0x224>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <main+0x226>
 80012b4:	2300      	movs	r3, #0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00f      	beq.n	80012da <main+0x24a>
		  {
			  //// изначально было TX
			  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c0:	4833      	ldr	r0, [pc, #204]	; (8001390 <main+0x300>)
 80012c2:	f001 feec 	bl	800309e <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, receiveSocket1data, sizeOfReceiveSocket1data);
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <main+0x310>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <main+0x314>)
 80012ce:	482b      	ldr	r0, [pc, #172]	; (800137c <main+0x2ec>)
 80012d0:	f003 fcab 	bl	8004c2a <HAL_UART_Transmit_IT>

			  socket1dataReady = false;
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <main+0x30c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // провер�?ем е�?ть ли данные по Telnet
	  if (socket2dataReady)
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <main+0x318>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8222 	beq.w	8001728 <main+0x698>
	  {
		  for(int i = 0; i < sizeOfReceiveSocket2data; ++i)
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <main+0x31c>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4293      	cmp	r3, r2
 80012f2:	da15      	bge.n	8001320 <main+0x290>
		  {
			  if (ptrWriteBufferTelnet <= ptrEndBufferTelnet)
 80012f4:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <main+0x320>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <main+0x324>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d80b      	bhi.n	8001318 <main+0x288>
			  {
				  *ptrWriteBufferTelnet = receiveSocket2data[i];
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <main+0x320>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	492c      	ldr	r1, [pc, #176]	; (80013b8 <main+0x328>)
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	440a      	add	r2, r1
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	701a      	strb	r2, [r3, #0]
				  ++ptrWriteBufferTelnet;
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <main+0x320>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <main+0x320>)
 8001316:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < sizeOfReceiveSocket2data; ++i)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3301      	adds	r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	e7e3      	b.n	80012e8 <main+0x258>
			  }
		  }

		  if( *(ptrWriteBufferTelnet - 1) == '\n')
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <main+0x320>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3b01      	subs	r3, #1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b0a      	cmp	r3, #10
 800132a:	f040 81fa 	bne.w	8001722 <main+0x692>
		  {
			  if (counterMessages < 4)
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <main+0x32c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d875      	bhi.n	8001422 <main+0x392>
			  {
				  if (*ptrReadBufferTelnet == '\n' || *ptrReadBufferTelnet == '\r')
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <main+0x330>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b0a      	cmp	r3, #10
 800133e:	d004      	beq.n	800134a <main+0x2ba>
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <main+0x330>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b0d      	cmp	r3, #13
 8001348:	d140      	bne.n	80013cc <main+0x33c>
				  {
					  receivedIPAddress[counterMessages] = *(&crb.sipr0 + counterMessages);
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <main+0x32c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <main+0x334>)
 8001352:	4413      	add	r3, r2
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <main+0x32c>)
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	7819      	ldrb	r1, [r3, #0]
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <main+0x338>)
 800135c:	5499      	strb	r1, [r3, r2]
 800135e:	e055      	b.n	800140c <main+0x37c>
 8001360:	200023d0 	.word	0x200023d0
 8001364:	20000390 	.word	0x20000390
 8001368:	2000240c 	.word	0x2000240c
 800136c:	200003c4 	.word	0x200003c4
 8001370:	200003f4 	.word	0x200003f4
 8001374:	20000424 	.word	0x20000424
 8001378:	20000888 	.word	0x20000888
 800137c:	20000784 	.word	0x20000784
 8001380:	40000400 	.word	0x40000400
 8001384:	40000800 	.word	0x40000800
 8001388:	200006ac 	.word	0x200006ac
 800138c:	20000a95 	.word	0x20000a95
 8001390:	40010c00 	.word	0x40010c00
 8001394:	2000129e 	.word	0x2000129e
 8001398:	20000aa0 	.word	0x20000aa0
 800139c:	200012a0 	.word	0x200012a0
 80013a0:	20001aaa 	.word	0x20001aaa
 80013a4:	200012a4 	.word	0x200012a4
 80013a8:	20001aac 	.word	0x20001aac
 80013ac:	200022b6 	.word	0x200022b6
 80013b0:	20000484 	.word	0x20000484
 80013b4:	20000488 	.word	0x20000488
 80013b8:	20001ab0 	.word	0x20001ab0
 80013bc:	200023ce 	.word	0x200023ce
 80013c0:	20000480 	.word	0x20000480
 80013c4:	2000039f 	.word	0x2000039f
 80013c8:	200023c0 	.word	0x200023c0
				  }
				  else
				  {
					  temp32 = atoi(ptrReadBufferTelnet);
 80013cc:	4b86      	ldr	r3, [pc, #536]	; (80015e8 <main+0x558>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 f891 	bl	80054f8 <atoi>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b84      	ldr	r3, [pc, #528]	; (80015ec <main+0x55c>)
 80013dc:	601a      	str	r2, [r3, #0]
					  if (temp32 > 0 && temp32 < 256) receivedIPAddress[counterMessages] = (uint8_t)temp32;
 80013de:	4b83      	ldr	r3, [pc, #524]	; (80015ec <main+0x55c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <main+0x370>
 80013e6:	4b81      	ldr	r3, [pc, #516]	; (80015ec <main+0x55c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2bff      	cmp	r3, #255	; 0xff
 80013ec:	d808      	bhi.n	8001400 <main+0x370>
 80013ee:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <main+0x55c>)
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	4b7f      	ldr	r3, [pc, #508]	; (80015f0 <main+0x560>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	b2c9      	uxtb	r1, r1
 80013fa:	4b7e      	ldr	r3, [pc, #504]	; (80015f4 <main+0x564>)
 80013fc:	5499      	strb	r1, [r3, r2]
 80013fe:	e005      	b.n	800140c <main+0x37c>
					  else receivedIPAddress[counterMessages] = 0;
 8001400:	4b7b      	ldr	r3, [pc, #492]	; (80015f0 <main+0x560>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <main+0x564>)
 8001408:	2100      	movs	r1, #0
 800140a:	5499      	strb	r1, [r3, r2]

				  }
				  ++counterMessages;
 800140c:	4b78      	ldr	r3, [pc, #480]	; (80015f0 <main+0x560>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b76      	ldr	r3, [pc, #472]	; (80015f0 <main+0x560>)
 8001416:	701a      	strb	r2, [r3, #0]
				  ptrReadBufferTelnet = ptrWriteBufferTelnet;
 8001418:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <main+0x568>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a72      	ldr	r2, [pc, #456]	; (80015e8 <main+0x558>)
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e159      	b.n	80016d6 <main+0x646>
			  }
			  else if (counterMessages < 8)
 8001422:	4b73      	ldr	r3, [pc, #460]	; (80015f0 <main+0x560>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b07      	cmp	r3, #7
 8001428:	d840      	bhi.n	80014ac <main+0x41c>
			  {
				  if (*ptrReadBufferTelnet == '\n' || *ptrReadBufferTelnet == '\r')
 800142a:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <main+0x558>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b0a      	cmp	r3, #10
 8001432:	d004      	beq.n	800143e <main+0x3ae>
 8001434:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <main+0x558>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b0d      	cmp	r3, #13
 800143c:	d10b      	bne.n	8001456 <main+0x3c6>
				  {
					  receivedSubnetMask[counterMessages - 4] = *(&crb.subr0 + counterMessages - 4);
 800143e:	4b6c      	ldr	r3, [pc, #432]	; (80015f0 <main+0x560>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3b04      	subs	r3, #4
 8001444:	4a6d      	ldr	r2, [pc, #436]	; (80015fc <main+0x56c>)
 8001446:	441a      	add	r2, r3
 8001448:	4b69      	ldr	r3, [pc, #420]	; (80015f0 <main+0x560>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3b04      	subs	r3, #4
 800144e:	7811      	ldrb	r1, [r2, #0]
 8001450:	4a6b      	ldr	r2, [pc, #428]	; (8001600 <main+0x570>)
 8001452:	54d1      	strb	r1, [r2, r3]
 8001454:	e01f      	b.n	8001496 <main+0x406>
				  }
				  else
				  {
					  temp32 = atoi(ptrReadBufferTelnet);
 8001456:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <main+0x558>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f004 f84c 	bl	80054f8 <atoi>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b61      	ldr	r3, [pc, #388]	; (80015ec <main+0x55c>)
 8001466:	601a      	str	r2, [r3, #0]
					  if (temp32 > 0 && temp32 < 256) receivedSubnetMask[counterMessages - 4] = (uint8_t)temp32;
 8001468:	4b60      	ldr	r3, [pc, #384]	; (80015ec <main+0x55c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00c      	beq.n	800148a <main+0x3fa>
 8001470:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <main+0x55c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	d808      	bhi.n	800148a <main+0x3fa>
 8001478:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <main+0x55c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b5c      	ldr	r3, [pc, #368]	; (80015f0 <main+0x560>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3b04      	subs	r3, #4
 8001482:	b2d1      	uxtb	r1, r2
 8001484:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <main+0x570>)
 8001486:	54d1      	strb	r1, [r2, r3]
 8001488:	e005      	b.n	8001496 <main+0x406>
					  else receivedSubnetMask[counterMessages - 4] = 0;
 800148a:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <main+0x560>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	3b04      	subs	r3, #4
 8001490:	4a5b      	ldr	r2, [pc, #364]	; (8001600 <main+0x570>)
 8001492:	2100      	movs	r1, #0
 8001494:	54d1      	strb	r1, [r2, r3]
				  }
				  ++counterMessages;
 8001496:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <main+0x560>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b54      	ldr	r3, [pc, #336]	; (80015f0 <main+0x560>)
 80014a0:	701a      	strb	r2, [r3, #0]
				  ptrReadBufferTelnet = ptrWriteBufferTelnet;
 80014a2:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <main+0x568>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <main+0x558>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e114      	b.n	80016d6 <main+0x646>
			  }
			  else if (counterMessages < 14)
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <main+0x560>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b0d      	cmp	r3, #13
 80014b2:	f200 80f5 	bhi.w	80016a0 <main+0x610>
			  {
				  if (*ptrReadBufferTelnet == '\n' || *ptrReadBufferTelnet == '\r')
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <main+0x558>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b0a      	cmp	r3, #10
 80014be:	d004      	beq.n	80014ca <main+0x43a>
 80014c0:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <main+0x558>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b0d      	cmp	r3, #13
 80014c8:	d10f      	bne.n	80014ea <main+0x45a>
				  {
					  receivedMACAddress[counterMessages - 8] = *(&crb.shar0 + counterMessages - 8);
 80014ca:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <main+0x560>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	3b08      	subs	r3, #8
 80014d0:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <main+0x574>)
 80014d2:	441a      	add	r2, r3
 80014d4:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <main+0x560>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3b08      	subs	r3, #8
 80014da:	7811      	ldrb	r1, [r2, #0]
 80014dc:	4a4a      	ldr	r2, [pc, #296]	; (8001608 <main+0x578>)
 80014de:	54d1      	strb	r1, [r2, r3]
					  ptrReadBufferTelnet = ptrWriteBufferTelnet;
 80014e0:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <main+0x568>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a40      	ldr	r2, [pc, #256]	; (80015e8 <main+0x558>)
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e0d3      	b.n	8001692 <main+0x602>
				  }
				  else
				  {
					  uint8_t tempCounter { 0 };
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
					  while (ptrReadBufferTelnet != ptrWriteBufferTelnet)
 80014ee:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <main+0x558>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <main+0x568>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	f000 80cb 	beq.w	8001692 <main+0x602>
					  {
						  if (tempCounter == 0)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d14f      	bne.n	80015a2 <main+0x512>
						  {
							  if (*ptrReadBufferTelnet >= '0' && *ptrReadBufferTelnet <= '9')
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <main+0x558>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b2f      	cmp	r3, #47	; 0x2f
 800150a:	d914      	bls.n	8001536 <main+0x4a6>
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <main+0x558>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b39      	cmp	r3, #57	; 0x39
 8001514:	d80f      	bhi.n	8001536 <main+0x4a6>
							  {
								  receivedMACAddress[counterMessages - 8] = (*ptrReadBufferTelnet - 48)*16;
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <main+0x558>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3b30      	subs	r3, #48	; 0x30
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <main+0x560>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	3b08      	subs	r3, #8
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a37      	ldr	r2, [pc, #220]	; (8001608 <main+0x578>)
 800152c:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	e0a7      	b.n	8001686 <main+0x5f6>
							  }
							  else if (*ptrReadBufferTelnet >= 'A' && *ptrReadBufferTelnet <= 'F')
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <main+0x558>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b40      	cmp	r3, #64	; 0x40
 800153e:	d914      	bls.n	800156a <main+0x4da>
 8001540:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <main+0x558>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b46      	cmp	r3, #70	; 0x46
 8001548:	d80f      	bhi.n	800156a <main+0x4da>
							  {
								  receivedMACAddress[counterMessages - 8] = (*ptrReadBufferTelnet - 55)*16;
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <main+0x558>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3b37      	subs	r3, #55	; 0x37
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <main+0x560>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	3b08      	subs	r3, #8
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d1      	uxtb	r1, r2
 800155e:	4a2a      	ldr	r2, [pc, #168]	; (8001608 <main+0x578>)
 8001560:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	3301      	adds	r3, #1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	e08d      	b.n	8001686 <main+0x5f6>
							  }
							  else if (*ptrReadBufferTelnet >= 'a' && *ptrReadBufferTelnet <= 'f')
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <main+0x558>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b60      	cmp	r3, #96	; 0x60
 8001572:	f240 8088 	bls.w	8001686 <main+0x5f6>
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <main+0x558>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b66      	cmp	r3, #102	; 0x66
 800157e:	f200 8082 	bhi.w	8001686 <main+0x5f6>
							  {
								  receivedMACAddress[counterMessages - 8] = (*ptrReadBufferTelnet - 87)*16;
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <main+0x558>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	3b57      	subs	r3, #87	; 0x57
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <main+0x560>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b08      	subs	r3, #8
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d1      	uxtb	r1, r2
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <main+0x578>)
 8001598:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	3301      	adds	r3, #1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	e071      	b.n	8001686 <main+0x5f6>
							  }
						  }
						  else if (tempCounter == 1)
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d16e      	bne.n	8001686 <main+0x5f6>
						  {
							  if (*ptrReadBufferTelnet >= '0' && *ptrReadBufferTelnet <= '9')
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <main+0x558>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b2f      	cmp	r3, #47	; 0x2f
 80015b0:	d92c      	bls.n	800160c <main+0x57c>
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <main+0x558>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b39      	cmp	r3, #57	; 0x39
 80015ba:	d827      	bhi.n	800160c <main+0x57c>
							  {
								  receivedMACAddress[counterMessages - 8] += (*ptrReadBufferTelnet - 48);
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <main+0x560>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	3b08      	subs	r3, #8
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <main+0x578>)
 80015c4:	5cd2      	ldrb	r2, [r2, r3]
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <main+0x558>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <main+0x560>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3b08      	subs	r3, #8
 80015d6:	3a30      	subs	r2, #48	; 0x30
 80015d8:	b2d1      	uxtb	r1, r2
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <main+0x578>)
 80015dc:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	3301      	adds	r3, #1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	e04f      	b.n	8001686 <main+0x5f6>
 80015e6:	bf00      	nop
 80015e8:	20000480 	.word	0x20000480
 80015ec:	200023bc 	.word	0x200023bc
 80015f0:	200023ce 	.word	0x200023ce
 80015f4:	200023c0 	.word	0x200023c0
 80015f8:	20000484 	.word	0x20000484
 80015fc:	20000395 	.word	0x20000395
 8001600:	200023c4 	.word	0x200023c4
 8001604:	20000399 	.word	0x20000399
 8001608:	200023c8 	.word	0x200023c8
							  }
							  else if (*ptrReadBufferTelnet >= 'A' && *ptrReadBufferTelnet <= 'F')
 800160c:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <main+0x778>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b40      	cmp	r3, #64	; 0x40
 8001614:	d919      	bls.n	800164a <main+0x5ba>
 8001616:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <main+0x778>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b46      	cmp	r3, #70	; 0x46
 800161e:	d814      	bhi.n	800164a <main+0x5ba>
							  {
								  receivedMACAddress[counterMessages - 8] += (*ptrReadBufferTelnet - 55);
 8001620:	4b7a      	ldr	r3, [pc, #488]	; (800180c <main+0x77c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3b08      	subs	r3, #8
 8001626:	4a7a      	ldr	r2, [pc, #488]	; (8001810 <main+0x780>)
 8001628:	5cd2      	ldrb	r2, [r2, r3]
 800162a:	4b77      	ldr	r3, [pc, #476]	; (8001808 <main+0x778>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4413      	add	r3, r2
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b75      	ldr	r3, [pc, #468]	; (800180c <main+0x77c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	3b08      	subs	r3, #8
 800163a:	3a37      	subs	r2, #55	; 0x37
 800163c:	b2d1      	uxtb	r1, r2
 800163e:	4a74      	ldr	r2, [pc, #464]	; (8001810 <main+0x780>)
 8001640:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	3301      	adds	r3, #1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	e01d      	b.n	8001686 <main+0x5f6>
							  }
							  else if (*ptrReadBufferTelnet >= 'a' && *ptrReadBufferTelnet <= 'f')
 800164a:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <main+0x778>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b60      	cmp	r3, #96	; 0x60
 8001652:	d918      	bls.n	8001686 <main+0x5f6>
 8001654:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <main+0x778>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b66      	cmp	r3, #102	; 0x66
 800165c:	d813      	bhi.n	8001686 <main+0x5f6>
							  {
								  receivedMACAddress[counterMessages - 8] += (*ptrReadBufferTelnet - 87);
 800165e:	4b6b      	ldr	r3, [pc, #428]	; (800180c <main+0x77c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3b08      	subs	r3, #8
 8001664:	4a6a      	ldr	r2, [pc, #424]	; (8001810 <main+0x780>)
 8001666:	5cd2      	ldrb	r2, [r2, r3]
 8001668:	4b67      	ldr	r3, [pc, #412]	; (8001808 <main+0x778>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b66      	ldr	r3, [pc, #408]	; (800180c <main+0x77c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b08      	subs	r3, #8
 8001678:	3a57      	subs	r2, #87	; 0x57
 800167a:	b2d1      	uxtb	r1, r2
 800167c:	4a64      	ldr	r2, [pc, #400]	; (8001810 <main+0x780>)
 800167e:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	3301      	adds	r3, #1
 8001684:	71fb      	strb	r3, [r7, #7]
							  }
						  }
						  ++ptrReadBufferTelnet;
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <main+0x778>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <main+0x778>)
 800168e:	6013      	str	r3, [r2, #0]
					  while (ptrReadBufferTelnet != ptrWriteBufferTelnet)
 8001690:	e72d      	b.n	80014ee <main+0x45e>
					  }
				  }
				  ++counterMessages;
 8001692:	4b5e      	ldr	r3, [pc, #376]	; (800180c <main+0x77c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <main+0x77c>)
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e01a      	b.n	80016d6 <main+0x646>
			  }
			  else if (counterMessages == 14)
 80016a0:	4b5a      	ldr	r3, [pc, #360]	; (800180c <main+0x77c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b0e      	cmp	r3, #14
 80016a6:	d116      	bne.n	80016d6 <main+0x646>
			  {
				  if (*ptrReadBufferTelnet == 'Y' || *ptrReadBufferTelnet == 'y')
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <main+0x778>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b59      	cmp	r3, #89	; 0x59
 80016b0:	d004      	beq.n	80016bc <main+0x62c>
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <main+0x778>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b79      	cmp	r3, #121	; 0x79
 80016ba:	d107      	bne.n	80016cc <main+0x63c>
				  {
					  ethernetA1.sendString(SOCKET2, textApply);
 80016bc:	4a55      	ldr	r2, [pc, #340]	; (8001814 <main+0x784>)
 80016be:	2148      	movs	r1, #72	; 0x48
 80016c0:	4855      	ldr	r0, [pc, #340]	; (8001818 <main+0x788>)
 80016c2:	f7ff f881 	bl	80007c8 <_ZN5W550010sendStringEhPc>
					  saveSettings();
 80016c6:	f7ff fbb7 	bl	8000e38 <_Z12saveSettingsv>
 80016ca:	e004      	b.n	80016d6 <main+0x646>
				  }
				  else
				  {
					  ethernetA1.sendString(SOCKET2, textNotApply);
 80016cc:	4a53      	ldr	r2, [pc, #332]	; (800181c <main+0x78c>)
 80016ce:	2148      	movs	r1, #72	; 0x48
 80016d0:	4851      	ldr	r0, [pc, #324]	; (8001818 <main+0x788>)
 80016d2:	f7ff f879 	bl	80007c8 <_ZN5W550010sendStringEhPc>

				  }
			  }

			  if(typedValueCounter == 13)
 80016d6:	4b52      	ldr	r3, [pc, #328]	; (8001820 <main+0x790>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b0d      	cmp	r3, #13
 80016dc:	d102      	bne.n	80016e4 <main+0x654>
			  {
				  fillFinalText();
 80016de:	f7ff fb87 	bl	8000df0 <_Z13fillFinalTextv>
 80016e2:	e009      	b.n	80016f8 <main+0x668>
			  }
			  else if (typedValueCounter == 15)
 80016e4:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <main+0x790>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d105      	bne.n	80016f8 <main+0x668>
			  {
				  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 80016ec:	2301      	movs	r3, #1
 80016ee:	2208      	movs	r2, #8
 80016f0:	2148      	movs	r1, #72	; 0x48
 80016f2:	4849      	ldr	r0, [pc, #292]	; (8001818 <main+0x788>)
 80016f4:	f7fe fe75 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
			  }

			  if (typedValueCounter < 14)
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <main+0x790>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b0d      	cmp	r3, #13
 80016fe:	d80a      	bhi.n	8001716 <main+0x686>
			  {
				  ethernetA1.sendString(SOCKET2, arrText[typedValueCounter]);
 8001700:	4b47      	ldr	r3, [pc, #284]	; (8001820 <main+0x790>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <main+0x794>)
 8001708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170c:	461a      	mov	r2, r3
 800170e:	2148      	movs	r1, #72	; 0x48
 8001710:	4841      	ldr	r0, [pc, #260]	; (8001818 <main+0x788>)
 8001712:	f7ff f859 	bl	80007c8 <_ZN5W550010sendStringEhPc>
			  }
			  ++typedValueCounter;
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <main+0x790>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b40      	ldr	r3, [pc, #256]	; (8001820 <main+0x790>)
 8001720:	701a      	strb	r2, [r3, #0]
		  }
		  socket2dataReady = false;
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <main+0x798>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	  }


	  // провер�?ем е�?ть ли данные по UART
	  if (receivedPacketUARTisReady)
 8001728:	4b40      	ldr	r3, [pc, #256]	; (800182c <main+0x79c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d023      	beq.n	8001778 <main+0x6e8>
	  {
		  if (needsTransmitUDP)
 8001730:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <main+0x7a0>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00d      	beq.n	8001754 <main+0x6c4>
		  {
			  // отправл�?ем данные, прин�?тые по UART, по UDP
			  ethernetA1.sendPacket(SOCKET0, copiedReceivedPacketUART, copiedReceivedBytesUARTCounter);
 8001738:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <main+0x7a4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	4a3e      	ldr	r2, [pc, #248]	; (8001838 <main+0x7a8>)
 8001740:	2108      	movs	r1, #8
 8001742:	4835      	ldr	r0, [pc, #212]	; (8001818 <main+0x788>)
 8001744:	f7ff f802 	bl	800074c <_ZN5W550010sendPacketEhPht>

			  // �?бра�?ываем флаги
			  receivedPacketUARTisReady = false;
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <main+0x79c>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
			  needsTransmitUDP = false;
 800174e:	4b38      	ldr	r3, [pc, #224]	; (8001830 <main+0x7a0>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
		  }

		  if (needsTransmitTCP)
 8001754:	4b39      	ldr	r3, [pc, #228]	; (800183c <main+0x7ac>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00d      	beq.n	8001778 <main+0x6e8>
		  {
			  // отправл�?ем данные, прин�?тые по UART, по UDP
			  ethernetA1.sendPacket(SOCKET1, copiedReceivedPacketUART, copiedReceivedBytesUARTCounter);
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <main+0x7a4>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	4a35      	ldr	r2, [pc, #212]	; (8001838 <main+0x7a8>)
 8001764:	2128      	movs	r1, #40	; 0x28
 8001766:	482c      	ldr	r0, [pc, #176]	; (8001818 <main+0x788>)
 8001768:	f7fe fff0 	bl	800074c <_ZN5W550010sendPacketEhPht>

			  // �?бра�?ываем флаги
			  receivedPacketUARTisReady = false;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <main+0x79c>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
			  needsTransmitTCP = false;
 8001772:	4b32      	ldr	r3, [pc, #200]	; (800183c <main+0x7ac>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // е�?ли �?оединение по TCP было закрыто, нужно �?нова проинициализировать �?окет и перейти в режим про�?лушки (�?ервера)
	  if (needsOpenTCP)
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <main+0x7b0>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01e      	beq.n	80017be <main+0x72e>
	  {
		  // Открываем �?окет 1
		  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8001780:	2301      	movs	r3, #1
 8001782:	2201      	movs	r2, #1
 8001784:	2128      	movs	r1, #40	; 0x28
 8001786:	4824      	ldr	r0, [pc, #144]	; (8001818 <main+0x788>)
 8001788:	f7fe fe2b 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

		  HAL_Delay(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f000 ff09 	bl	80025a4 <HAL_Delay>

		  // провер�?ем что �?окет 1 проиницилизирован и запу�?каем режим �?ервера
		  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 8001792:	2203      	movs	r2, #3
 8001794:	2128      	movs	r1, #40	; 0x28
 8001796:	4820      	ldr	r0, [pc, #128]	; (8001818 <main+0x788>)
 8001798:	f7fe fdb1 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 800179c:	4603      	mov	r3, r0
 800179e:	2b13      	cmp	r3, #19
 80017a0:	bf0c      	ite	eq
 80017a2:	2301      	moveq	r3, #1
 80017a4:	2300      	movne	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <main+0x728>
		  {
			  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 80017ac:	2301      	movs	r3, #1
 80017ae:	2202      	movs	r2, #2
 80017b0:	2128      	movs	r1, #40	; 0x28
 80017b2:	4819      	ldr	r0, [pc, #100]	; (8001818 <main+0x788>)
 80017b4:	f7fe fe15 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
		  }

		  needsOpenTCP = false;
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <main+0x7b0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	  }


	  // е�?ли �?оединение по Telnet было закрыто, нужно �?нова проинициализировать �?окет и перейти в режим про�?лушки (�?ервера)
	  if (needsOpenTelnet)
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <main+0x7b4>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f43f ad3d 	beq.w	8001242 <main+0x1b2>
	  {
		  // Открываем �?окет 2
		  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 80017c8:	2301      	movs	r3, #1
 80017ca:	2201      	movs	r2, #1
 80017cc:	2148      	movs	r1, #72	; 0x48
 80017ce:	4812      	ldr	r0, [pc, #72]	; (8001818 <main+0x788>)
 80017d0:	f7fe fe07 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

		  HAL_Delay(1);
 80017d4:	2001      	movs	r0, #1
 80017d6:	f000 fee5 	bl	80025a4 <HAL_Delay>

		  // провер�?ем что �?окет 2 проиницилизирован и запу�?каем режим �?ервера
		  if (ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 80017da:	2203      	movs	r2, #3
 80017dc:	2148      	movs	r1, #72	; 0x48
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <main+0x788>)
 80017e0:	f7fe fd8d 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b13      	cmp	r3, #19
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <main+0x770>
		  {
			  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 80017f4:	2301      	movs	r3, #1
 80017f6:	2202      	movs	r2, #2
 80017f8:	2148      	movs	r1, #72	; 0x48
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <main+0x788>)
 80017fc:	f7fe fdf1 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
		  }

		  needsOpenTelnet = false;
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <main+0x7b4>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
	  }
*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001806:	e51c      	b.n	8001242 <main+0x1b2>
 8001808:	20000480 	.word	0x20000480
 800180c:	200023ce 	.word	0x200023ce
 8001810:	200023c8 	.word	0x200023c8
 8001814:	2000031c 	.word	0x2000031c
 8001818:	2000240c 	.word	0x2000240c
 800181c:	20000354 	.word	0x20000354
 8001820:	200023b8 	.word	0x200023b8
 8001824:	200002c8 	.word	0x200002c8
 8001828:	20001aac 	.word	0x20001aac
 800182c:	2000098d 	.word	0x2000098d
 8001830:	20000a91 	.word	0x20000a91
 8001834:	20000a90 	.word	0x20000a90
 8001838:	20000990 	.word	0x20000990
 800183c:	20000a92 	.word	0x20000a92
 8001840:	20000a93 	.word	0x20000a93
 8001844:	20000a94 	.word	0x20000a94

08001848 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b090      	sub	sp, #64	; 0x40
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	2228      	movs	r2, #40	; 0x28
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fe7c 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800186e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001878:	2301      	movs	r3, #1
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	2302      	movs	r3, #2
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001886:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0318 	add.w	r3, r7, #24
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fc35 	bl	8003100 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80018a6:	f000 fc19 	bl	80020dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ae:	2302      	movs	r3, #2
 80018b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2101      	movs	r1, #1
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fe9d 	bl	8003604 <HAL_RCC_ClockConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80018da:	f000 fbff 	bl	80020dc <Error_Handler>
  }
}
 80018de:	bf00      	nop
 80018e0:	3740      	adds	r7, #64	; 0x40
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 80018ee:	4a1b      	ldr	r2, [pc, #108]	; (800195c <_ZL12MX_SPI1_Initv+0x74>)
 80018f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 80018f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 8001914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001918:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 800191c:	2208      	movs	r2, #8
 800191e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 800192e:	2200      	movs	r2, #0
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 8001934:	220a      	movs	r2, #10
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <_ZL12MX_SPI1_Initv+0x70>)
 800193a:	f001 fffd 	bl	8003938 <HAL_SPI_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800194e:	f000 fbc5 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000654 	.word	0x20000654
 800195c:	40013000 	.word	0x40013000

08001960 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 800197e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 8001986:	2264      	movs	r2, #100	; 0x64
 8001988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000;
 8001990:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 8001992:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a4:	481b      	ldr	r0, [pc, #108]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 80019a6:	f002 fcd3 	bl	8004350 <HAL_TIM_Base_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80019ba:	f000 fb8f 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	4619      	mov	r1, r3
 80019ca:	4812      	ldr	r0, [pc, #72]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 80019cc:	f002 fe90 	bl	80046f0 <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf14      	ite	ne
 80019d6:	2301      	movne	r3, #1
 80019d8:	2300      	moveq	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80019e0:	f000 fb7c 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	4619      	mov	r1, r3
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <_ZL12MX_TIM2_Initv+0xb4>)
 80019f2:	f003 f85d 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001a06:	f000 fb69 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200006ac 	.word	0x200006ac

08001a18 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <_ZL12MX_TIM3_Initv+0xb4>)
 8001a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a48:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001a4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a5a:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a5c:	f002 fc78 	bl	8004350 <HAL_TIM_Base_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8001a70:	f000 fb34 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001a82:	f002 fe35 	bl	80046f0 <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8001a96:	f000 fb21 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001aa8:	f003 f802 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8001abc:	f000 fb0e 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200006f4 	.word	0x200006f4
 8001acc:	40000400 	.word	0x40000400

08001ad0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001aee:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <_ZL12MX_TIM4_Initv+0xb4>)
 8001af0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001af4:	2203      	movs	r2, #3
 8001af6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001b00:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001b04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b12:	481b      	ldr	r0, [pc, #108]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001b14:	f002 fc1c 	bl	8004350 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf14      	ite	ne
 8001b1e:	2301      	movne	r3, #1
 8001b20:	2300      	moveq	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001b28:	f000 fad8 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4619      	mov	r1, r3
 8001b38:	4811      	ldr	r0, [pc, #68]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001b3a:	f002 fdd9 	bl	80046f0 <HAL_TIM_ConfigClockSource>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf14      	ite	ne
 8001b44:	2301      	movne	r3, #1
 8001b46:	2300      	moveq	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001b4e:	f000 fac5 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4808      	ldr	r0, [pc, #32]	; (8001b80 <_ZL12MX_TIM4_Initv+0xb0>)
 8001b60:	f002 ffa6 	bl	8004ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf14      	ite	ne
 8001b6a:	2301      	movne	r3, #1
 8001b6c:	2300      	moveq	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001b74:	f000 fab2 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000073c 	.word	0x2000073c
 8001b84:	40000800 	.word	0x40000800

08001b88 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001bc0:	f002 ffe6 	bl	8004b90 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001bd4:	f000 fa82 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000784 	.word	0x20000784
 8001be0:	40013800 	.word	0x40013800

08001be4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf8:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a41      	ldr	r2, [pc, #260]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c16:	f043 0320 	orr.w	r3, r3, #32
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a3b      	ldr	r2, [pc, #236]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a35      	ldr	r2, [pc, #212]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <_ZL12MX_GPIO_Initv+0x138>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	4830      	ldr	r0, [pc, #192]	; (8001d20 <_ZL12MX_GPIO_Initv+0x13c>)
 8001c5e:	f001 fa1e 	bl	800309e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2120      	movs	r1, #32
 8001c66:	482e      	ldr	r0, [pc, #184]	; (8001d20 <_ZL12MX_GPIO_Initv+0x13c>)
 8001c68:	f001 fa19 	bl	800309e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001c72:	482c      	ldr	r0, [pc, #176]	; (8001d24 <_ZL12MX_GPIO_Initv+0x140>)
 8001c74:	f001 fa13 	bl	800309e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RSTBUTTON_Pin */
  GPIO_InitStruct.Pin = RSTBUTTON_Pin;
 8001c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RSTBUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4824      	ldr	r0, [pc, #144]	; (8001d20 <_ZL12MX_GPIO_Initv+0x13c>)
 8001c8e:	f001 f86b 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8001c92:	2310      	movs	r3, #16
 8001c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <_ZL12MX_GPIO_Initv+0x144>)
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4821      	ldr	r0, [pc, #132]	; (8001d2c <_ZL12MX_GPIO_Initv+0x148>)
 8001ca6:	f001 f85f 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 8001caa:	2330      	movs	r3, #48	; 0x30
 8001cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4817      	ldr	r0, [pc, #92]	; (8001d20 <_ZL12MX_GPIO_Initv+0x13c>)
 8001cc2:	f001 f851 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8001cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ccc:	2311      	movs	r3, #17
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4811      	ldr	r0, [pc, #68]	; (8001d24 <_ZL12MX_GPIO_Initv+0x140>)
 8001ce0:	f001 f842 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 8001ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <_ZL12MX_GPIO_Initv+0x140>)
 8001cfe:	f001 f833 	bl	8002d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	200a      	movs	r0, #10
 8001d08:	f000 fd47 	bl	800279a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f000 fd60 	bl	80027d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d12:	bf00      	nop
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40011000 	.word	0x40011000
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	10210000 	.word	0x10210000
 8001d2c:	40010800 	.word	0x40010800

08001d30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_UART_RxCpltCallback+0x5c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d121      	bne.n	8001d84 <HAL_UART_RxCpltCallback+0x54>
  {
	  //// изначально было так - // включаем cветодиод "RX"
	  //// HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);

	  // включаем cветодиод "TX"
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d46:	4812      	ldr	r0, [pc, #72]	; (8001d90 <HAL_UART_RxCpltCallback+0x60>)
 8001d48:	f001 f9a9 	bl	800309e <HAL_GPIO_WritePin>

	  // запу�?каем таймер TIM4, от�?читываем врем�? �?вечени�? cветодиода "RX"
	  HAL_TIM_Base_Start_IT(&htim4);
 8001d4c:	4811      	ldr	r0, [pc, #68]	; (8001d94 <HAL_UART_RxCpltCallback+0x64>)
 8001d4e:	f002 fb75 	bl	800443c <HAL_TIM_Base_Start_IT>

	  //HAL_TIM_Base_Stop(&htim3);

	  // обнул�?ем �?четчик таймера TIM3
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_UART_RxCpltCallback+0x68>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

	  // запу�?каем таймер TIM3, от�?читываем врем�? до �?ледующего пакета по RX
	  HAL_TIM_Base_Start_IT(&htim3);
 8001d5a:	480f      	ldr	r0, [pc, #60]	; (8001d98 <HAL_UART_RxCpltCallback+0x68>)
 8001d5c:	f002 fb6e 	bl	800443c <HAL_TIM_Base_Start_IT>

	  // �?охран�?ем полученный байт в буфер
	  receivedPacketUART[receivedBytesUARTCounter] = receivedByteUART;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_UART_RxCpltCallback+0x6c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_UART_RxCpltCallback+0x70>)
 8001d68:	7819      	ldrb	r1, [r3, #0]
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_UART_RxCpltCallback+0x74>)
 8001d6c:	5499      	strb	r1, [r3, r2]

	  //buf1.put(rxByte);

	  // инкрементируем �?четчик полученных байт
	  receivedBytesUARTCounter++;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_UART_RxCpltCallback+0x6c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_UART_RxCpltCallback+0x6c>)
 8001d78:	701a      	strb	r2, [r3, #0]

	  // �?нова ждем приема байта по UART1
	  HAL_UART_Receive_IT(&huart1, &receivedByteUART, 1);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4908      	ldr	r1, [pc, #32]	; (8001da0 <HAL_UART_RxCpltCallback+0x70>)
 8001d7e:	4803      	ldr	r0, [pc, #12]	; (8001d8c <HAL_UART_RxCpltCallback+0x5c>)
 8001d80:	f002 ff97 	bl	8004cb2 <HAL_UART_Receive_IT>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000784 	.word	0x20000784
 8001d90:	40010c00 	.word	0x40010c00
 8001d94:	2000073c 	.word	0x2000073c
 8001d98:	200006f4 	.word	0x200006f4
 8001d9c:	2000098c 	.word	0x2000098c
 8001da0:	20000888 	.word	0x20000888
 8001da4:	2000088c 	.word	0x2000088c

08001da8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <HAL_UART_TxCpltCallback+0x24>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d105      	bne.n	8001dc4 <HAL_UART_TxCpltCallback+0x1c>
  {
	  //// изначально было так - // гаcим cветодиод "TX"
	  //// HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);

	  // гаcим cветодиод "RX"
	  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dbe:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <HAL_UART_TxCpltCallback+0x28>)
 8001dc0:	f001 f96d 	bl	800309e <HAL_GPIO_WritePin>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000784 	.word	0x20000784
 8001dd0:	40010c00 	.word	0x40010c00

08001dd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) //check if the interrupt comes from TIM2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de4:	d139      	bne.n	8001e5a <HAL_TIM_PeriodElapsedCallback+0x86>
	{
		//HAL_TIM_Base_Stop(&htim2); tim2fixCounter RSTBUTTON
		if(!HAL_GPIO_ReadPin(RSTBUTTON_GPIO_Port, RSTBUTTON_Pin))
 8001de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dea:	4838      	ldr	r0, [pc, #224]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001dec:	f001 f940 	bl	8003070 <HAL_GPIO_ReadPin>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			if(!tim2status)
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d020      	beq.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x7c>
			{
				tim2fixCounter = tim2counter;
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a31      	ldr	r2, [pc, #196]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e14:	6013      	str	r3, [r2, #0]
				tim2status = true;
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e018      	b.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x7c>
			}
		}
		else
		{
			if(tim2status)
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d014      	beq.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x7c>
			{
				uint32_t pressTime = tim2counter - tim2fixCounter;
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	60bb      	str	r3, [r7, #8]
				if(pressTime > 50)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b32      	cmp	r3, #50	; 0x32
 8001e36:	d903      	bls.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x6c>
				{
					eraseFLASH();
 8001e38:	f7ff f8f8 	bl	800102c <_Z10eraseFLASHv>
					NVIC_SystemReset();
 8001e3c:	f7ff f912 	bl	8001064 <__NVIC_SystemReset>
				}
				else if (pressTime > 10)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d901      	bls.n	8001e4a <HAL_TIM_PeriodElapsedCallback+0x76>
				{
					NVIC_SystemReset();
 8001e46:	f7ff f90d 	bl	8001064 <__NVIC_SystemReset>
				}
				tim2status = false;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
			}
		}
		++tim2counter;
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a1f      	ldr	r2, [pc, #124]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e58:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM3) //check if the interrupt comes from TIM3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d121      	bne.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0xd4>
	{
		HAL_TIM_Base_Stop(&htim3);
 8001e64:	481e      	ldr	r0, [pc, #120]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e66:	f002 fac2 	bl	80043ee <HAL_TIM_Base_Stop>

		// копируем полученный пакет
		for (int i = 0; i < receivedBytesUARTCounter; ++i)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4293      	cmp	r3, r2
 8001e78:	da0c      	bge.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0xc0>
		{
			copiedReceivedPacketUART[i] = receivedPacketUART[i];
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	7819      	ldrb	r1, [r3, #0]
 8001e82:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	460a      	mov	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < receivedBytesUARTCounter; ++i)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e7ec      	b.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0x9a>
		}
		// копируем �?четчик полученных байт
		copiedReceivedBytesUARTCounter = receivedBytesUARTCounter;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001e9a:	701a      	strb	r2, [r3, #0]

		// у�?танавливаем флаг о готовно�?ти пакета, прин�?того по UART
		receivedPacketUARTisReady = true;
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]

		// обнул�?ем �?четчик полученных байт
		receivedBytesUARTCounter = 0;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d108      	bne.n	8001ec4 <HAL_TIM_PeriodElapsedCallback+0xf0>
	{
		HAL_TIM_Base_Stop(&htim4);
 8001eb2:	4812      	ldr	r0, [pc, #72]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001eb4:	f002 fa9b 	bl	80043ee <HAL_TIM_Base_Stop>

		//// изначально было так - // гаcим cветодиод "RX"
		//// HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);

		// гаcим cветодиод "TX"
		HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ebe:	4810      	ldr	r0, [pc, #64]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001ec0:	f001 f8ed 	bl	800309e <HAL_GPIO_WritePin>
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	20002408 	.word	0x20002408
 8001ed4:	20002400 	.word	0x20002400
 8001ed8:	20002404 	.word	0x20002404
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	200006f4 	.word	0x200006f4
 8001ee4:	2000098c 	.word	0x2000098c
 8001ee8:	2000088c 	.word	0x2000088c
 8001eec:	20000990 	.word	0x20000990
 8001ef0:	20000a90 	.word	0x20000a90
 8001ef4:	2000098d 	.word	0x2000098d
 8001ef8:	40000800 	.word	0x40000800
 8001efc:	2000073c 	.word	0x2000073c
 8001f00:	40010c00 	.word	0x40010c00

08001f04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == W5500_INT_Pin)
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	2b10      	cmp	r3, #16
 8001f12:	f040 80b6 	bne.w	8002082 <HAL_GPIO_EXTI_Callback+0x17e>
	{
		// читаем флаги прерываний от �?окетов
		uint8_t valueSIR = ethernetA1.readByteFromCRB(W5500_SIR);
 8001f16:	2117      	movs	r1, #23
 8001f18:	485c      	ldr	r0, [pc, #368]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001f1a:	f7fe f973 	bl	8000204 <_ZN5W550015readByteFromCRBEh>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
		uint8_t valueSn_IR {0};
 8001f22:	2300      	movs	r3, #0
 8001f24:	73bb      	strb	r3, [r7, #14]
		if (valueSIR)
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80aa 	beq.w	8002082 <HAL_GPIO_EXTI_Callback+0x17e>
		{
			if (valueSIR & W5500_S0_INT)
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01d      	beq.n	8001f74 <HAL_GPIO_EXTI_Callback+0x70>
			{
				// читаем флаги прерываний �?окета 0
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET0, W5500_Sn_IR);
 8001f38:	2202      	movs	r2, #2
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	4853      	ldr	r0, [pc, #332]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001f3e:	f7fe f9de 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d011      	beq.n	8001f74 <HAL_GPIO_EXTI_Callback+0x70>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET0, receiveSocket0data, &sizeOfReceiveSocket0data);
 8001f50:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001f52:	4a50      	ldr	r2, [pc, #320]	; (8002094 <HAL_GPIO_EXTI_Callback+0x190>)
 8001f54:	2108      	movs	r1, #8
 8001f56:	484d      	ldr	r0, [pc, #308]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001f58:	f7fe fba7 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket0dataReady = true;
 8001f5c:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <HAL_GPIO_EXTI_Callback+0x194>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
					needsTransmitUDP = true;
 8001f62:	4b4e      	ldr	r3, [pc, #312]	; (800209c <HAL_GPIO_EXTI_Callback+0x198>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S0_IR
					ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IR_RECV, W5500_Sn_IR);
 8001f68:	2302      	movs	r3, #2
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	2108      	movs	r1, #8
 8001f6e:	4847      	ldr	r0, [pc, #284]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001f70:	f7fe fa37 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				{

				}
			}

			if (valueSIR & W5500_S1_INT)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d031      	beq.n	8001fe2 <HAL_GPIO_EXTI_Callback+0xde>
			{
				// читаем флаги прерываний �?окета 1
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_IR);
 8001f7e:	2202      	movs	r2, #2
 8001f80:	2128      	movs	r1, #40	; 0x28
 8001f82:	4842      	ldr	r0, [pc, #264]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001f84:	f7fe f9bb 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d011      	beq.n	8001fba <HAL_GPIO_EXTI_Callback+0xb6>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET1, receiveSocket1data, &sizeOfReceiveSocket1data);
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001f98:	4a42      	ldr	r2, [pc, #264]	; (80020a4 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001f9a:	2128      	movs	r1, #40	; 0x28
 8001f9c:	483b      	ldr	r0, [pc, #236]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001f9e:	f7fe fb84 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket1dataReady = true;
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
					needsTransmitTCP = true;
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_RECV, W5500_Sn_IR);
 8001fae:	2302      	movs	r3, #2
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	2128      	movs	r1, #40	; 0x28
 8001fb4:	4835      	ldr	r0, [pc, #212]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001fb6:	f7fe fa14 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				if (valueSn_IR & W5500_Sn_IR_CON) // �?оединение �? пиром у�?пешно у�?тановлено
				{

				}

				if (valueSn_IR & W5500_Sn_IR_DISCON) // от пира получен пакет FIN или FIN/ACK
 8001fba:	7bbb      	ldrb	r3, [r7, #14]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <HAL_GPIO_EXTI_Callback+0xde>
				{
					// отправл�?ем команду DISCONNECT
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	2128      	movs	r1, #40	; 0x28
 8001fca:	4830      	ldr	r0, [pc, #192]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001fcc:	f7fe fa09 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
					// у�?танавливаем флаг
					needsOpenTCP = true;
 8001fd0:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_DISCON, W5500_Sn_IR);
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	2202      	movs	r2, #2
 8001fda:	2128      	movs	r1, #40	; 0x28
 8001fdc:	482b      	ldr	r0, [pc, #172]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001fde:	f7fe fa00 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				{

				}
			}

			if (valueSIR & W5500_S2_INT)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d04a      	beq.n	8002082 <HAL_GPIO_EXTI_Callback+0x17e>
			{
				// читаем флаги прерываний �?окета 2
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_IR);
 8001fec:	2202      	movs	r2, #2
 8001fee:	2148      	movs	r1, #72	; 0x48
 8001ff0:	4826      	ldr	r0, [pc, #152]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8001ff2:	f7fe f984 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 8001ffa:	7bbb      	ldrb	r3, [r7, #14]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <HAL_GPIO_EXTI_Callback+0x11e>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET2, receiveSocket2data, &sizeOfReceiveSocket2data);
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002006:	4a2c      	ldr	r2, [pc, #176]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002008:	2148      	movs	r1, #72	; 0x48
 800200a:	4820      	ldr	r0, [pc, #128]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 800200c:	f7fe fb4d 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket2dataReady = true;
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
					//needsTransmitTCP = true;
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_RECV, W5500_Sn_IR);
 8002016:	2302      	movs	r3, #2
 8002018:	2204      	movs	r2, #4
 800201a:	2148      	movs	r1, #72	; 0x48
 800201c:	481b      	ldr	r0, [pc, #108]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 800201e:	f7fe f9e0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				if (valueSn_IR & W5500_Sn_IR_SEND_OK) // команда SEND выполнена
				{

				}

				if (valueSn_IR & W5500_Sn_IR_CON) // �?оединение �? пиром у�?пешно у�?тановлено
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d016      	beq.n	800205a <HAL_GPIO_EXTI_Callback+0x156>
				{
					counterMessages = 0;
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
					typedValueCounter = 0;
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
					ptrReadBufferTelnet = bufferTelnet;
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 800203c:	601a      	str	r2, [r3, #0]
					ptrWriteBufferTelnet = bufferTelnet;
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002040:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002042:	601a      	str	r2, [r3, #0]
					ethernetA1.sendString(SOCKET2, text0);
 8002044:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002046:	2148      	movs	r1, #72	; 0x48
 8002048:	4810      	ldr	r0, [pc, #64]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 800204a:	f7fe fbbd 	bl	80007c8 <_ZN5W550010sendStringEhPc>
					// �?бра�?ываем флаг прерывани�? CON в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_CON, W5500_Sn_IR);
 800204e:	2302      	movs	r3, #2
 8002050:	2201      	movs	r2, #1
 8002052:	2148      	movs	r1, #72	; 0x48
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 8002056:	f7fe f9c4 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				}

				if (valueSn_IR & W5500_Sn_IR_DISCON) // от пира получен пакет FIN или FIN/ACK
 800205a:	7bbb      	ldrb	r3, [r7, #14]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00e      	beq.n	8002082 <HAL_GPIO_EXTI_Callback+0x17e>
				{
					// отправл�?ем команду DISCONNECT
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 8002064:	2301      	movs	r3, #1
 8002066:	2208      	movs	r2, #8
 8002068:	2148      	movs	r1, #72	; 0x48
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 800206c:	f7fe f9b9 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
					// у�?танавливаем флаг
					needsOpenTelnet = true;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_DISCON, W5500_Sn_IR);
 8002076:	2302      	movs	r3, #2
 8002078:	2202      	movs	r2, #2
 800207a:	2148      	movs	r1, #72	; 0x48
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <HAL_GPIO_EXTI_Callback+0x188>)
 800207e:	f7fe f9b0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
			}


		}
	}
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000240c 	.word	0x2000240c
 8002090:	2000129e 	.word	0x2000129e
 8002094:	20000a98 	.word	0x20000a98
 8002098:	20000a95 	.word	0x20000a95
 800209c:	20000a91 	.word	0x20000a91
 80020a0:	20001aaa 	.word	0x20001aaa
 80020a4:	200012a4 	.word	0x200012a4
 80020a8:	200012a0 	.word	0x200012a0
 80020ac:	20000a92 	.word	0x20000a92
 80020b0:	20000a93 	.word	0x20000a93
 80020b4:	200022b6 	.word	0x200022b6
 80020b8:	20001ab0 	.word	0x20001ab0
 80020bc:	20001aac 	.word	0x20001aac
 80020c0:	200023ce 	.word	0x200023ce
 80020c4:	200023b8 	.word	0x200023b8
 80020c8:	20000480 	.word	0x20000480
 80020cc:	200022b8 	.word	0x200022b8
 80020d0:	20000484 	.word	0x20000484
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000a94 	.word	0x20000a94

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <Error_Handler+0x8>
	...

080020e8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10e      	bne.n	8002116 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fe:	4293      	cmp	r3, r2
 8002100:	d109      	bne.n	8002116 <_Z41__static_initialization_and_destruction_0ii+0x2e>
W5500 ethernetA1(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);
 8002102:	2310      	movs	r3, #16
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2320      	movs	r3, #32
 800210c:	4a09      	ldr	r2, [pc, #36]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800210e:	490a      	ldr	r1, [pc, #40]	; (8002138 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002110:	480a      	ldr	r0, [pc, #40]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002112:	f7fe f823 	bl	800015c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <_Z41__static_initialization_and_destruction_0ii+0x44>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002122:	4293      	cmp	r3, r2
 8002124:	d102      	bne.n	800212c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002128:	f7fe f844 	bl	80001b4 <_ZN5W5500D1Ev>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40011000 	.word	0x40011000
 8002138:	20000654 	.word	0x20000654
 800213c:	2000240c 	.word	0x2000240c

08002140 <_GLOBAL__sub_I_hspi1>:
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
 8002144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002148:	2001      	movs	r0, #1
 800214a:	f7ff ffcd 	bl	80020e8 <_Z41__static_initialization_and_destruction_0ii>
 800214e:	bd80      	pop	{r7, pc}

08002150 <_GLOBAL__sub_D_hspi1>:
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
 8002154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff ffc5 	bl	80020e8 <_Z41__static_initialization_and_destruction_0ii>
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_MspInit+0x5c>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_MspInit+0x5c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6193      	str	r3, [r2, #24]
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_MspInit+0x5c>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_MspInit+0x5c>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_MspInit+0x5c>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_MspInit+0x5c>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_MspInit+0x60>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_MspInit+0x60>)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000

080021c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_SPI_MspInit+0x98>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d137      	bne.n	8002254 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_SPI_MspInit+0x9c>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <HAL_SPI_MspInit+0x9c>)
 80021ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_SPI_MspInit+0x9c>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_SPI_MspInit+0x9c>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_SPI_MspInit+0x9c>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_SPI_MspInit+0x9c>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002214:	23a0      	movs	r3, #160	; 0xa0
 8002216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	4619      	mov	r1, r3
 8002226:	480f      	ldr	r0, [pc, #60]	; (8002264 <HAL_SPI_MspInit+0xa0>)
 8002228:	f000 fd9e 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800222c:	2340      	movs	r3, #64	; 0x40
 800222e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4619      	mov	r1, r3
 800223e:	4809      	ldr	r0, [pc, #36]	; (8002264 <HAL_SPI_MspInit+0xa0>)
 8002240:	f000 fd92 	bl	8002d68 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2023      	movs	r0, #35	; 0x23
 800224a:	f000 faa6 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800224e:	2023      	movs	r0, #35	; 0x23
 8002250:	f000 fabf 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002254:	bf00      	nop
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40013000 	.word	0x40013000
 8002260:	40021000 	.word	0x40021000
 8002264:	40010800 	.word	0x40010800

08002268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d114      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4a25      	ldr	r2, [pc, #148]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	61d3      	str	r3, [r2, #28]
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	201c      	movs	r0, #28
 8002298:	f000 fa7f 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800229c:	201c      	movs	r0, #28
 800229e:	f000 fa98 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022a2:	e032      	b.n	800230a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_TIM_Base_MspInit+0xb0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d114      	bne.n	80022d8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	61d3      	str	r3, [r2, #28]
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	201d      	movs	r0, #29
 80022cc:	f000 fa65 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022d0:	201d      	movs	r0, #29
 80022d2:	f000 fa7e 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 80022d6:	e018      	b.n	800230a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_TIM_Base_MspInit+0xb4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d113      	bne.n	800230a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	61d3      	str	r3, [r2, #28]
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_TIM_Base_MspInit+0xac>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	201e      	movs	r0, #30
 8002300:	f000 fa4b 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002304:	201e      	movs	r0, #30
 8002306:	f000 fa64 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800

08002320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a20      	ldr	r2, [pc, #128]	; (80023bc <HAL_UART_MspInit+0x9c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d139      	bne.n	80023b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_UART_MspInit+0xa0>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_UART_MspInit+0xa0>)
 8002346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_UART_MspInit+0xa0>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_UART_MspInit+0xa0>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_UART_MspInit+0xa0>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_UART_MspInit+0xa0>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	4619      	mov	r1, r3
 8002384:	480f      	ldr	r0, [pc, #60]	; (80023c4 <HAL_UART_MspInit+0xa4>)
 8002386:	f000 fcef 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800238a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	4619      	mov	r1, r3
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <HAL_UART_MspInit+0xa4>)
 80023a0:	f000 fce2 	bl	8002d68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2100      	movs	r1, #0
 80023a8:	2025      	movs	r0, #37	; 0x25
 80023aa:	f000 f9f6 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ae:	2025      	movs	r0, #37	; 0x25
 80023b0:	f000 fa0f 	bl	80027d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010800 	.word	0x40010800

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <NMI_Handler+0x4>

080023ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <MemManage_Handler+0x4>

080023da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240e:	f000 f8ad 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}

08002416 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 800241a:	2010      	movs	r0, #16
 800241c:	f000 fe58 	bl	80030d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <TIM2_IRQHandler+0x10>)
 800242a:	f002 f859 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200006ac 	.word	0x200006ac

08002438 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <TIM3_IRQHandler+0x10>)
 800243e:	f002 f84f 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200006f4 	.word	0x200006f4

0800244c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <TIM4_IRQHandler+0x10>)
 8002452:	f002 f845 	bl	80044e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000073c 	.word	0x2000073c

08002460 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <SPI1_IRQHandler+0x10>)
 8002466:	f001 fdc9 	bl	8003ffc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000654 	.word	0x20000654

08002474 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <USART1_IRQHandler+0x10>)
 800247a:	f002 fc4b 	bl	8004d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000784 	.word	0x20000784

08002488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002496:	490d      	ldr	r1, [pc, #52]	; (80024cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800249c:	e002      	b.n	80024a4 <LoopCopyDataInit>

0800249e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a2:	3304      	adds	r3, #4

080024a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a8:	d3f9      	bcc.n	800249e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024ac:	4c0a      	ldr	r4, [pc, #40]	; (80024d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b0:	e001      	b.n	80024b6 <LoopFillZerobss>

080024b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b4:	3204      	adds	r2, #4

080024b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b8:	d3fb      	bcc.n	80024b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ba:	f7ff ffe5 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024be:	f003 f825 	bl	800550c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024c2:	f7fe fde5 	bl	8001090 <main>
  bx lr
 80024c6:	4770      	bx	lr
  ldr r0, =_sdata
 80024c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024cc:	200004fc 	.word	0x200004fc
  ldr r2, =_sidata
 80024d0:	080057c4 	.word	0x080057c4
  ldr r2, =_sbss
 80024d4:	20000500 	.word	0x20000500
  ldr r4, =_ebss
 80024d8:	20002640 	.word	0x20002640

080024dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <ADC1_2_IRQHandler>
	...

080024e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_Init+0x28>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <HAL_Init+0x28>)
 80024ea:	f043 0310 	orr.w	r3, r3, #16
 80024ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 f947 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f6:	200f      	movs	r0, #15
 80024f8:	f000 f808 	bl	800250c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024fc:	f7ff fe30 	bl	8002160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_InitTick+0x54>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_InitTick+0x58>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f95f 	bl	80027ee <HAL_SYSTICK_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00e      	b.n	8002558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d80a      	bhi.n	8002556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f000 f927 	bl	800279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <HAL_InitTick+0x5c>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000048c 	.word	0x2000048c
 8002564:	20000494 	.word	0x20000494
 8002568:	20000490 	.word	0x20000490

0800256c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_IncTick+0x1c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_IncTick+0x20>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a03      	ldr	r2, [pc, #12]	; (800258c <HAL_IncTick+0x20>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000494 	.word	0x20000494
 800258c:	2000261c 	.word	0x2000261c

08002590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return uwTick;
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <HAL_GetTick+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	2000261c 	.word	0x2000261c

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff fff0 	bl	8002590 <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffe0 	bl	8002590 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000494 	.word	0x20000494

080025ec <__NVIC_SetPriorityGrouping>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4906      	ldr	r1, [pc, #24]	; (8002684 <__NVIC_EnableIRQ+0x34>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100

08002688 <__NVIC_SetPriority>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	; (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f7ff ff90 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff2d 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ac:	f7ff ff42 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff ff90 	bl	80026dc <NVIC_EncodePriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff5f 	bl	8002688 <__NVIC_SetPriority>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff35 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffa2 	bl	8002740 <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002818:	2b02      	cmp	r3, #2
 800281a:	d008      	beq.n	800282e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2204      	movs	r2, #4
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e020      	b.n	8002870 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 020e 	bic.w	r2, r2, #14
 800283c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	2101      	movs	r1, #1
 8002858:	fa01 f202 	lsl.w	r2, r1, r2
 800285c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800288e:	2b02      	cmp	r3, #2
 8002890:	d005      	beq.n	800289e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2204      	movs	r2, #4
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e051      	b.n	8002942 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 020e 	bic.w	r2, r2, #14
 80028ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_DMA_Abort_IT+0xd0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d029      	beq.n	800291c <HAL_DMA_Abort_IT+0xa0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_DMA_Abort_IT+0xd4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d022      	beq.n	8002918 <HAL_DMA_Abort_IT+0x9c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_DMA_Abort_IT+0xd8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d01a      	beq.n	8002912 <HAL_DMA_Abort_IT+0x96>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_DMA_Abort_IT+0xdc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d012      	beq.n	800290c <HAL_DMA_Abort_IT+0x90>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_DMA_Abort_IT+0xe0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00a      	beq.n	8002906 <HAL_DMA_Abort_IT+0x8a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_DMA_Abort_IT+0xe4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d102      	bne.n	8002900 <HAL_DMA_Abort_IT+0x84>
 80028fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028fe:	e00e      	b.n	800291e <HAL_DMA_Abort_IT+0xa2>
 8002900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002904:	e00b      	b.n	800291e <HAL_DMA_Abort_IT+0xa2>
 8002906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800290a:	e008      	b.n	800291e <HAL_DMA_Abort_IT+0xa2>
 800290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002910:	e005      	b.n	800291e <HAL_DMA_Abort_IT+0xa2>
 8002912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002916:	e002      	b.n	800291e <HAL_DMA_Abort_IT+0xa2>
 8002918:	2310      	movs	r3, #16
 800291a:	e000      	b.n	800291e <HAL_DMA_Abort_IT+0xa2>
 800291c:	2301      	movs	r3, #1
 800291e:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_DMA_Abort_IT+0xe8>)
 8002920:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
    } 
  }
  return status;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40020008 	.word	0x40020008
 8002950:	4002001c 	.word	0x4002001c
 8002954:	40020030 	.word	0x40020030
 8002958:	40020044 	.word	0x40020044
 800295c:	40020058 	.word	0x40020058
 8002960:	4002006c 	.word	0x4002006c
 8002964:	40020000 	.word	0x40020000

08002968 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_FLASH_Program+0xd8>)
 8002984:	7e1b      	ldrb	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_FLASH_Program+0x26>
 800298a:	2302      	movs	r3, #2
 800298c:	e054      	b.n	8002a38 <HAL_FLASH_Program+0xd0>
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_FLASH_Program+0xd8>)
 8002990:	2201      	movs	r2, #1
 8002992:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002994:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002998:	f000 f8a8 	bl	8002aec <FLASH_WaitForLastOperation>
 800299c:	4603      	mov	r3, r0
 800299e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d144      	bne.n	8002a30 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d102      	bne.n	80029b2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80029ac:	2301      	movs	r3, #1
 80029ae:	757b      	strb	r3, [r7, #21]
 80029b0:	e007      	b.n	80029c2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d102      	bne.n	80029be <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80029b8:	2302      	movs	r3, #2
 80029ba:	757b      	strb	r3, [r7, #21]
 80029bc:	e001      	b.n	80029c2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80029be:	2304      	movs	r3, #4
 80029c0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	75bb      	strb	r3, [r7, #22]
 80029c6:	e02d      	b.n	8002a24 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80029c8:	7dbb      	ldrb	r3, [r7, #22]
 80029ca:	005a      	lsls	r2, r3, #1
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	eb02 0c03 	add.w	ip, r2, r3
 80029d2:	7dbb      	ldrb	r3, [r7, #22]
 80029d4:	0119      	lsls	r1, r3, #4
 80029d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029da:	f1c1 0620 	rsb	r6, r1, #32
 80029de:	f1a1 0020 	sub.w	r0, r1, #32
 80029e2:	fa22 f401 	lsr.w	r4, r2, r1
 80029e6:	fa03 f606 	lsl.w	r6, r3, r6
 80029ea:	4334      	orrs	r4, r6
 80029ec:	fa23 f000 	lsr.w	r0, r3, r0
 80029f0:	4304      	orrs	r4, r0
 80029f2:	fa23 f501 	lsr.w	r5, r3, r1
 80029f6:	b2a3      	uxth	r3, r4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4660      	mov	r0, ip
 80029fc:	f000 f85a 	bl	8002ab4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a04:	f000 f872 	bl	8002aec <FLASH_WaitForLastOperation>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_FLASH_Program+0xdc>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_FLASH_Program+0xdc>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d107      	bne.n	8002a2e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002a1e:	7dbb      	ldrb	r3, [r7, #22]
 8002a20:	3301      	adds	r3, #1
 8002a22:	75bb      	strb	r3, [r7, #22]
 8002a24:	7dba      	ldrb	r2, [r7, #22]
 8002a26:	7d7b      	ldrb	r3, [r7, #21]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d3cd      	bcc.n	80029c8 <HAL_FLASH_Program+0x60>
 8002a2c:	e000      	b.n	8002a30 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002a2e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_FLASH_Program+0xd8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	761a      	strb	r2, [r3, #24]

  return status;
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a40:	20002620 	.word	0x20002620
 8002a44:	40022000 	.word	0x40022000

08002a48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_FLASH_Unlock+0x40>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_FLASH_Unlock+0x40>)
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_FLASH_Unlock+0x44>)
 8002a62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_FLASH_Unlock+0x40>)
 8002a66:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_FLASH_Unlock+0x48>)
 8002a68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <HAL_FLASH_Unlock+0x40>)
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	45670123 	.word	0x45670123
 8002a90:	cdef89ab 	.word	0xcdef89ab

08002a94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_FLASH_Lock+0x1c>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_FLASH_Lock+0x1c>)
 8002a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40022000 	.word	0x40022000

08002ab4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <FLASH_Program_HalfWord+0x30>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <FLASH_Program_HalfWord+0x34>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <FLASH_Program_HalfWord+0x34>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	801a      	strh	r2, [r3, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20002620 	.word	0x20002620
 8002ae8:	40022000 	.word	0x40022000

08002aec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff fd4c 	bl	8002590 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002afa:	e010      	b.n	8002b1e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d00c      	beq.n	8002b1e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <FLASH_WaitForLastOperation+0x2e>
 8002b0a:	f7ff fd41 	bl	8002590 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d201      	bcs.n	8002b1e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e025      	b.n	8002b6a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <FLASH_WaitForLastOperation+0x88>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1e8      	bne.n	8002afc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <FLASH_WaitForLastOperation+0x88>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <FLASH_WaitForLastOperation+0x88>)
 8002b38:	2220      	movs	r2, #32
 8002b3a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <FLASH_WaitForLastOperation+0x88>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10b      	bne.n	8002b60 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <FLASH_WaitForLastOperation+0x88>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <FLASH_WaitForLastOperation+0x88>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002b60:	f000 f80a 	bl	8002b78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40022000 	.word	0x40022000

08002b78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <FLASH_SetErrorCode+0x98>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <FLASH_SetErrorCode+0x9c>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <FLASH_SetErrorCode+0x9c>)
 8002b98:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f043 0310 	orr.w	r3, r3, #16
 8002ba0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <FLASH_SetErrorCode+0x98>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002bae:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <FLASH_SetErrorCode+0x9c>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <FLASH_SetErrorCode+0x9c>)
 8002bb8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <FLASH_SetErrorCode+0x98>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <FLASH_SetErrorCode+0x9c>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <FLASH_SetErrorCode+0x9c>)
 8002bd8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <FLASH_SetErrorCode+0x98>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <FLASH_SetErrorCode+0x98>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f240 1201 	movw	r2, #257	; 0x101
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d106      	bne.n	8002bfe <FLASH_SetErrorCode+0x86>
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <FLASH_SetErrorCode+0x98>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4a06      	ldr	r2, [pc, #24]	; (8002c10 <FLASH_SetErrorCode+0x98>)
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	61d3      	str	r3, [r2, #28]
}  
 8002bfc:	e002      	b.n	8002c04 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002bfe:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <FLASH_SetErrorCode+0x98>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	60d3      	str	r3, [r2, #12]
}  
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40022000 	.word	0x40022000
 8002c14:	20002620 	.word	0x20002620

08002c18 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <HAL_FLASHEx_Erase+0xd0>)
 8002c2c:	7e1b      	ldrb	r3, [r3, #24]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_FLASHEx_Erase+0x1e>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e053      	b.n	8002cde <HAL_FLASHEx_Erase+0xc6>
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_FLASHEx_Erase+0xd0>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d116      	bne.n	8002c72 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002c44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c48:	f7ff ff50 	bl	8002aec <FLASH_WaitForLastOperation>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d141      	bne.n	8002cd6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002c52:	2001      	movs	r0, #1
 8002c54:	f000 f84c 	bl	8002cf0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c5c:	f7ff ff46 	bl	8002aec <FLASH_WaitForLastOperation>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HAL_FLASHEx_Erase+0xd4>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <HAL_FLASHEx_Erase+0xd4>)
 8002c6a:	f023 0304 	bic.w	r3, r3, #4
 8002c6e:	6113      	str	r3, [r2, #16]
 8002c70:	e031      	b.n	8002cd6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002c72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c76:	f7ff ff39 	bl	8002aec <FLASH_WaitForLastOperation>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d12a      	bne.n	8002cd6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f04f 32ff 	mov.w	r2, #4294967295
 8002c86:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	e019      	b.n	8002cc4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002c90:	68b8      	ldr	r0, [r7, #8]
 8002c92:	f000 f849 	bl	8002d28 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c9a:	f7ff ff27 	bl	8002aec <FLASH_WaitForLastOperation>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_FLASHEx_Erase+0xd4>)
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4a11      	ldr	r2, [pc, #68]	; (8002cec <HAL_FLASHEx_Erase+0xd4>)
 8002ca8:	f023 0302 	bic.w	r3, r3, #2
 8002cac:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	601a      	str	r2, [r3, #0]
            break;
 8002cba:	e00c      	b.n	8002cd6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cc2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	029a      	lsls	r2, r3, #10
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3dc      	bcc.n	8002c90 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_FLASHEx_Erase+0xd0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	761a      	strb	r2, [r3, #24]

  return status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20002620 	.word	0x20002620
 8002cec:	40022000 	.word	0x40022000

08002cf0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <FLASH_MassErase+0x30>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <FLASH_MassErase+0x34>)
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <FLASH_MassErase+0x34>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <FLASH_MassErase+0x34>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <FLASH_MassErase+0x34>)
 8002d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d14:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	20002620 	.word	0x20002620
 8002d24:	40022000 	.word	0x40022000

08002d28 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <FLASH_PageErase+0x38>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <FLASH_PageErase+0x3c>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <FLASH_PageErase+0x3c>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <FLASH_PageErase+0x3c>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <FLASH_PageErase+0x3c>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <FLASH_PageErase+0x3c>)
 8002d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d52:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20002620 	.word	0x20002620
 8002d64:	40022000 	.word	0x40022000

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b08b      	sub	sp, #44	; 0x2c
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7a:	e169      	b.n	8003050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f040 8158 	bne.w	800304a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a9a      	ldr	r2, [pc, #616]	; (8003008 <HAL_GPIO_Init+0x2a0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d05e      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002da4:	4a98      	ldr	r2, [pc, #608]	; (8003008 <HAL_GPIO_Init+0x2a0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d875      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002daa:	4a98      	ldr	r2, [pc, #608]	; (800300c <HAL_GPIO_Init+0x2a4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d058      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002db0:	4a96      	ldr	r2, [pc, #600]	; (800300c <HAL_GPIO_Init+0x2a4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d86f      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002db6:	4a96      	ldr	r2, [pc, #600]	; (8003010 <HAL_GPIO_Init+0x2a8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d052      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002dbc:	4a94      	ldr	r2, [pc, #592]	; (8003010 <HAL_GPIO_Init+0x2a8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d869      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002dc2:	4a94      	ldr	r2, [pc, #592]	; (8003014 <HAL_GPIO_Init+0x2ac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04c      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002dc8:	4a92      	ldr	r2, [pc, #584]	; (8003014 <HAL_GPIO_Init+0x2ac>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d863      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002dce:	4a92      	ldr	r2, [pc, #584]	; (8003018 <HAL_GPIO_Init+0x2b0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d046      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
 8002dd4:	4a90      	ldr	r2, [pc, #576]	; (8003018 <HAL_GPIO_Init+0x2b0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d85d      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002dda:	2b12      	cmp	r3, #18
 8002ddc:	d82a      	bhi.n	8002e34 <HAL_GPIO_Init+0xcc>
 8002dde:	2b12      	cmp	r3, #18
 8002de0:	d859      	bhi.n	8002e96 <HAL_GPIO_Init+0x12e>
 8002de2:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_GPIO_Init+0x80>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e63 	.word	0x08002e63
 8002dec:	08002e3d 	.word	0x08002e3d
 8002df0:	08002e4f 	.word	0x08002e4f
 8002df4:	08002e91 	.word	0x08002e91
 8002df8:	08002e97 	.word	0x08002e97
 8002dfc:	08002e97 	.word	0x08002e97
 8002e00:	08002e97 	.word	0x08002e97
 8002e04:	08002e97 	.word	0x08002e97
 8002e08:	08002e97 	.word	0x08002e97
 8002e0c:	08002e97 	.word	0x08002e97
 8002e10:	08002e97 	.word	0x08002e97
 8002e14:	08002e97 	.word	0x08002e97
 8002e18:	08002e97 	.word	0x08002e97
 8002e1c:	08002e97 	.word	0x08002e97
 8002e20:	08002e97 	.word	0x08002e97
 8002e24:	08002e97 	.word	0x08002e97
 8002e28:	08002e97 	.word	0x08002e97
 8002e2c:	08002e45 	.word	0x08002e45
 8002e30:	08002e59 	.word	0x08002e59
 8002e34:	4a79      	ldr	r2, [pc, #484]	; (800301c <HAL_GPIO_Init+0x2b4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e3a:	e02c      	b.n	8002e96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	623b      	str	r3, [r7, #32]
          break;
 8002e42:	e029      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	623b      	str	r3, [r7, #32]
          break;
 8002e4c:	e024      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	3308      	adds	r3, #8
 8002e54:	623b      	str	r3, [r7, #32]
          break;
 8002e56:	e01f      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	623b      	str	r3, [r7, #32]
          break;
 8002e60:	e01a      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	623b      	str	r3, [r7, #32]
          break;
 8002e6e:	e013      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e78:	2308      	movs	r3, #8
 8002e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	611a      	str	r2, [r3, #16]
          break;
 8002e82:	e009      	b.n	8002e98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e84:	2308      	movs	r3, #8
 8002e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	615a      	str	r2, [r3, #20]
          break;
 8002e8e:	e003      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e90:	2300      	movs	r3, #0
 8002e92:	623b      	str	r3, [r7, #32]
          break;
 8002e94:	e000      	b.n	8002e98 <HAL_GPIO_Init+0x130>
          break;
 8002e96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2bff      	cmp	r3, #255	; 0xff
 8002e9c:	d801      	bhi.n	8002ea2 <HAL_GPIO_Init+0x13a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	e001      	b.n	8002ea6 <HAL_GPIO_Init+0x13e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2bff      	cmp	r3, #255	; 0xff
 8002eac:	d802      	bhi.n	8002eb4 <HAL_GPIO_Init+0x14c>
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	e002      	b.n	8002eba <HAL_GPIO_Init+0x152>
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	3b08      	subs	r3, #8
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	6a39      	ldr	r1, [r7, #32]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80b1 	beq.w	800304a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ee8:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <HAL_GPIO_Init+0x2b8>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4a4c      	ldr	r2, [pc, #304]	; (8003020 <HAL_GPIO_Init+0x2b8>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6193      	str	r3, [r2, #24]
 8002ef4:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_GPIO_Init+0x2b8>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f00:	4a48      	ldr	r2, [pc, #288]	; (8003024 <HAL_GPIO_Init+0x2bc>)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	220f      	movs	r2, #15
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a40      	ldr	r2, [pc, #256]	; (8003028 <HAL_GPIO_Init+0x2c0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_GPIO_Init+0x1ec>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3f      	ldr	r2, [pc, #252]	; (800302c <HAL_GPIO_Init+0x2c4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00d      	beq.n	8002f50 <HAL_GPIO_Init+0x1e8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3e      	ldr	r2, [pc, #248]	; (8003030 <HAL_GPIO_Init+0x2c8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <HAL_GPIO_Init+0x1e4>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3d      	ldr	r2, [pc, #244]	; (8003034 <HAL_GPIO_Init+0x2cc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_GPIO_Init+0x1e0>
 8002f44:	2303      	movs	r3, #3
 8002f46:	e006      	b.n	8002f56 <HAL_GPIO_Init+0x1ee>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e004      	b.n	8002f56 <HAL_GPIO_Init+0x1ee>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e002      	b.n	8002f56 <HAL_GPIO_Init+0x1ee>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_GPIO_Init+0x1ee>
 8002f54:	2300      	movs	r3, #0
 8002f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f58:	f002 0203 	and.w	r2, r2, #3
 8002f5c:	0092      	lsls	r2, r2, #2
 8002f5e:	4093      	lsls	r3, r2
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f66:	492f      	ldr	r1, [pc, #188]	; (8003024 <HAL_GPIO_Init+0x2bc>)
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f80:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	492c      	ldr	r1, [pc, #176]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	4928      	ldr	r1, [pc, #160]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fa8:	4b23      	ldr	r3, [pc, #140]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4922      	ldr	r1, [pc, #136]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	491e      	ldr	r1, [pc, #120]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4918      	ldr	r1, [pc, #96]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]
 8002fdc:	e006      	b.n	8002fec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4914      	ldr	r1, [pc, #80]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d021      	beq.n	800303c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	490e      	ldr	r1, [pc, #56]	; (8003038 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	60cb      	str	r3, [r1, #12]
 8003004:	e021      	b.n	800304a <HAL_GPIO_Init+0x2e2>
 8003006:	bf00      	nop
 8003008:	10320000 	.word	0x10320000
 800300c:	10310000 	.word	0x10310000
 8003010:	10220000 	.word	0x10220000
 8003014:	10210000 	.word	0x10210000
 8003018:	10120000 	.word	0x10120000
 800301c:	10110000 	.word	0x10110000
 8003020:	40021000 	.word	0x40021000
 8003024:	40010000 	.word	0x40010000
 8003028:	40010800 	.word	0x40010800
 800302c:	40010c00 	.word	0x40010c00
 8003030:	40011000 	.word	0x40011000
 8003034:	40011400 	.word	0x40011400
 8003038:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_GPIO_Init+0x304>)
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	43db      	mvns	r3, r3
 8003044:	4909      	ldr	r1, [pc, #36]	; (800306c <HAL_GPIO_Init+0x304>)
 8003046:	4013      	ands	r3, r2
 8003048:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	3301      	adds	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	f47f ae8e 	bne.w	8002d7c <HAL_GPIO_Init+0x14>
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	372c      	adds	r7, #44	; 0x2c
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	40010400 	.word	0x40010400

08003070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	807b      	strh	r3, [r7, #2]
 80030aa:	4613      	mov	r3, r2
 80030ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ae:	787b      	ldrb	r3, [r7, #1]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b4:	887a      	ldrh	r2, [r7, #2]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030ba:	e003      	b.n	80030c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030bc:	887b      	ldrh	r3, [r7, #2]
 80030be:	041a      	lsls	r2, r3, #16
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	611a      	str	r2, [r3, #16]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d006      	beq.n	80030f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe ff08 	bl	8001f04 <HAL_GPIO_EXTI_Callback>
  }
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40010400 	.word	0x40010400

08003100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e272      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8087 	beq.w	800322e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003120:	4b92      	ldr	r3, [pc, #584]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b04      	cmp	r3, #4
 800312a:	d00c      	beq.n	8003146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800312c:	4b8f      	ldr	r3, [pc, #572]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d112      	bne.n	800315e <HAL_RCC_OscConfig+0x5e>
 8003138:	4b8c      	ldr	r3, [pc, #560]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d10b      	bne.n	800315e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003146:	4b89      	ldr	r3, [pc, #548]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d06c      	beq.n	800322c <HAL_RCC_OscConfig+0x12c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d168      	bne.n	800322c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e24c      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x76>
 8003168:	4b80      	ldr	r3, [pc, #512]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a7f      	ldr	r2, [pc, #508]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e02e      	b.n	80031d4 <HAL_RCC_OscConfig+0xd4>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x98>
 800317e:	4b7b      	ldr	r3, [pc, #492]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a7a      	ldr	r2, [pc, #488]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b78      	ldr	r3, [pc, #480]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a77      	ldr	r2, [pc, #476]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e01d      	b.n	80031d4 <HAL_RCC_OscConfig+0xd4>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0xbc>
 80031a2:	4b72      	ldr	r3, [pc, #456]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a71      	ldr	r2, [pc, #452]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6e      	ldr	r2, [pc, #440]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e00b      	b.n	80031d4 <HAL_RCC_OscConfig+0xd4>
 80031bc:	4b6b      	ldr	r3, [pc, #428]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a6a      	ldr	r2, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b68      	ldr	r3, [pc, #416]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a67      	ldr	r2, [pc, #412]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d013      	beq.n	8003204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7ff f9d8 	bl	8002590 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7ff f9d4 	bl	8002590 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e200      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b5d      	ldr	r3, [pc, #372]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0xe4>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7ff f9c4 	bl	8002590 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7ff f9c0 	bl	8002590 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e1ec      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	4b53      	ldr	r3, [pc, #332]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x10c>
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d063      	beq.n	8003302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800323a:	4b4c      	ldr	r3, [pc, #304]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003246:	4b49      	ldr	r3, [pc, #292]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b08      	cmp	r3, #8
 8003250:	d11c      	bne.n	800328c <HAL_RCC_OscConfig+0x18c>
 8003252:	4b46      	ldr	r3, [pc, #280]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d116      	bne.n	800328c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_RCC_OscConfig+0x176>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d001      	beq.n	8003276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e1c0      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003276:	4b3d      	ldr	r3, [pc, #244]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4939      	ldr	r1, [pc, #228]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	e03a      	b.n	8003302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003294:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7ff f979 	bl	8002590 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a2:	f7ff f975 	bl	8002590 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1a1      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c0:	4b2a      	ldr	r3, [pc, #168]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4927      	ldr	r1, [pc, #156]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]
 80032d4:	e015      	b.n	8003302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_RCC_OscConfig+0x270>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7ff f958 	bl	8002590 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e4:	f7ff f954 	bl	8002590 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e180      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d03a      	beq.n	8003384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d019      	beq.n	800334a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003316:	4b17      	ldr	r3, [pc, #92]	; (8003374 <HAL_RCC_OscConfig+0x274>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331c:	f7ff f938 	bl	8002590 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003324:	f7ff f934 	bl	8002590 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e160      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_RCC_OscConfig+0x26c>)
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003342:	2001      	movs	r0, #1
 8003344:	f000 fada 	bl	80038fc <RCC_Delay>
 8003348:	e01c      	b.n	8003384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_RCC_OscConfig+0x274>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7ff f91e 	bl	8002590 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003356:	e00f      	b.n	8003378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7ff f91a 	bl	8002590 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d908      	bls.n	8003378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e146      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	42420000 	.word	0x42420000
 8003374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e9      	bne.n	8003358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a6 	beq.w	80034de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003396:	4b8b      	ldr	r3, [pc, #556]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10d      	bne.n	80033be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a87      	ldr	r2, [pc, #540]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	61d3      	str	r3, [r2, #28]
 80033ae:	4b85      	ldr	r3, [pc, #532]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033be:	4b82      	ldr	r3, [pc, #520]	; (80035c8 <HAL_RCC_OscConfig+0x4c8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d118      	bne.n	80033fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ca:	4b7f      	ldr	r3, [pc, #508]	; (80035c8 <HAL_RCC_OscConfig+0x4c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7e      	ldr	r2, [pc, #504]	; (80035c8 <HAL_RCC_OscConfig+0x4c8>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d6:	f7ff f8db 	bl	8002590 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7ff f8d7 	bl	8002590 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b64      	cmp	r3, #100	; 0x64
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e103      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x4c8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x312>
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4a6e      	ldr	r2, [pc, #440]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6213      	str	r3, [r2, #32]
 8003410:	e02d      	b.n	800346e <HAL_RCC_OscConfig+0x36e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x334>
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4a69      	ldr	r2, [pc, #420]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6213      	str	r3, [r2, #32]
 8003426:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a66      	ldr	r2, [pc, #408]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	e01c      	b.n	800346e <HAL_RCC_OscConfig+0x36e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d10c      	bne.n	8003456 <HAL_RCC_OscConfig+0x356>
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	4a60      	ldr	r2, [pc, #384]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	6213      	str	r3, [r2, #32]
 8003448:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a5d      	ldr	r2, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	e00b      	b.n	800346e <HAL_RCC_OscConfig+0x36e>
 8003456:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4a5a      	ldr	r2, [pc, #360]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6213      	str	r3, [r2, #32]
 8003462:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a57      	ldr	r2, [pc, #348]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 0304 	bic.w	r3, r3, #4
 800346c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d015      	beq.n	80034a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003476:	f7ff f88b 	bl	8002590 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7ff f887 	bl	8002590 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0b1      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ee      	beq.n	800347e <HAL_RCC_OscConfig+0x37e>
 80034a0:	e014      	b.n	80034cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7ff f875 	bl	8002590 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7ff f871 	bl	8002590 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e09b      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c0:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ee      	bne.n	80034aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4b3c      	ldr	r3, [pc, #240]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4a3b      	ldr	r2, [pc, #236]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8087 	beq.w	80035f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d061      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d146      	bne.n	800358a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4b33      	ldr	r3, [pc, #204]	; (80035cc <HAL_RCC_OscConfig+0x4cc>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7ff f845 	bl	8002590 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350a:	f7ff f841 	bl	8002590 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e06d      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003530:	d108      	bne.n	8003544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003544:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a19      	ldr	r1, [r3, #32]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	430b      	orrs	r3, r1
 8003556:	491b      	ldr	r1, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x4cc>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7ff f815 	bl	8002590 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356a:	f7ff f811 	bl	8002590 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e03d      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x46a>
 8003588:	e035      	b.n	80035f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b10      	ldr	r3, [pc, #64]	; (80035cc <HAL_RCC_OscConfig+0x4cc>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe fffe 	bl	8002590 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe fffa 	bl	8002590 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e026      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x498>
 80035b6:	e01e      	b.n	80035f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e019      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40007000 	.word	0x40007000
 80035cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x500>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0d0      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d910      	bls.n	8003648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b67      	ldr	r3, [pc, #412]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 0207 	bic.w	r2, r3, #7
 800362e:	4965      	ldr	r1, [pc, #404]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b8      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800366a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003678:	4b53      	ldr	r3, [pc, #332]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a52      	ldr	r2, [pc, #328]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	494d      	ldr	r1, [pc, #308]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d040      	beq.n	8003724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d115      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e073      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06b      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4936      	ldr	r1, [pc, #216]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe ff4c 	bl	8002590 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe ff48 	bl	8002590 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e053      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d210      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 0207 	bic.w	r2, r3, #7
 800373a:	4922      	ldr	r1, [pc, #136]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e032      	b.n	80037ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4916      	ldr	r1, [pc, #88]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003792:	f000 f821 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	490a      	ldr	r1, [pc, #40]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1cc>)
 80037ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1d0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe feaa 	bl	800250c <HAL_InitTick>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08005698 	.word	0x08005698
 80037d0:	2000048c 	.word	0x2000048c
 80037d4:	20000490 	.word	0x20000490

080037d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b490      	push	{r4, r7}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_RCC_GetSysClockFreq+0xac>)
 80037e0:	1d3c      	adds	r4, r7, #4
 80037e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037e8:	f240 2301 	movw	r3, #513	; 0x201
 80037ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003802:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b04      	cmp	r3, #4
 8003810:	d002      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x40>
 8003812:	2b08      	cmp	r3, #8
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x46>
 8003816:	e02b      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_RCC_GetSysClockFreq+0xb4>)
 800381a:	623b      	str	r3, [r7, #32]
      break;
 800381c:	e02b      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	0c9b      	lsrs	r3, r3, #18
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3328      	adds	r3, #40	; 0x28
 8003828:	443b      	add	r3, r7
 800382a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800382e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800383a:	4b13      	ldr	r3, [pc, #76]	; (8003888 <HAL_RCC_GetSysClockFreq+0xb0>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0c5b      	lsrs	r3, r3, #17
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	3328      	adds	r3, #40	; 0x28
 8003846:	443b      	add	r3, r7
 8003848:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800384c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003852:	fb03 f202 	mul.w	r2, r3, r2
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	e004      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	623b      	str	r3, [r7, #32]
      break;
 800386e:	e002      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003872:	623b      	str	r3, [r7, #32]
      break;
 8003874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003876:	6a3b      	ldr	r3, [r7, #32]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bc90      	pop	{r4, r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	08005688 	.word	0x08005688
 8003888:	40021000 	.word	0x40021000
 800388c:	00b71b00 	.word	0x00b71b00
 8003890:	003d0900 	.word	0x003d0900
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b02      	ldr	r3, [pc, #8]	; (80038a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	2000048c 	.word	0x2000048c

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b0:	f7ff fff2 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4903      	ldr	r1, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	080056a8 	.word	0x080056a8

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038d8:	f7ff ffde 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	0adb      	lsrs	r3, r3, #11
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	080056a8 	.word	0x080056a8

080038fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <RCC_Delay+0x34>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <RCC_Delay+0x38>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0a5b      	lsrs	r3, r3, #9
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003918:	bf00      	nop
  }
  while (Delay --);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1e5a      	subs	r2, r3, #1
 800391e:	60fa      	str	r2, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f9      	bne.n	8003918 <RCC_Delay+0x1c>
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	2000048c 	.word	0x2000048c
 8003934:	10624dd3 	.word	0x10624dd3

08003938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e076      	b.n	8003a38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395a:	d009      	beq.n	8003970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	61da      	str	r2, [r3, #28]
 8003962:	e005      	b.n	8003970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fe fc1a 	bl	80021c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	ea42 0103 	orr.w	r1, r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	0c1a      	lsrs	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f002 0204 	and.w	r2, r2, #4
 8003a16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_SPI_Transmit+0x22>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e126      	b.n	8003cb0 <HAL_SPI_Transmit+0x270>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a6a:	f7fe fd91 	bl	8002590 <HAL_GetTick>
 8003a6e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d002      	beq.n	8003a86 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
 8003a82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a84:	e10b      	b.n	8003c9e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_SPI_Transmit+0x52>
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a96:	e102      	b.n	8003c9e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ade:	d10f      	bne.n	8003b00 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003afe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d007      	beq.n	8003b1e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b26:	d14b      	bne.n	8003bc0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit+0xf6>
 8003b30:	8afb      	ldrh	r3, [r7, #22]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d13e      	bne.n	8003bb4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b5a:	e02b      	b.n	8003bb4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d112      	bne.n	8003b90 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b8e:	e011      	b.n	8003bb4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b90:	f7fe fcfe 	bl	8002590 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d803      	bhi.n	8003ba8 <HAL_SPI_Transmit+0x168>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d102      	bne.n	8003bae <HAL_SPI_Transmit+0x16e>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bb2:	e074      	b.n	8003c9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ce      	bne.n	8003b5c <HAL_SPI_Transmit+0x11c>
 8003bbe:	e04c      	b.n	8003c5a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_Transmit+0x18e>
 8003bc8:	8afb      	ldrh	r3, [r7, #22]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d140      	bne.n	8003c50 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bf4:	e02c      	b.n	8003c50 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d113      	bne.n	8003c2c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	7812      	ldrb	r2, [r2, #0]
 8003c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c2a:	e011      	b.n	8003c50 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c2c:	f7fe fcb0 	bl	8002590 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d803      	bhi.n	8003c44 <HAL_SPI_Transmit+0x204>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d102      	bne.n	8003c4a <HAL_SPI_Transmit+0x20a>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c4e:	e026      	b.n	8003c9e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1cd      	bne.n	8003bf6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fb58 	bl	8004314 <SPI_EndRxTxTransaction>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e000      	b.n	8003c9e <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3720      	adds	r7, #32
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	; 0x30
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_SPI_TransmitReceive+0x26>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e18a      	b.n	8003ff4 <HAL_SPI_TransmitReceive+0x33c>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce6:	f7fe fc53 	bl	8002590 <HAL_GetTick>
 8003cea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d00f      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x70>
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0e:	d107      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <HAL_SPI_TransmitReceive+0x68>
 8003d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d003      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d26:	e15b      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x82>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x82>
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d40:	e14e      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d003      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2205      	movs	r2, #5
 8003d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	887a      	ldrh	r2, [r7, #2]
 8003d66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d007      	beq.n	8003daa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db2:	d178      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x10a>
 8003dbc:	8b7b      	ldrh	r3, [r7, #26]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d166      	bne.n	8003e90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	881a      	ldrh	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	1c9a      	adds	r2, r3, #2
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de6:	e053      	b.n	8003e90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d11b      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x176>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d016      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x176>
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d113      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	1c9a      	adds	r2, r3, #2
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d119      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x1b8>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d014      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	b292      	uxth	r2, r2
 8003e52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	1c9a      	adds	r2, r3, #2
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e70:	f7fe fb8e 	bl	8002590 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d807      	bhi.n	8003e90 <HAL_SPI_TransmitReceive+0x1d8>
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d003      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e8e:	e0a7      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1a6      	bne.n	8003de8 <HAL_SPI_TransmitReceive+0x130>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1a1      	bne.n	8003de8 <HAL_SPI_TransmitReceive+0x130>
 8003ea4:	e07c      	b.n	8003fa0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x1fc>
 8003eae:	8b7b      	ldrh	r3, [r7, #26]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d16b      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	7812      	ldrb	r2, [r2, #0]
 8003ec0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eda:	e057      	b.n	8003f8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d11c      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x26c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_SPI_TransmitReceive+0x26c>
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d114      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	7812      	ldrb	r2, [r2, #0]
 8003f06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d119      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x2ae>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d014      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f62:	2301      	movs	r3, #1
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f66:	f7fe fb13 	bl	8002590 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d803      	bhi.n	8003f7e <HAL_SPI_TransmitReceive+0x2c6>
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d102      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x2cc>
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d103      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f8a:	e029      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1a2      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x224>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d19d      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f9b5 	bl	8004314 <SPI_EndRxTxTransaction>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d006      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fbc:	e010      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	e000      	b.n	8003fe0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3730      	adds	r7, #48	; 0x30
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10f      	bne.n	8004040 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
    return;
 800403e:	e0be      	b.n	80041be <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_SPI_IRQHandler+0x66>
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	09db      	lsrs	r3, r3, #7
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
    return;
 8004060:	e0ad      	b.n	80041be <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_SPI_IRQHandler+0x80>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80a1 	beq.w	80041be <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 809a 	beq.w	80041be <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	099b      	lsrs	r3, r3, #6
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d023      	beq.n	80040de <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d011      	beq.n	80040c6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f043 0204 	orr.w	r2, r3, #4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	e00b      	b.n	80040de <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
        return;
 80040dc:	e06f      	b.n	80041be <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d014      	beq.n	8004114 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f043 0201 	orr.w	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	2b00      	cmp	r3, #0
 800411a:	d04f      	beq.n	80041bc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800412a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <HAL_SPI_IRQHandler+0x14c>
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d034      	beq.n	80041b2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0203 	bic.w	r2, r2, #3
 8004156:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d011      	beq.n	8004184 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <HAL_SPI_IRQHandler+0x1c8>)
 8004166:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fb85 	bl	800287c <HAL_DMA_Abort_IT>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004188:	2b00      	cmp	r3, #0
 800418a:	d016      	beq.n	80041ba <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004190:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <HAL_SPI_IRQHandler+0x1c8>)
 8004192:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fb6f 	bl	800287c <HAL_DMA_Abort_IT>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80041b0:	e003      	b.n	80041ba <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f808 	bl	80041c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80041b8:	e000      	b.n	80041bc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80041ba:	bf00      	nop
    return;
 80041bc:	bf00      	nop
  }
}
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	080041db 	.word	0x080041db

080041c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr

080041da <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff ffe7 	bl	80041c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004214:	f7fe f9bc 	bl	8002590 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	4413      	add	r3, r2
 8004222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004224:	f7fe f9b4 	bl	8002590 <HAL_GetTick>
 8004228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800422a:	4b39      	ldr	r3, [pc, #228]	; (8004310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	015b      	lsls	r3, r3, #5
 8004230:	0d1b      	lsrs	r3, r3, #20
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800423a:	e054      	b.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d050      	beq.n	80042e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004244:	f7fe f9a4 	bl	8002590 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	429a      	cmp	r2, r3
 8004252:	d902      	bls.n	800425a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d13d      	bne.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004272:	d111      	bne.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427c:	d004      	beq.n	8004288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004286:	d107      	bne.n	8004298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a0:	d10f      	bne.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e017      	b.n	8004306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4013      	ands	r3, r2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	429a      	cmp	r2, r3
 8004302:	d19b      	bne.n	800423c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000048c 	.word	0x2000048c

08004314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff ff6a 	bl	8004204 <SPI_WaitFlagStateUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e000      	b.n	8004348 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e041      	b.n	80043e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd ff76 	bl	8002268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f000 fa96 	bl	80048c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <HAL_TIM_Base_Stop+0x38>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	f240 4344 	movw	r3, #1092	; 0x444
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <HAL_TIM_Base_Stop+0x38>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
	...

0800443c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d001      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e03a      	b.n	80044ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <HAL_TIM_Base_Start_IT+0x98>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x58>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d009      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x58>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x58>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a13      	ldr	r2, [pc, #76]	; (80044dc <HAL_TIM_Base_Start_IT+0xa0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d111      	bne.n	80044b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d010      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b6:	e007      	b.n	80044c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40000800 	.word	0x40000800

080044e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9b1 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9a4 	bl	8004878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f9b3 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0204 	mvn.w	r2, #4
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f987 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f97a 	bl	8004878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f989 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b08      	cmp	r3, #8
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0208 	mvn.w	r2, #8
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2204      	movs	r2, #4
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f95d 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f950 	bl	8004878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f95f 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b10      	cmp	r3, #16
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0210 	mvn.w	r2, #16
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2208      	movs	r2, #8
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f933 	bl	800488a <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f926 	bl	8004878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f935 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0201 	mvn.w	r2, #1
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fd fbb8 	bl	8001dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b80      	cmp	r3, #128	; 0x80
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa77 	bl	8004b7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f8f9 	bl	80048ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d10e      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0220 	mvn.w	r2, #32
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa42 	bl	8004b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIM_ConfigClockSource+0x18>
 8004704:	2302      	movs	r3, #2
 8004706:	e0b3      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x180>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004726:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800472e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004740:	d03e      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0xd0>
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004746:	f200 8087 	bhi.w	8004858 <HAL_TIM_ConfigClockSource+0x168>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	f000 8085 	beq.w	800485c <HAL_TIM_ConfigClockSource+0x16c>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	d87f      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x168>
 8004758:	2b70      	cmp	r3, #112	; 0x70
 800475a:	d01a      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0xa2>
 800475c:	2b70      	cmp	r3, #112	; 0x70
 800475e:	d87b      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x168>
 8004760:	2b60      	cmp	r3, #96	; 0x60
 8004762:	d050      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x116>
 8004764:	2b60      	cmp	r3, #96	; 0x60
 8004766:	d877      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x168>
 8004768:	2b50      	cmp	r3, #80	; 0x50
 800476a:	d03c      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xf6>
 800476c:	2b50      	cmp	r3, #80	; 0x50
 800476e:	d873      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x168>
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d058      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x136>
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d86f      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x168>
 8004778:	2b30      	cmp	r3, #48	; 0x30
 800477a:	d064      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x156>
 800477c:	2b30      	cmp	r3, #48	; 0x30
 800477e:	d86b      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x168>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d060      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x156>
 8004784:	2b20      	cmp	r3, #32
 8004786:	d867      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x168>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d05c      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x156>
 800478c:	2b10      	cmp	r3, #16
 800478e:	d05a      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004790:	e062      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6899      	ldr	r1, [r3, #8]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f000 f966 	bl	8004a72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
      break;
 80047be:	e04e      	b.n	800485e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6899      	ldr	r1, [r3, #8]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f000 f94f 	bl	8004a72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e2:	609a      	str	r2, [r3, #8]
      break;
 80047e4:	e03b      	b.n	800485e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6859      	ldr	r1, [r3, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f000 f8c6 	bl	8004984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2150      	movs	r1, #80	; 0x50
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f91d 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 8004804:	e02b      	b.n	800485e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6859      	ldr	r1, [r3, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	461a      	mov	r2, r3
 8004814:	f000 f8e4 	bl	80049e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2160      	movs	r1, #96	; 0x60
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f90d 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 8004824:	e01b      	b.n	800485e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	461a      	mov	r2, r3
 8004834:	f000 f8a6 	bl	8004984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2140      	movs	r1, #64	; 0x40
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f8fd 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 8004844:	e00b      	b.n	800485e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f000 f8f4 	bl	8004a3e <TIM_ITRx_SetConfig>
        break;
 8004856:	e002      	b.n	800485e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800485c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a29      	ldr	r2, [pc, #164]	; (8004978 <TIM_Base_SetConfig+0xb8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <TIM_Base_SetConfig+0x30>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048de:	d007      	beq.n	80048f0 <TIM_Base_SetConfig+0x30>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a26      	ldr	r2, [pc, #152]	; (800497c <TIM_Base_SetConfig+0xbc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_Base_SetConfig+0x30>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a25      	ldr	r2, [pc, #148]	; (8004980 <TIM_Base_SetConfig+0xc0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1c      	ldr	r2, [pc, #112]	; (8004978 <TIM_Base_SetConfig+0xb8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00b      	beq.n	8004922 <TIM_Base_SetConfig+0x62>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004910:	d007      	beq.n	8004922 <TIM_Base_SetConfig+0x62>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a19      	ldr	r2, [pc, #100]	; (800497c <TIM_Base_SetConfig+0xbc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_Base_SetConfig+0x62>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a18      	ldr	r2, [pc, #96]	; (8004980 <TIM_Base_SetConfig+0xc0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d108      	bne.n	8004934 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a07      	ldr	r2, [pc, #28]	; (8004978 <TIM_Base_SetConfig+0xb8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d103      	bne.n	8004968 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	615a      	str	r2, [r3, #20]
}
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800

08004984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f023 030a 	bic.w	r3, r3, #10
 80049c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f023 0210 	bic.w	r2, r3, #16
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	031b      	lsls	r3, r3, #12
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	621a      	str	r2, [r3, #32]
}
 8004a34:	bf00      	nop
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f043 0307 	orr.w	r3, r3, #7
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	609a      	str	r2, [r3, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b087      	sub	sp, #28
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	021a      	lsls	r2, r3, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	609a      	str	r2, [r3, #8]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e046      	b.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a16      	ldr	r2, [pc, #88]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d009      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a10      	ldr	r2, [pc, #64]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10c      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40000400 	.word	0x40000400
 8004b68:	40000800 	.word	0x40000800

08004b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e03f      	b.n	8004c22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd fbb2 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2224      	movs	r2, #36	; 0x24
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fc01 	bl	80053dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	4613      	mov	r3, r2
 8004c36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d130      	bne.n	8004ca6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Transmit_IT+0x26>
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e029      	b.n	8004ca8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Transmit_IT+0x38>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e022      	b.n	8004ca8 <HAL_UART_Transmit_IT+0x7e>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	88fa      	ldrh	r2, [r7, #6]
 8004c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2221      	movs	r2, #33	; 0x21
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ca0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d11d      	bne.n	8004d08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_UART_Receive_IT+0x26>
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e016      	b.n	8004d0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Receive_IT+0x38>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e00f      	b.n	8004d0a <HAL_UART_Receive_IT+0x58>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f9e3 	bl	80050ca <UART_Start_Receive_IT>
 8004d04:	4603      	mov	r3, r0
 8004d06:	e000      	b.n	8004d0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_UART_IRQHandler+0x52>
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa93 	bl	800528a <UART_Receive_IT>
      return;
 8004d64:	e17b      	b.n	800505e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80b1 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x1bc>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <HAL_UART_IRQHandler+0x70>
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80a6 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_UART_IRQHandler+0x90>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xb0>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f043 0202 	orr.w	r2, r3, #2
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_UART_IRQHandler+0xd0>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f043 0204 	orr.w	r2, r3, #4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00f      	beq.n	8004e0e <HAL_UART_IRQHandler+0xfa>
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <HAL_UART_IRQHandler+0xee>
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f043 0208 	orr.w	r2, r3, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 811e 	beq.w	8005054 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_UART_IRQHandler+0x11e>
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fa2c 	bl	800528a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <HAL_UART_IRQHandler+0x146>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d031      	beq.n	8004ebe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f96e 	bl	800513c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d023      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	4a76      	ldr	r2, [pc, #472]	; (8005064 <HAL_UART_IRQHandler+0x350>)
 8004e8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd fcf2 	bl	800287c <HAL_DMA_Abort_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00e      	b.n	8004ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8da 	bl	8005068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e00a      	b.n	8004ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8d6 	bl	8005068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	e006      	b.n	8004ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8d2 	bl	8005068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004eca:	e0c3      	b.n	8005054 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	bf00      	nop
    return;
 8004ece:	e0c1      	b.n	8005054 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	f040 80a1 	bne.w	800501c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 809b 	beq.w	800501c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8095 	beq.w	800501c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d04e      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004f20:	8a3b      	ldrh	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8098 	beq.w	8005058 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f2c:	8a3a      	ldrh	r2, [r7, #16]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	f080 8092 	bcs.w	8005058 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8a3a      	ldrh	r2, [r7, #16]
 8004f38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d02b      	beq.n	8004f9c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f52:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f72:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0210 	bic.w	r2, r2, #16
 8004f90:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd fc35 	bl	8002806 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f864 	bl	800507a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004fb2:	e051      	b.n	8005058 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d047      	beq.n	800505c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004fcc:	8a7b      	ldrh	r3, [r7, #18]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d044      	beq.n	800505c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fe0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0210 	bic.w	r2, r2, #16
 800500e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005010:	8a7b      	ldrh	r3, [r7, #18]
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f830 	bl	800507a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800501a:	e01f      	b.n	800505c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_UART_IRQHandler+0x324>
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8c3 	bl	80051bc <UART_Transmit_IT>
    return;
 8005036:	e012      	b.n	800505e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <HAL_UART_IRQHandler+0x34a>
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f904 	bl	800525a <UART_EndTransmit_IT>
    return;
 8005052:	e004      	b.n	800505e <HAL_UART_IRQHandler+0x34a>
    return;
 8005054:	bf00      	nop
 8005056:	e002      	b.n	800505e <HAL_UART_IRQHandler+0x34a>
      return;
 8005058:	bf00      	nop
 800505a:	e000      	b.n	800505e <HAL_UART_IRQHandler+0x34a>
      return;
 800505c:	bf00      	nop
  }
}
 800505e:	3728      	adds	r7, #40	; 0x28
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	08005195 	.word	0x08005195

08005068 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4313      	orrs	r3, r2
 80050be:	b2db      	uxtb	r3, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	4613      	mov	r3, r2
 80050d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	88fa      	ldrh	r2, [r7, #6]
 80050e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2222      	movs	r2, #34	; 0x22
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800510e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0220 	orr.w	r2, r2, #32
 800512e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005152:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	2b01      	cmp	r3, #1
 800516a:	d107      	bne.n	800517c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0210 	bic.w	r2, r2, #16
 800517a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	; 0x30
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff ff5a 	bl	8005068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b21      	cmp	r3, #33	; 0x21
 80051ce:	d13e      	bne.n	800524e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d114      	bne.n	8005204 <UART_Transmit_IT+0x48>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d110      	bne.n	8005204 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	1c9a      	adds	r2, r3, #2
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]
 8005202:	e008      	b.n	8005216 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	1c59      	adds	r1, r3, #1
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6211      	str	r1, [r2, #32]
 800520e:	781a      	ldrb	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29b      	uxth	r3, r3
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4619      	mov	r1, r3
 8005224:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10f      	bne.n	800524a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005238:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005248:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	e000      	b.n	8005250 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr

0800525a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fc fd94 	bl	8001da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b22      	cmp	r3, #34	; 0x22
 800529c:	f040 8099 	bne.w	80053d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a8:	d117      	bne.n	80052da <UART_Receive_IT+0x50>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d113      	bne.n	80052da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	1c9a      	adds	r2, r3, #2
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
 80052d8:	e026      	b.n	8005328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ec:	d007      	beq.n	80052fe <UART_Receive_IT+0x74>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <UART_Receive_IT+0x82>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	b2da      	uxtb	r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e008      	b.n	800531e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005318:	b2da      	uxtb	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29b      	uxth	r3, r3
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4619      	mov	r1, r3
 8005336:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005338:	2b00      	cmp	r3, #0
 800533a:	d148      	bne.n	80053ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0220 	bic.w	r2, r2, #32
 800534a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800535a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	2b01      	cmp	r3, #1
 800537a:	d123      	bne.n	80053c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0210 	bic.w	r2, r2, #16
 8005390:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b10      	cmp	r3, #16
 800539e:	d10a      	bne.n	80053b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fe5c 	bl	800507a <HAL_UARTEx_RxEventCallback>
 80053c2:	e002      	b.n	80053ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fc fcb3 	bl	8001d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e002      	b.n	80053d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
  }
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005416:	f023 030c 	bic.w	r3, r3, #12
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	430b      	orrs	r3, r1
 8005422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <UART_SetConfig+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005444:	f7fe fa46 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	e002      	b.n	8005452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800544c:	f7fe fa2e 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8005450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009a      	lsls	r2, r3, #2
 800545c:	441a      	add	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <UART_SetConfig+0x118>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	0119      	lsls	r1, r3, #4
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009a      	lsls	r2, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	fbb2 f2f3 	udiv	r2, r2, r3
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <UART_SetConfig+0x118>)
 800548a:	fba3 0302 	umull	r0, r3, r3, r2
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2064      	movs	r0, #100	; 0x64
 8005492:	fb00 f303 	mul.w	r3, r0, r3
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	3332      	adds	r3, #50	; 0x32
 800549c:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <UART_SetConfig+0x118>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a8:	4419      	add	r1, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009a      	lsls	r2, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <UART_SetConfig+0x118>)
 80054c2:	fba3 0302 	umull	r0, r3, r3, r2
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	2064      	movs	r0, #100	; 0x64
 80054ca:	fb00 f303 	mul.w	r3, r0, r3
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	3332      	adds	r3, #50	; 0x32
 80054d4:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <UART_SetConfig+0x118>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	440a      	add	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40013800 	.word	0x40013800
 80054f4:	51eb851f 	.word	0x51eb851f

080054f8 <atoi>:
 80054f8:	220a      	movs	r2, #10
 80054fa:	2100      	movs	r1, #0
 80054fc:	f000 b8ae 	b.w	800565c <strtol>

08005500 <__errno>:
 8005500:	4b01      	ldr	r3, [pc, #4]	; (8005508 <__errno+0x8>)
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000498 	.word	0x20000498

0800550c <__libc_init_array>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	2600      	movs	r6, #0
 8005510:	4d0c      	ldr	r5, [pc, #48]	; (8005544 <__libc_init_array+0x38>)
 8005512:	4c0d      	ldr	r4, [pc, #52]	; (8005548 <__libc_init_array+0x3c>)
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	42a6      	cmp	r6, r4
 800551a:	d109      	bne.n	8005530 <__libc_init_array+0x24>
 800551c:	f000 f8a8 	bl	8005670 <_init>
 8005520:	2600      	movs	r6, #0
 8005522:	4d0a      	ldr	r5, [pc, #40]	; (800554c <__libc_init_array+0x40>)
 8005524:	4c0a      	ldr	r4, [pc, #40]	; (8005550 <__libc_init_array+0x44>)
 8005526:	1b64      	subs	r4, r4, r5
 8005528:	10a4      	asrs	r4, r4, #2
 800552a:	42a6      	cmp	r6, r4
 800552c:	d105      	bne.n	800553a <__libc_init_array+0x2e>
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	f855 3b04 	ldr.w	r3, [r5], #4
 8005534:	4798      	blx	r3
 8005536:	3601      	adds	r6, #1
 8005538:	e7ee      	b.n	8005518 <__libc_init_array+0xc>
 800553a:	f855 3b04 	ldr.w	r3, [r5], #4
 800553e:	4798      	blx	r3
 8005540:	3601      	adds	r6, #1
 8005542:	e7f2      	b.n	800552a <__libc_init_array+0x1e>
 8005544:	080057b4 	.word	0x080057b4
 8005548:	080057b4 	.word	0x080057b4
 800554c:	080057b4 	.word	0x080057b4
 8005550:	080057bc 	.word	0x080057bc

08005554 <memset>:
 8005554:	4603      	mov	r3, r0
 8005556:	4402      	add	r2, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <_strtol_l.constprop.0>:
 8005564:	2b01      	cmp	r3, #1
 8005566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556a:	4680      	mov	r8, r0
 800556c:	d001      	beq.n	8005572 <_strtol_l.constprop.0+0xe>
 800556e:	2b24      	cmp	r3, #36	; 0x24
 8005570:	d906      	bls.n	8005580 <_strtol_l.constprop.0+0x1c>
 8005572:	f7ff ffc5 	bl	8005500 <__errno>
 8005576:	2316      	movs	r3, #22
 8005578:	6003      	str	r3, [r0, #0]
 800557a:	2000      	movs	r0, #0
 800557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005580:	460d      	mov	r5, r1
 8005582:	4f35      	ldr	r7, [pc, #212]	; (8005658 <_strtol_l.constprop.0+0xf4>)
 8005584:	4628      	mov	r0, r5
 8005586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800558a:	5de6      	ldrb	r6, [r4, r7]
 800558c:	f016 0608 	ands.w	r6, r6, #8
 8005590:	d1f8      	bne.n	8005584 <_strtol_l.constprop.0+0x20>
 8005592:	2c2d      	cmp	r4, #45	; 0x2d
 8005594:	d12f      	bne.n	80055f6 <_strtol_l.constprop.0+0x92>
 8005596:	2601      	movs	r6, #1
 8005598:	782c      	ldrb	r4, [r5, #0]
 800559a:	1c85      	adds	r5, r0, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d057      	beq.n	8005650 <_strtol_l.constprop.0+0xec>
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d109      	bne.n	80055b8 <_strtol_l.constprop.0+0x54>
 80055a4:	2c30      	cmp	r4, #48	; 0x30
 80055a6:	d107      	bne.n	80055b8 <_strtol_l.constprop.0+0x54>
 80055a8:	7828      	ldrb	r0, [r5, #0]
 80055aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80055ae:	2858      	cmp	r0, #88	; 0x58
 80055b0:	d149      	bne.n	8005646 <_strtol_l.constprop.0+0xe2>
 80055b2:	2310      	movs	r3, #16
 80055b4:	786c      	ldrb	r4, [r5, #1]
 80055b6:	3502      	adds	r5, #2
 80055b8:	2700      	movs	r7, #0
 80055ba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80055be:	f10e 3eff 	add.w	lr, lr, #4294967295
 80055c2:	fbbe f9f3 	udiv	r9, lr, r3
 80055c6:	4638      	mov	r0, r7
 80055c8:	fb03 ea19 	mls	sl, r3, r9, lr
 80055cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80055d0:	f1bc 0f09 	cmp.w	ip, #9
 80055d4:	d814      	bhi.n	8005600 <_strtol_l.constprop.0+0x9c>
 80055d6:	4664      	mov	r4, ip
 80055d8:	42a3      	cmp	r3, r4
 80055da:	dd22      	ble.n	8005622 <_strtol_l.constprop.0+0xbe>
 80055dc:	2f00      	cmp	r7, #0
 80055de:	db1d      	blt.n	800561c <_strtol_l.constprop.0+0xb8>
 80055e0:	4581      	cmp	r9, r0
 80055e2:	d31b      	bcc.n	800561c <_strtol_l.constprop.0+0xb8>
 80055e4:	d101      	bne.n	80055ea <_strtol_l.constprop.0+0x86>
 80055e6:	45a2      	cmp	sl, r4
 80055e8:	db18      	blt.n	800561c <_strtol_l.constprop.0+0xb8>
 80055ea:	2701      	movs	r7, #1
 80055ec:	fb00 4003 	mla	r0, r0, r3, r4
 80055f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055f4:	e7ea      	b.n	80055cc <_strtol_l.constprop.0+0x68>
 80055f6:	2c2b      	cmp	r4, #43	; 0x2b
 80055f8:	bf04      	itt	eq
 80055fa:	782c      	ldrbeq	r4, [r5, #0]
 80055fc:	1c85      	addeq	r5, r0, #2
 80055fe:	e7cd      	b.n	800559c <_strtol_l.constprop.0+0x38>
 8005600:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005604:	f1bc 0f19 	cmp.w	ip, #25
 8005608:	d801      	bhi.n	800560e <_strtol_l.constprop.0+0xaa>
 800560a:	3c37      	subs	r4, #55	; 0x37
 800560c:	e7e4      	b.n	80055d8 <_strtol_l.constprop.0+0x74>
 800560e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005612:	f1bc 0f19 	cmp.w	ip, #25
 8005616:	d804      	bhi.n	8005622 <_strtol_l.constprop.0+0xbe>
 8005618:	3c57      	subs	r4, #87	; 0x57
 800561a:	e7dd      	b.n	80055d8 <_strtol_l.constprop.0+0x74>
 800561c:	f04f 37ff 	mov.w	r7, #4294967295
 8005620:	e7e6      	b.n	80055f0 <_strtol_l.constprop.0+0x8c>
 8005622:	2f00      	cmp	r7, #0
 8005624:	da07      	bge.n	8005636 <_strtol_l.constprop.0+0xd2>
 8005626:	2322      	movs	r3, #34	; 0x22
 8005628:	4670      	mov	r0, lr
 800562a:	f8c8 3000 	str.w	r3, [r8]
 800562e:	2a00      	cmp	r2, #0
 8005630:	d0a4      	beq.n	800557c <_strtol_l.constprop.0+0x18>
 8005632:	1e69      	subs	r1, r5, #1
 8005634:	e005      	b.n	8005642 <_strtol_l.constprop.0+0xde>
 8005636:	b106      	cbz	r6, 800563a <_strtol_l.constprop.0+0xd6>
 8005638:	4240      	negs	r0, r0
 800563a:	2a00      	cmp	r2, #0
 800563c:	d09e      	beq.n	800557c <_strtol_l.constprop.0+0x18>
 800563e:	2f00      	cmp	r7, #0
 8005640:	d1f7      	bne.n	8005632 <_strtol_l.constprop.0+0xce>
 8005642:	6011      	str	r1, [r2, #0]
 8005644:	e79a      	b.n	800557c <_strtol_l.constprop.0+0x18>
 8005646:	2430      	movs	r4, #48	; 0x30
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1b5      	bne.n	80055b8 <_strtol_l.constprop.0+0x54>
 800564c:	2308      	movs	r3, #8
 800564e:	e7b3      	b.n	80055b8 <_strtol_l.constprop.0+0x54>
 8005650:	2c30      	cmp	r4, #48	; 0x30
 8005652:	d0a9      	beq.n	80055a8 <_strtol_l.constprop.0+0x44>
 8005654:	230a      	movs	r3, #10
 8005656:	e7af      	b.n	80055b8 <_strtol_l.constprop.0+0x54>
 8005658:	080056b1 	.word	0x080056b1

0800565c <strtol>:
 800565c:	4613      	mov	r3, r2
 800565e:	460a      	mov	r2, r1
 8005660:	4601      	mov	r1, r0
 8005662:	4802      	ldr	r0, [pc, #8]	; (800566c <strtol+0x10>)
 8005664:	6800      	ldr	r0, [r0, #0]
 8005666:	f7ff bf7d 	b.w	8005564 <_strtol_l.constprop.0>
 800566a:	bf00      	nop
 800566c:	20000498 	.word	0x20000498

08005670 <_init>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr

0800567c <_fini>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr


W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005380  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b8  080055b8  000204dc  2**0
                  CONTENTS
  4 .ARM          00000000  080055b8  080055b8  000204dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055b8  080055b8  000204dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004dc  20000000  080055c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002108  200004e0  08005aa4  000204e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200025e8  08005aa4  000225e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011484  00000000  00000000  00020505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa1  00000000  00000000  00031989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00034430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  000354f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a730  00000000  00000000  000364c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a0c  00000000  00000000  00050bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f08d  00000000  00000000  00062604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  000f16e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200004e0 	.word	0x200004e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005474 	.word	0x08005474

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200004e4 	.word	0x200004e4
 8000148:	08005474 	.word	0x08005474

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
//#pragma once
#include "W5500.h"

W5500::W5500(
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	807b      	strh	r3, [r7, #2]
		SPI_HandleTypeDef* hspi_m,
		GPIO_TypeDef* W5500_CS_GPIO_Port_m,
		uint16_t W5500_CS_Pin_m,
		GPIO_TypeDef* W5500_RST_GPIO_Port_m,
		uint16_t W5500_RST_Pin_m
		)
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	3310      	adds	r3, #16
 800016e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f005 f8ef 	bl	8005358 <memset>
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f005 f8e6 	bl	8005358 <memset>
{
	hspi_w = hspi_m;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	68ba      	ldr	r2, [r7, #8]
 8000190:	601a      	str	r2, [r3, #0]
	W5500_CS_GPIO_Port_w = W5500_CS_GPIO_Port_m;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	605a      	str	r2, [r3, #4]
	W5500_CS_Pin_w = W5500_CS_Pin_m;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	887a      	ldrh	r2, [r7, #2]
 800019c:	819a      	strh	r2, [r3, #12]
	W5500_RST_GPIO_Port_w = W5500_RST_GPIO_Port_m;
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	69ba      	ldr	r2, [r7, #24]
 80001a2:	609a      	str	r2, [r3, #8]
	W5500_RST_Pin_w = W5500_RST_Pin_m;
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	8bba      	ldrh	r2, [r7, #28]
 80001a8:	81da      	strh	r2, [r3, #14]
}
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	4618      	mov	r0, r3
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <_ZN5W5500D1Ev>:

W5500::~W5500()
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
{
}
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	4618      	mov	r0, r3
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <_ZN5W55005resetEv>:

// аппаратный сброс чипа
void W5500::reset()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// для аппаратного сброса "тянем" вход RSTn к "0" на 1 мс
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_RESET);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6898      	ldr	r0, [r3, #8]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	89db      	ldrh	r3, [r3, #14]
 80001d8:	2200      	movs	r2, #0
 80001da:	4619      	mov	r1, r3
 80001dc:	f002 fe62 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f002 f8f9 	bl	80023d8 <HAL_Delay>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	6898      	ldr	r0, [r3, #8]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	89db      	ldrh	r3, [r3, #14]
 80001ee:	2201      	movs	r2, #1
 80001f0:	4619      	mov	r1, r3
 80001f2:	f002 fe57 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f002 f8ee 	bl	80023d8 <HAL_Delay>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <_ZN5W550015readByteFromCRBEh>:

//---------------------------------------------------------------------------

// читаем байт из регистра блока CRB
uint8_t W5500::readByteFromCRB(uint8_t address)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af02      	add	r7, sp, #8
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	mosiBytes_w[0] = 0;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	78fa      	ldrb	r2, [r7, #3]
 800021a:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	6858      	ldr	r0, [r3, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	899b      	ldrh	r3, [r3, #12]
 800022a:	2200      	movs	r2, #0
 800022c:	4619      	mov	r1, r3
 800022e:	f002 fe39 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f103 0110 	add.w	r1, r3, #16
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2304      	movs	r3, #4
 800024a:	f003 fc37 	bl	8003abc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6858      	ldr	r0, [r3, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	899b      	ldrh	r3, [r3, #12]
 8000256:	2201      	movs	r2, #1
 8000258:	4619      	mov	r1, r3
 800025a:	f002 fe23 	bl	8002ea4 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <_ZN5W550015writeArrayToCRBEPhhh>:
	return;
}

// записываем массив байт в регистры блока CRB
void W5500::writeArrayToCRB(uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	460b      	mov	r3, r1
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	4613      	mov	r3, r2
 8000280:	71bb      	strb	r3, [r7, #6]
	mosiBytes_w[0] = 0;
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2200      	movs	r2, #0
 8000286:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	79ba      	ldrb	r2, [r7, #6]
 800028c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	2204      	movs	r2, #4
 8000292:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	429a      	cmp	r2, r3
 800029e:	da0d      	bge.n	80002bc <_ZN5W550015writeArrayToCRBEPhhh+0x50>
	{
		mosiBytes_w[i+3] = array[i];
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	441a      	add	r2, r3
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3303      	adds	r3, #3
 80002aa:	7811      	ldrb	r1, [r2, #0]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	4413      	add	r3, r2
 80002b0:	460a      	mov	r2, r1
 80002b2:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	3301      	adds	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	e7ed      	b.n	8000298 <_ZN5W550015writeArrayToCRBEPhhh+0x2c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	6858      	ldr	r0, [r3, #4]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	899b      	ldrh	r3, [r3, #12]
 80002c4:	2200      	movs	r2, #0
 80002c6:	4619      	mov	r1, r3
 80002c8:	f002 fdec 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f103 0110 	add.w	r1, r3, #16
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	3303      	adds	r3, #3
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	f003 faaf 	bl	8003844 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	6858      	ldr	r0, [r3, #4]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	899b      	ldrh	r3, [r3, #12]
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	f002 fdd7 	bl	8002ea4 <HAL_GPIO_WritePin>
	return;
 80002f6:	bf00      	nop
}
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <_ZN5W550015readByteFromSRBEhh>:

// читаем байт из регистра блока SRB
uint8_t W5500::readByteFromSRB(uint8_t socket, uint8_t address)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b084      	sub	sp, #16
 8000302:	af02      	add	r7, sp, #8
 8000304:	6078      	str	r0, [r7, #4]
 8000306:	460b      	mov	r3, r1
 8000308:	70fb      	strb	r3, [r7, #3]
 800030a:	4613      	mov	r3, r2
 800030c:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	78ba      	ldrb	r2, [r7, #2]
 8000318:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	78fa      	ldrb	r2, [r7, #3]
 800031e:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6858      	ldr	r0, [r3, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	899b      	ldrh	r3, [r3, #12]
 8000328:	2200      	movs	r2, #0
 800032a:	4619      	mov	r1, r3
 800032c:	f002 fdba 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6818      	ldr	r0, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f103 0110 	add.w	r1, r3, #16
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2304      	movs	r3, #4
 8000348:	f003 fbb8 	bl	8003abc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6858      	ldr	r0, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	899b      	ldrh	r3, [r3, #12]
 8000354:	2201      	movs	r2, #1
 8000356:	4619      	mov	r1, r3
 8000358:	f002 fda4 	bl	8002ea4 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <_ZN5W550015readWordFromSRBEhh>:

// читаем слово (2 байта) из регистров блока SRB
uint16_t W5500::readWordFromSRB(uint8_t socket, uint8_t address)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b086      	sub	sp, #24
 800036e:	af02      	add	r7, sp, #8
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	460b      	mov	r3, r1
 8000374:	70fb      	strb	r3, [r7, #3]
 8000376:	4613      	mov	r3, r2
 8000378:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	78ba      	ldrb	r2, [r7, #2]
 8000384:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	78fa      	ldrb	r2, [r7, #3]
 800038a:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6858      	ldr	r0, [r3, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	899b      	ldrh	r3, [r3, #12]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	f002 fd84 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 5, 1000);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6818      	ldr	r0, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f103 0110 	add.w	r1, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80003ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2305      	movs	r3, #5
 80003b4:	f003 fb82 	bl	8003abc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6858      	ldr	r0, [r3, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	899b      	ldrh	r3, [r3, #12]
 80003c0:	2201      	movs	r2, #1
 80003c2:	4619      	mov	r1, r3
 80003c4:	f002 fd6e 	bl	8002ea4 <HAL_GPIO_WritePin>
	word_w5500 temp;
	temp.byte[0] = misoBytes_w[4];
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80003ce:	733b      	strb	r3, [r7, #12]
	temp.byte[1] = misoBytes_w[3];
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80003d6:	737b      	strb	r3, [r7, #13]
	return temp.word;
 80003d8:	89bb      	ldrh	r3, [r7, #12]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <_ZN5W550014writeByteToSRBEhhh>:
	return;
}

// записываем байт в регистр блока SRB
void W5500::writeByteToSRB(uint8_t socket, uint8_t value, uint8_t address)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b082      	sub	sp, #8
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	4608      	mov	r0, r1
 80003ec:	4611      	mov	r1, r2
 80003ee:	461a      	mov	r2, r3
 80003f0:	4603      	mov	r3, r0
 80003f2:	70fb      	strb	r3, [r7, #3]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70bb      	strb	r3, [r7, #2]
 80003f8:	4613      	mov	r3, r2
 80003fa:	707b      	strb	r3, [r7, #1]
	mosiBytes_w[0] = 0;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	787a      	ldrb	r2, [r7, #1]
 8000406:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	b2da      	uxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = value;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	78ba      	ldrb	r2, [r7, #2]
 8000418:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6858      	ldr	r0, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	899b      	ldrh	r3, [r3, #12]
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	f002 fd3d 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 1000);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f103 0110 	add.w	r1, r3, #16
 8000434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000438:	2204      	movs	r2, #4
 800043a:	f003 fa03 	bl	8003844 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6858      	ldr	r0, [r3, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	899b      	ldrh	r3, [r3, #12]
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	f002 fd2b 	bl	8002ea4 <HAL_GPIO_WritePin>
	return;
 800044e:	bf00      	nop
}
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_ZN5W550014writeWordToSRBEhth>:

// записываем слово (2 байта) в регистры блока SRB
void W5500::writeWordToSRB(uint8_t socket, uint16_t value, uint8_t address)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b084      	sub	sp, #16
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	4608      	mov	r0, r1
 8000460:	4611      	mov	r1, r2
 8000462:	461a      	mov	r2, r3
 8000464:	4603      	mov	r3, r0
 8000466:	70fb      	strb	r3, [r7, #3]
 8000468:	460b      	mov	r3, r1
 800046a:	803b      	strh	r3, [r7, #0]
 800046c:	4613      	mov	r3, r2
 800046e:	70bb      	strb	r3, [r7, #2]
	word_w5500 temp;
	temp.word = value;
 8000470:	883b      	ldrh	r3, [r7, #0]
 8000472:	81bb      	strh	r3, [r7, #12]
	mosiBytes_w[0] = 0;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	78ba      	ldrb	r2, [r7, #2]
 800047e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	b2da      	uxtb	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = temp.byte[1];
 800048c:	7b7a      	ldrb	r2, [r7, #13]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = temp.byte[0];
 8000492:	7b3a      	ldrb	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	751a      	strb	r2, [r3, #20]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6858      	ldr	r0, [r3, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	899b      	ldrh	r3, [r3, #12]
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	f002 fcfe 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 5, 1000);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f103 0110 	add.w	r1, r3, #16
 80004b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b6:	2205      	movs	r2, #5
 80004b8:	f003 f9c4 	bl	8003844 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6858      	ldr	r0, [r3, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	899b      	ldrh	r3, [r3, #12]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	f002 fcec 	bl	8002ea4 <HAL_GPIO_WritePin>
	return;
 80004cc:	bf00      	nop
}
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_ZN5W550015writeArrayToSRBEhPhhh>:

// записываем массив байт в регистры блока SRB
void W5500::writeArrayToSRB(uint8_t socket, uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	461a      	mov	r2, r3
 80004e0:	460b      	mov	r3, r1
 80004e2:	72fb      	strb	r3, [r7, #11]
 80004e4:	4613      	mov	r3, r2
 80004e6:	72bb      	strb	r3, [r7, #10]
	mosiBytes_w[0] = 0;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2200      	movs	r2, #0
 80004ec:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004f4:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	7abb      	ldrb	r3, [r7, #10]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	429a      	cmp	r2, r3
 800050c:	da0d      	bge.n	800052a <_ZN5W550015writeArrayToSRBEhPhhh+0x56>
	{
		mosiBytes_w[i+3] = array[i];
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	441a      	add	r2, r3
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3303      	adds	r3, #3
 8000518:	7811      	ldrb	r1, [r2, #0]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	460a      	mov	r2, r1
 8000520:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e7ed      	b.n	8000506 <_ZN5W550015writeArrayToSRBEhPhhh+0x32>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6858      	ldr	r0, [r3, #4]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	899b      	ldrh	r3, [r3, #12]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	f002 fcb5 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f103 0110 	add.w	r1, r3, #16
 8000544:	7abb      	ldrb	r3, [r7, #10]
 8000546:	b29b      	uxth	r3, r3
 8000548:	3303      	adds	r3, #3
 800054a:	b29a      	uxth	r2, r3
 800054c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000550:	f003 f978 	bl	8003844 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	899b      	ldrh	r3, [r3, #12]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f002 fca0 	bl	8002ea4 <HAL_GPIO_WritePin>
	return;
 8000564:	bf00      	nop
}
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <_ZN5W550021readArrayFromRXbufferEhPht6word_y>:

//---------------------------------------------------------------------------

// читаем массив байт в буфер TX
void W5500::readArrayFromRXbuffer(uint8_t socket, uint8_t* destinationArray, uint16_t sizeArray, word_y beginAddress)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b089      	sub	sp, #36	; 0x24
 8000570:	af02      	add	r7, sp, #8
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	72fb      	strb	r3, [r7, #11]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 8000580:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 8000588:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket + 16);
 8000590:	7afb      	ldrb	r3, [r7, #11]
 8000592:	3310      	adds	r3, #16
 8000594:	b2da      	uxtb	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6858      	ldr	r0, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	899b      	ldrh	r3, [r3, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	f002 fc7d 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, (sizeArray + 3), 1000);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0110 	add.w	r1, r3, #16
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80005ba:	893b      	ldrh	r3, [r7, #8]
 80005bc:	3303      	adds	r3, #3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80005c4:	9400      	str	r4, [sp, #0]
 80005c6:	f003 fa79 	bl	8003abc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6858      	ldr	r0, [r3, #4]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f002 fc65 	bl	8002ea4 <HAL_GPIO_WritePin>
	for(int i = 0; i < sizeArray; ++i)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	893b      	ldrh	r3, [r7, #8]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	da0d      	bge.n	8000602 <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x96>
	{
		destinationArray[i] = misoBytes_w[i+3];
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	1cda      	adds	r2, r3, #3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	68f9      	ldr	r1, [r7, #12]
 80005f2:	440a      	add	r2, r1
 80005f4:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 80005f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeArray; ++i)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e7ed      	b.n	80005de <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x72>
	}
	return;
 8000602:	bf00      	nop
}
 8000604:	371c      	adds	r7, #28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd90      	pop	{r4, r7, pc}

0800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>:


// записываем массив байт в буфер TX
void W5500::writeArrayToTXbuffer(uint8_t socket, uint8_t* array, uint16_t sizeArray, word_y beginAddress)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	461a      	mov	r2, r3
 8000616:	460b      	mov	r3, r1
 8000618:	72fb      	strb	r3, [r7, #11]
 800061a:	4613      	mov	r3, r2
 800061c:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 800061e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 8000626:	f897 2020 	ldrb.w	r2, [r7, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = ((socket + 8) | 0b00000100);
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	3308      	adds	r3, #8
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b25b      	sxtb	r3, r3
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	893b      	ldrh	r3, [r7, #8]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	429a      	cmp	r2, r3
 800064c:	da0d      	bge.n	800066a <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x60>
	{
		mosiBytes_w[i+3] = array[i];
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	441a      	add	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3303      	adds	r3, #3
 8000658:	7811      	ldrb	r1, [r2, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e7ed      	b.n	8000646 <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x3c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6858      	ldr	r0, [r3, #4]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	f002 fc15 	bl	8002ea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f103 0110 	add.w	r1, r3, #16
 8000684:	893b      	ldrh	r3, [r7, #8]
 8000686:	3303      	adds	r3, #3
 8000688:	b29a      	uxth	r2, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	f003 f8d9 	bl	8003844 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6858      	ldr	r0, [r3, #4]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	899b      	ldrh	r3, [r3, #12]
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	f002 fc01 	bl	8002ea4 <HAL_GPIO_WritePin>
	return;
 80006a2:	bf00      	nop
}
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_ZN5W550013receivePacketEhPhPt>:

//---------------------------------------------------------------------------

// получаем данные по протоколу UDP
void W5500::receivePacket(uint8_t socket, uint8_t* dataForReceive, uint16_t* sizeArray)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b08a      	sub	sp, #40	; 0x28
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	460b      	mov	r3, r1
 80006b8:	72fb      	strb	r3, [r7, #11]
	// временные переменные для хранения значений регистров RX_RSR и RX_RD
	word_y valueRSR, valueRSRretry, valueRD;

	// читаем регистр RX_RSR (разница между значениями RX_WR и RX_RD)
	valueRSR.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2226      	movs	r2, #38	; 0x26
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff fe52 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006c6:	4603      	mov	r3, r0
 80006c8:	83bb      	strh	r3, [r7, #28]
	// считываем еще раз
	valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	2226      	movs	r2, #38	; 0x26
 80006ce:	4619      	mov	r1, r3
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff fe4a 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006d6:	4603      	mov	r3, r0
 80006d8:	833b      	strh	r3, [r7, #24]
	// сравниваем, тем самым исключая изменения в нём в момент считывания
	while (valueRSR.word != valueRSRretry.word)
 80006da:	8bba      	ldrh	r2, [r7, #28]
 80006dc:	8b3b      	ldrh	r3, [r7, #24]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d00a      	beq.n	80006f8 <_ZN5W550013receivePacketEhPhPt+0x4e>
	{
		valueRSR.word = valueRSRretry.word;
 80006e2:	8b3b      	ldrh	r3, [r7, #24]
 80006e4:	83bb      	strh	r3, [r7, #28]
		valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	2226      	movs	r2, #38	; 0x26
 80006ea:	4619      	mov	r1, r3
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff fe3c 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	833b      	strh	r3, [r7, #24]
	while (valueRSR.word != valueRSRretry.word)
 80006f6:	e7f0      	b.n	80006da <_ZN5W550013receivePacketEhPhPt+0x30>
	}

	// читаем регистр RX_RD (указатель на начало полученных данных)
	valueRD.word = readWordFromSRB(socket, W5500_Sn_RX_RD);
 80006f8:	7afb      	ldrb	r3, [r7, #11]
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	4619      	mov	r1, r3
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff fe33 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000704:	4603      	mov	r3, r0
 8000706:	82bb      	strh	r3, [r7, #20]

	// читаем буфер RX
	readArrayFromRXbuffer(socket, dataForReceive, valueRSR.word, valueRD);
 8000708:	8bba      	ldrh	r2, [r7, #28]
 800070a:	7af9      	ldrb	r1, [r7, #11]
 800070c:	8abb      	ldrh	r3, [r7, #20]
 800070e:	f8ad 3000 	strh.w	r3, [sp]
 8000712:	4613      	mov	r3, r2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff28 	bl	800056c <_ZN5W550021readArrayFromRXbufferEhPht6word_y>

	// увеличиваем значение указателя на полученные данные на число считанных байт
	valueRD.word += valueRSR.word;
 800071c:	8aba      	ldrh	r2, [r7, #20]
 800071e:	8bbb      	ldrh	r3, [r7, #28]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	82bb      	strh	r3, [r7, #20]
	writeWordToSRB(socket, valueRD.word, W5500_Sn_RX_RD);
 8000726:	8aba      	ldrh	r2, [r7, #20]
 8000728:	7af9      	ldrb	r1, [r7, #11]
 800072a:	2328      	movs	r3, #40	; 0x28
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff fe92 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// завершаем процесс чтения из буфера RX
	writeByteToSRB(socket, W5500_Sn_CR_RECV, W5500_Sn_CR);
 8000732:	7af9      	ldrb	r1, [r7, #11]
 8000734:	2301      	movs	r3, #1
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff fe52 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

	// записываем значение полученных байт
	*sizeArray = valueRSR.word;
 800073e:	8bba      	ldrh	r2, [r7, #28]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	801a      	strh	r2, [r3, #0]
	return;
 8000744:	bf00      	nop
}
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <_ZN5W550010sendPacketEhPht>:

// отправляем данные по протоколу UDP
void W5500::sendPacket(uint8_t socket, uint8_t* dataForSend, uint16_t sizeArray)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af02      	add	r7, sp, #8
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	461a      	mov	r2, r3
 8000758:	460b      	mov	r3, r1
 800075a:	72fb      	strb	r3, [r7, #11]
 800075c:	4613      	mov	r3, r2
 800075e:	813b      	strh	r3, [r7, #8]
	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	2220      	movs	r2, #32
 8000764:	4619      	mov	r1, r3
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f7ff fdff 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 800076c:	4603      	mov	r3, r0
 800076e:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000770:	8abb      	ldrh	r3, [r7, #20]
 8000772:	893a      	ldrh	r2, [r7, #8]
 8000774:	429a      	cmp	r2, r3
 8000776:	d823      	bhi.n	80007c0 <_ZN5W550010sendPacketEhPht+0x74>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 8000778:	7afb      	ldrb	r3, [r7, #11]
 800077a:	2224      	movs	r2, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff fdf3 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000784:	4603      	mov	r3, r0
 8000786:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, dataForSend, sizeArray, valueWR);
 8000788:	893a      	ldrh	r2, [r7, #8]
 800078a:	7af9      	ldrb	r1, [r7, #11]
 800078c:	8a3b      	ldrh	r3, [r7, #16]
 800078e:	f8ad 3000 	strh.w	r3, [sp]
 8000792:	4613      	mov	r3, r2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff ff37 	bl	800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 800079c:	8a3a      	ldrh	r2, [r7, #16]
 800079e:	893b      	ldrh	r3, [r7, #8]
 80007a0:	4413      	add	r3, r2
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 80007a6:	8a3a      	ldrh	r2, [r7, #16]
 80007a8:	7af9      	ldrb	r1, [r7, #11]
 80007aa:	2324      	movs	r3, #36	; 0x24
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff fe52 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 80007b2:	7af9      	ldrb	r1, [r7, #11]
 80007b4:	2301      	movs	r3, #1
 80007b6:	2220      	movs	r2, #32
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff fe12 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
	return;
 80007be:	e000      	b.n	80007c2 <_ZN5W550010sendPacketEhPht+0x76>
	if((uint16_t)sizeArray > valueFSR.word) return;
 80007c0:	bf00      	nop
}
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZN5W550010sendStringEhPc>:

// отправляем строку
void W5500::sendString(uint8_t socket, char* stringForSend)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	460b      	mov	r3, r1
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	72fb      	strb	r3, [r7, #11]
	// вычисляем размер передаваемой строки
	uint16_t sizeArray = strlen(stringForSend);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fcb8 	bl	800014c <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	82fb      	strh	r3, [r7, #22]

	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	2220      	movs	r2, #32
 80007e4:	4619      	mov	r1, r3
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff fdbf 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80007ec:	4603      	mov	r3, r0
 80007ee:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 80007f0:	8abb      	ldrh	r3, [r7, #20]
 80007f2:	8afa      	ldrh	r2, [r7, #22]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d823      	bhi.n	8000840 <_ZN5W550010sendStringEhPc+0x78>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	2224      	movs	r2, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff fdb3 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000804:	4603      	mov	r3, r0
 8000806:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, (uint8_t*)stringForSend, sizeArray, valueWR);
 8000808:	8afa      	ldrh	r2, [r7, #22]
 800080a:	7af9      	ldrb	r1, [r7, #11]
 800080c:	8a3b      	ldrh	r3, [r7, #16]
 800080e:	f8ad 3000 	strh.w	r3, [sp]
 8000812:	4613      	mov	r3, r2
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff fef7 	bl	800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 800081c:	8a3a      	ldrh	r2, [r7, #16]
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	4413      	add	r3, r2
 8000822:	b29b      	uxth	r3, r3
 8000824:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 8000826:	8a3a      	ldrh	r2, [r7, #16]
 8000828:	7af9      	ldrb	r1, [r7, #11]
 800082a:	2324      	movs	r3, #36	; 0x24
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff fe12 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 8000832:	7af9      	ldrb	r1, [r7, #11]
 8000834:	2301      	movs	r3, #1
 8000836:	2220      	movs	r2, #32
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fdd2 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
	return;
 800083e:	e000      	b.n	8000842 <_ZN5W550010sendStringEhPc+0x7a>
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000840:	bf00      	nop
}
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
}
 8000850:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <__NVIC_SystemReset+0x24>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800085a:	4904      	ldr	r1, [pc, #16]	; (800086c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_SystemReset+0x28>)
 800085e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000860:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000862:	f3bf 8f4f 	dsb	sy
}
 8000866:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <__NVIC_SystemReset+0x20>
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	05fa0004 	.word	0x05fa0004

08000874 <_Z8hex2charRc>:
char textError[] {"ERROR"};
char textApply[] {"Your setting will be saved and device will be reboot"};
char textNotApply[] {"Your setting is NOT saved"};

void hex2char(char& digit)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (digit <= 9) digit += 48;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b09      	cmp	r3, #9
 8000882:	d806      	bhi.n	8000892 <_Z8hex2charRc+0x1e>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	3330      	adds	r3, #48	; 0x30
 800088a:	b2da      	uxtb	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	701a      	strb	r2, [r3, #0]
	else digit += 55;
	return;
 8000890:	e006      	b.n	80008a0 <_Z8hex2charRc+0x2c>
	else digit += 55;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3337      	adds	r3, #55	; 0x37
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	701a      	strb	r2, [r3, #0]
	return;
 800089e:	bf00      	nop
}
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <_Z10hex2letterRc>:

void hex2letter(char& digit)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	  if (digit <= 9) digit += 48;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b09      	cmp	r3, #9
 80008b6:	d806      	bhi.n	80008c6 <_Z10hex2letterRc+0x1e>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3330      	adds	r3, #48	; 0x30
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	701a      	strb	r2, [r3, #0]
	  else digit += 55;
	  return;
 80008c4:	e006      	b.n	80008d4 <_Z10hex2letterRc+0x2c>
	  else digit += 55;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3337      	adds	r3, #55	; 0x37
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	701a      	strb	r2, [r3, #0]
	  return;
 80008d2:	bf00      	nop
}
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <_Z14adr_int2stringPKhPc>:

// четыре байта в строку
void adr_int2string(const uint8_t* adr, char* text)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
	int index{ 0 };
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
	char num, num2;
	for (int i = 0; i < 4; ++i)
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	dc64      	bgt.n	80009be <_Z14adr_int2stringPKhPc+0xe2>
	{
		num = adr[i] / 100;
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4a32      	ldr	r2, [pc, #200]	; (80009c8 <_Z14adr_int2stringPKhPc+0xec>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	73fb      	strb	r3, [r7, #15]
		if (num)
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d009      	beq.n	8000920 <_Z14adr_int2stringPKhPc+0x44>
		{
			text[index] = num + 48;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	3230      	adds	r2, #48	; 0x30
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	701a      	strb	r2, [r3, #0]
			++index;
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
		}
		num2 = (adr[i] / 10) % 10;
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4a28      	ldr	r2, [pc, #160]	; (80009cc <_Z14adr_int2stringPKhPc+0xf0>)
 800092a:	fba2 2303 	umull	r2, r3, r2, r3
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <_Z14adr_int2stringPKhPc+0xf0>)
 8000934:	fba3 1302 	umull	r1, r3, r3, r2
 8000938:	08d9      	lsrs	r1, r3, #3
 800093a:	460b      	mov	r3, r1
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	73bb      	strb	r3, [r7, #14]
		if (num2 || num)
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_Z14adr_int2stringPKhPc+0x76>
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d009      	beq.n	8000966 <_Z14adr_int2stringPKhPc+0x8a>
		{
			text[index] = num2 + 48;
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	4413      	add	r3, r2
 8000958:	7bba      	ldrb	r2, [r7, #14]
 800095a:	3230      	adds	r2, #48	; 0x30
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	701a      	strb	r2, [r3, #0]
			++index;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
		}
		text[index] = adr[i] % 10 + 48;
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <_Z14adr_int2stringPKhPc+0xf0>)
 8000970:	fba3 1302 	umull	r1, r3, r3, r2
 8000974:	08d9      	lsrs	r1, r3, #3
 8000976:	460b      	mov	r3, r1
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	b2da      	uxtb	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	6839      	ldr	r1, [r7, #0]
 8000986:	440b      	add	r3, r1
 8000988:	3230      	adds	r2, #48	; 0x30
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	701a      	strb	r2, [r3, #0]
		++index;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
		if (i < 3)
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	2b02      	cmp	r3, #2
 8000998:	dc08      	bgt.n	80009ac <_Z14adr_int2stringPKhPc+0xd0>
		{
			text[index] = '.';
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	222e      	movs	r2, #46	; 0x2e
 80009a2:	701a      	strb	r2, [r3, #0]
			++index;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e004      	b.n	80009b6 <_Z14adr_int2stringPKhPc+0xda>
		}
		else
		{
			text[index] = '\0';
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; ++i)
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	3301      	adds	r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	e797      	b.n	80008ee <_Z14adr_int2stringPKhPc+0x12>
		}
	}
	return;
 80009be:	bf00      	nop
}
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	51eb851f 	.word	0x51eb851f
 80009cc:	cccccccd 	.word	0xcccccccd

080009d0 <_Z14mac_int2stringPKhPc>:

// шесть октетов MAC-адреса в строку
void mac_int2string(const uint8_t* adr, char* text)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	int index{ 0 };
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 6; ++i)
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	2b05      	cmp	r3, #5
 80009e6:	dc3b      	bgt.n	8000a60 <_Z14mac_int2stringPKhPc+0x90>
	{
		text[index] = adr[i] / 16;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	440b      	add	r3, r1
 80009f6:	0912      	lsrs	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	701a      	strb	r2, [r3, #0]
		hex2char(text[index]);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff36 	bl	8000874 <_Z8hex2charRc>
		++index;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
		text[index] = adr[i] % 16;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6839      	ldr	r1, [r7, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f002 020f 	and.w	r2, r2, #15
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	701a      	strb	r2, [r3, #0]
		hex2char(text[index]);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff22 	bl	8000874 <_Z8hex2charRc>
		++index;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
		if (i < 5)
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	dc08      	bgt.n	8000a4e <_Z14mac_int2stringPKhPc+0x7e>
		{
			text[index] = ':';
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	4413      	add	r3, r2
 8000a42:	223a      	movs	r2, #58	; 0x3a
 8000a44:	701a      	strb	r2, [r3, #0]
			++index;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e004      	b.n	8000a58 <_Z14mac_int2stringPKhPc+0x88>
		}
		else
		{
			text[index] = '\0';
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	e7c0      	b.n	80009e2 <_Z14mac_int2stringPKhPc+0x12>
		}
	}
	return;
 8000a60:	bf00      	nop
}
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <_Z15byte_int2stringRKhPc>:

// байт адреса в строку
void byte_int2string(const uint8_t& byte, char* text)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	int index{ 0 };
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
	char num, num2;

	num = byte / 100;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4a29      	ldr	r2, [pc, #164]	; (8000b20 <_Z15byte_int2stringRKhPc+0xb8>)
 8000a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a80:	095b      	lsrs	r3, r3, #5
 8000a82:	72fb      	strb	r3, [r7, #11]
	if (num)
 8000a84:	7afb      	ldrb	r3, [r7, #11]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d009      	beq.n	8000a9e <_Z15byte_int2stringRKhPc+0x36>
	{
		text[index] = num + 48;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	7afa      	ldrb	r2, [r7, #11]
 8000a92:	3230      	adds	r2, #48	; 0x30
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	701a      	strb	r2, [r3, #0]
		++index;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
	}
	num2 = (byte / 10) % 10;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <_Z15byte_int2stringRKhPc+0xbc>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <_Z15byte_int2stringRKhPc+0xbc>)
 8000aae:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab2:	08d9      	lsrs	r1, r3, #3
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	72bb      	strb	r3, [r7, #10]
	if (num2 || num)
 8000ac0:	7abb      	ldrb	r3, [r7, #10]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d102      	bne.n	8000acc <_Z15byte_int2stringRKhPc+0x64>
 8000ac6:	7afb      	ldrb	r3, [r7, #11]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <_Z15byte_int2stringRKhPc+0x78>
	{
		text[index] = num2 + 48;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	7aba      	ldrb	r2, [r7, #10]
 8000ad4:	3230      	adds	r2, #48	; 0x30
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	701a      	strb	r2, [r3, #0]
		++index;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
	}
	text[index] = byte % 10 + 48;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <_Z15byte_int2stringRKhPc+0xbc>)
 8000ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aea:	08d9      	lsrs	r1, r3, #3
 8000aec:	460b      	mov	r3, r1
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	440b      	add	r3, r1
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	440b      	add	r3, r1
 8000afe:	3230      	adds	r2, #48	; 0x30
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	701a      	strb	r2, [r3, #0]
	++index;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]

	text[index] = '\0';
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]

	return;
 8000b14:	bf00      	nop
}
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	51eb851f 	.word	0x51eb851f
 8000b24:	cccccccd 	.word	0xcccccccd

08000b28 <_Z15macOctet2stringRKhPc>:

// октет MAC-адреса в строку
void macOctet2string(const uint8_t& byte, char* text)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	text[0] = byte / 16;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	701a      	strb	r2, [r3, #0]
	hex2letter(text[0]);
 8000b3e:	6838      	ldr	r0, [r7, #0]
 8000b40:	f7ff feb2 	bl	80008a8 <_Z10hex2letterRc>
	text[1] = byte % 16;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f002 020f 	and.w	r2, r2, #15
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	701a      	strb	r2, [r3, #0]
	hex2letter(text[1]);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fea5 	bl	80008a8 <_Z10hex2letterRc>
	text[2] = '\0';
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	3302      	adds	r3, #2
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_Z19concatenate3stringsPcPKcS1_>:

// склеивание трех строк
void concatenate3strings(char* moderated, const char* second, const char* third)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b087      	sub	sp, #28
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
	int index {0};
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
	int index2 {0};
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
	while (moderated[index] != '\0')
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <_Z19concatenate3stringsPcPKcS1_+0x28>
	{
		++index;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
	while (moderated[index] != '\0')
 8000b94:	e7f5      	b.n	8000b82 <_Z19concatenate3stringsPcPKcS1_+0x14>
	}
	while (second[index2] != '\0')
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00e      	beq.n	8000bc0 <_Z19concatenate3stringsPcPKcS1_+0x52>
	{
		moderated[index] = second[index2];
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	441a      	add	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	68f9      	ldr	r1, [r7, #12]
 8000bac:	440b      	add	r3, r1
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	701a      	strb	r2, [r3, #0]
		++index;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
		++index2;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
	while (second[index2] != '\0')
 8000bbe:	e7ea      	b.n	8000b96 <_Z19concatenate3stringsPcPKcS1_+0x28>
	}
	index2 = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
	while (third[index2] != '\0')
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00e      	beq.n	8000bee <_Z19concatenate3stringsPcPKcS1_+0x80>
	{
		moderated[index] = third[index2];
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	441a      	add	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	68f9      	ldr	r1, [r7, #12]
 8000bda:	440b      	add	r3, r1
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	701a      	strb	r2, [r3, #0]
		++index;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
		++index2;
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	3301      	adds	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
	while (third[index2] != '\0')
 8000bec:	e7ea      	b.n	8000bc4 <_Z19concatenate3stringsPcPKcS1_+0x56>
	}
	moderated[index] = '\0';
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
	return;
 8000bf8:	bf00      	nop
}
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <_Z19concatenate7stringsPcPS_>:

void concatenate7strings(char* newString, char** array)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b087      	sub	sp, #28
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
	int index {0};
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 7; ++i)
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	dc22      	bgt.n	8000c60 <_Z19concatenate7stringsPcPS_+0x5e>
	{
		int index2 {0};
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
		while (array[i][index2] != '\0')
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d012      	beq.n	8000c58 <_Z19concatenate7stringsPcPS_+0x56>
		{
			newString[index] = array[i][index2];
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	441a      	add	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	440b      	add	r3, r1
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	701a      	strb	r2, [r3, #0]
			++index;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
			++index2;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
		while (array[i][index2] != '\0')
 8000c56:	e7e2      	b.n	8000c1e <_Z19concatenate7stringsPcPS_+0x1c>
	for (int i = 0; i < 7; ++i)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	e7d9      	b.n	8000c14 <_Z19concatenate7stringsPcPS_+0x12>
		}
	}
	newString[index] = '\0';
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
	return;
 8000c6a:	bf00      	nop
}
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <_Z8fillTextv>:
	}
	else return 0;
}

void fillText()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	byte_int2string(crb.sipr0, textValue);
 8000c78:	493f      	ldr	r1, [pc, #252]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c7a:	4840      	ldr	r0, [pc, #256]	; (8000d7c <_Z8fillTextv+0x108>)
 8000c7c:	f7ff fef4 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text0, textValue, textEnd);
 8000c80:	4a3f      	ldr	r2, [pc, #252]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000c82:	493d      	ldr	r1, [pc, #244]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c84:	483f      	ldr	r0, [pc, #252]	; (8000d84 <_Z8fillTextv+0x110>)
 8000c86:	f7ff ff72 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.sipr1, textValue);
 8000c8a:	493b      	ldr	r1, [pc, #236]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c8c:	483e      	ldr	r0, [pc, #248]	; (8000d88 <_Z8fillTextv+0x114>)
 8000c8e:	f7ff feeb 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text1, textValue, textEnd);
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000c94:	4938      	ldr	r1, [pc, #224]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c96:	483d      	ldr	r0, [pc, #244]	; (8000d8c <_Z8fillTextv+0x118>)
 8000c98:	f7ff ff69 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.sipr2, textValue);
 8000c9c:	4936      	ldr	r1, [pc, #216]	; (8000d78 <_Z8fillTextv+0x104>)
 8000c9e:	483c      	ldr	r0, [pc, #240]	; (8000d90 <_Z8fillTextv+0x11c>)
 8000ca0:	f7ff fee2 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text2, textValue, textEnd);
 8000ca4:	4a36      	ldr	r2, [pc, #216]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000ca6:	4934      	ldr	r1, [pc, #208]	; (8000d78 <_Z8fillTextv+0x104>)
 8000ca8:	483a      	ldr	r0, [pc, #232]	; (8000d94 <_Z8fillTextv+0x120>)
 8000caa:	f7ff ff60 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.sipr3, textValue);
 8000cae:	4932      	ldr	r1, [pc, #200]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cb0:	4839      	ldr	r0, [pc, #228]	; (8000d98 <_Z8fillTextv+0x124>)
 8000cb2:	f7ff fed9 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text3, textValue, textEnd);
 8000cb6:	4a32      	ldr	r2, [pc, #200]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000cb8:	492f      	ldr	r1, [pc, #188]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cba:	4838      	ldr	r0, [pc, #224]	; (8000d9c <_Z8fillTextv+0x128>)
 8000cbc:	f7ff ff57 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>

	byte_int2string(crb.subr0, textValue);
 8000cc0:	492d      	ldr	r1, [pc, #180]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cc2:	4837      	ldr	r0, [pc, #220]	; (8000da0 <_Z8fillTextv+0x12c>)
 8000cc4:	f7ff fed0 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text4, textValue, textEnd);
 8000cc8:	4a2d      	ldr	r2, [pc, #180]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000cca:	492b      	ldr	r1, [pc, #172]	; (8000d78 <_Z8fillTextv+0x104>)
 8000ccc:	4835      	ldr	r0, [pc, #212]	; (8000da4 <_Z8fillTextv+0x130>)
 8000cce:	f7ff ff4e 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.subr1, textValue);
 8000cd2:	4929      	ldr	r1, [pc, #164]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cd4:	4834      	ldr	r0, [pc, #208]	; (8000da8 <_Z8fillTextv+0x134>)
 8000cd6:	f7ff fec7 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text5, textValue, textEnd);
 8000cda:	4a29      	ldr	r2, [pc, #164]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000cdc:	4926      	ldr	r1, [pc, #152]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cde:	4833      	ldr	r0, [pc, #204]	; (8000dac <_Z8fillTextv+0x138>)
 8000ce0:	f7ff ff45 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.subr2, textValue);
 8000ce4:	4924      	ldr	r1, [pc, #144]	; (8000d78 <_Z8fillTextv+0x104>)
 8000ce6:	4832      	ldr	r0, [pc, #200]	; (8000db0 <_Z8fillTextv+0x13c>)
 8000ce8:	f7ff febe 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text6, textValue, textEnd);
 8000cec:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000cee:	4922      	ldr	r1, [pc, #136]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cf0:	4830      	ldr	r0, [pc, #192]	; (8000db4 <_Z8fillTextv+0x140>)
 8000cf2:	f7ff ff3c 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	byte_int2string(crb.subr3, textValue);
 8000cf6:	4920      	ldr	r1, [pc, #128]	; (8000d78 <_Z8fillTextv+0x104>)
 8000cf8:	482f      	ldr	r0, [pc, #188]	; (8000db8 <_Z8fillTextv+0x144>)
 8000cfa:	f7ff feb5 	bl	8000a68 <_Z15byte_int2stringRKhPc>
	concatenate3strings(text7, textValue, textEnd);
 8000cfe:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d00:	491d      	ldr	r1, [pc, #116]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d02:	482e      	ldr	r0, [pc, #184]	; (8000dbc <_Z8fillTextv+0x148>)
 8000d04:	f7ff ff33 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>

	macOctet2string(crb.shar0, textValue);
 8000d08:	491b      	ldr	r1, [pc, #108]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d0a:	482d      	ldr	r0, [pc, #180]	; (8000dc0 <_Z8fillTextv+0x14c>)
 8000d0c:	f7ff ff0c 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text8, textValue, textEnd);
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d12:	4919      	ldr	r1, [pc, #100]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d14:	482b      	ldr	r0, [pc, #172]	; (8000dc4 <_Z8fillTextv+0x150>)
 8000d16:	f7ff ff2a 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar1, textValue);
 8000d1a:	4917      	ldr	r1, [pc, #92]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d1c:	482a      	ldr	r0, [pc, #168]	; (8000dc8 <_Z8fillTextv+0x154>)
 8000d1e:	f7ff ff03 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text9, textValue, textEnd);
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d24:	4914      	ldr	r1, [pc, #80]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d26:	4829      	ldr	r0, [pc, #164]	; (8000dcc <_Z8fillTextv+0x158>)
 8000d28:	f7ff ff21 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar2, textValue);
 8000d2c:	4912      	ldr	r1, [pc, #72]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d2e:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <_Z8fillTextv+0x15c>)
 8000d30:	f7ff fefa 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text10, textValue, textEnd);
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d36:	4910      	ldr	r1, [pc, #64]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d38:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <_Z8fillTextv+0x160>)
 8000d3a:	f7ff ff18 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar3, textValue);
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d40:	4825      	ldr	r0, [pc, #148]	; (8000dd8 <_Z8fillTextv+0x164>)
 8000d42:	f7ff fef1 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text11, textValue, textEnd);
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d48:	490b      	ldr	r1, [pc, #44]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d4a:	4824      	ldr	r0, [pc, #144]	; (8000ddc <_Z8fillTextv+0x168>)
 8000d4c:	f7ff ff0f 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar4, textValue);
 8000d50:	4909      	ldr	r1, [pc, #36]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d52:	4823      	ldr	r0, [pc, #140]	; (8000de0 <_Z8fillTextv+0x16c>)
 8000d54:	f7ff fee8 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text12, textValue, textEnd);
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d5a:	4907      	ldr	r1, [pc, #28]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <_Z8fillTextv+0x170>)
 8000d5e:	f7ff ff06 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>
	macOctet2string(crb.shar5, textValue);
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d64:	4820      	ldr	r0, [pc, #128]	; (8000de8 <_Z8fillTextv+0x174>)
 8000d66:	f7ff fedf 	bl	8000b28 <_Z15macOctet2stringRKhPc>
	concatenate3strings(text13, textValue, textEnd);
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_Z8fillTextv+0x10c>)
 8000d6c:	4902      	ldr	r1, [pc, #8]	; (8000d78 <_Z8fillTextv+0x104>)
 8000d6e:	481f      	ldr	r0, [pc, #124]	; (8000dec <_Z8fillTextv+0x178>)
 8000d70:	f7ff fefd 	bl	8000b6e <_Z19concatenate3stringsPcPKcS1_>

	return;
 8000d74:	bf00      	nop
}
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200004fc 	.word	0x200004fc
 8000d7c:	2000037f 	.word	0x2000037f
 8000d80:	20000040 	.word	0x20000040
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000380 	.word	0x20000380
 8000d8c:	20000044 	.word	0x20000044
 8000d90:	20000381 	.word	0x20000381
 8000d94:	20000068 	.word	0x20000068
 8000d98:	20000382 	.word	0x20000382
 8000d9c:	2000008c 	.word	0x2000008c
 8000da0:	20000375 	.word	0x20000375
 8000da4:	200000b0 	.word	0x200000b0
 8000da8:	20000376 	.word	0x20000376
 8000dac:	200000dc 	.word	0x200000dc
 8000db0:	20000377 	.word	0x20000377
 8000db4:	20000108 	.word	0x20000108
 8000db8:	20000378 	.word	0x20000378
 8000dbc:	20000134 	.word	0x20000134
 8000dc0:	20000379 	.word	0x20000379
 8000dc4:	20000160 	.word	0x20000160
 8000dc8:	2000037a 	.word	0x2000037a
 8000dcc:	20000188 	.word	0x20000188
 8000dd0:	2000037b 	.word	0x2000037b
 8000dd4:	200001b0 	.word	0x200001b0
 8000dd8:	2000037c 	.word	0x2000037c
 8000ddc:	200001d8 	.word	0x200001d8
 8000de0:	2000037d 	.word	0x2000037d
 8000de4:	20000200 	.word	0x20000200
 8000de8:	2000037e 	.word	0x2000037e
 8000dec:	20000228 	.word	0x20000228

08000df0 <_Z13fillFinalTextv>:

void fillFinalText()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	adr_int2string(receivedIPAddress, text15);
 8000df4:	4908      	ldr	r1, [pc, #32]	; (8000e18 <_Z13fillFinalTextv+0x28>)
 8000df6:	4809      	ldr	r0, [pc, #36]	; (8000e1c <_Z13fillFinalTextv+0x2c>)
 8000df8:	f7ff fd70 	bl	80008dc <_Z14adr_int2stringPKhPc>
	adr_int2string(receivedSubnetMask, text17);
 8000dfc:	4908      	ldr	r1, [pc, #32]	; (8000e20 <_Z13fillFinalTextv+0x30>)
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <_Z13fillFinalTextv+0x34>)
 8000e00:	f7ff fd6c 	bl	80008dc <_Z14adr_int2stringPKhPc>
	mac_int2string(receivedMACAddress, text19);
 8000e04:	4908      	ldr	r1, [pc, #32]	; (8000e28 <_Z13fillFinalTextv+0x38>)
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <_Z13fillFinalTextv+0x3c>)
 8000e08:	f7ff fde2 	bl	80009d0 <_Z14mac_int2stringPKhPc>
	concatenate7strings(textFinal, arrFinalText);
 8000e0c:	4908      	ldr	r1, [pc, #32]	; (8000e30 <_Z13fillFinalTextv+0x40>)
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <_Z13fillFinalTextv+0x44>)
 8000e10:	f7ff fef7 	bl	8000c02 <_Z19concatenate7stringsPcPS_>
	return;
 8000e14:	bf00      	nop
}
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000500 	.word	0x20000500
 8000e1c:	200023a0 	.word	0x200023a0
 8000e20:	20000510 	.word	0x20000510
 8000e24:	200023a4 	.word	0x200023a4
 8000e28:	20000520 	.word	0x20000520
 8000e2c:	200023a8 	.word	0x200023a8
 8000e30:	20000300 	.word	0x20000300
 8000e34:	20000534 	.word	0x20000534

08000e38 <_Z12saveSettingsv>:

void saveSettings()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	crb.sipr0 = receivedIPAddress[0];
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <_Z12saveSettingsv+0x7c>)
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e42:	73da      	strb	r2, [r3, #15]
	crb.sipr1 = receivedIPAddress[1];
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <_Z12saveSettingsv+0x7c>)
 8000e46:	785a      	ldrb	r2, [r3, #1]
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e4a:	741a      	strb	r2, [r3, #16]
	crb.sipr2 = receivedIPAddress[2];
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <_Z12saveSettingsv+0x7c>)
 8000e4e:	789a      	ldrb	r2, [r3, #2]
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e52:	745a      	strb	r2, [r3, #17]
	crb.sipr3 = receivedIPAddress[3];
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <_Z12saveSettingsv+0x7c>)
 8000e56:	78da      	ldrb	r2, [r3, #3]
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e5a:	749a      	strb	r2, [r3, #18]
	crb.subr0 = receivedSubnetMask[0];
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <_Z12saveSettingsv+0x84>)
 8000e5e:	781a      	ldrb	r2, [r3, #0]
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e62:	715a      	strb	r2, [r3, #5]
	crb.subr1 = receivedSubnetMask[1];
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_Z12saveSettingsv+0x84>)
 8000e66:	785a      	ldrb	r2, [r3, #1]
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e6a:	719a      	strb	r2, [r3, #6]
	crb.subr2 = receivedSubnetMask[2];
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_Z12saveSettingsv+0x84>)
 8000e6e:	789a      	ldrb	r2, [r3, #2]
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e72:	71da      	strb	r2, [r3, #7]
	crb.subr3 = receivedSubnetMask[3];
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_Z12saveSettingsv+0x84>)
 8000e76:	78da      	ldrb	r2, [r3, #3]
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e7a:	721a      	strb	r2, [r3, #8]
	crb.shar0 = receivedMACAddress[0];
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e82:	725a      	strb	r2, [r3, #9]
	crb.shar1 = receivedMACAddress[1];
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e86:	785a      	ldrb	r2, [r3, #1]
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e8a:	729a      	strb	r2, [r3, #10]
	crb.shar2 = receivedMACAddress[2];
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e8e:	789a      	ldrb	r2, [r3, #2]
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e92:	72da      	strb	r2, [r3, #11]
	crb.shar3 = receivedMACAddress[3];
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e96:	78da      	ldrb	r2, [r3, #3]
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000e9a:	731a      	strb	r2, [r3, #12]
	crb.shar4 = receivedMACAddress[4];
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000e9e:	791a      	ldrb	r2, [r3, #4]
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000ea2:	735a      	strb	r2, [r3, #13]
	crb.shar5 = receivedMACAddress[5];
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <_Z12saveSettingsv+0x88>)
 8000ea6:	795a      	ldrb	r2, [r3, #5]
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <_Z12saveSettingsv+0x80>)
 8000eaa:	739a      	strb	r2, [r3, #14]

	writeFLASH();
 8000eac:	f000 f80a 	bl	8000ec4 <_Z10writeFLASHv>

	NVIC_SystemReset();
 8000eb0:	f7ff fcca 	bl	8000848 <__NVIC_SystemReset>
 8000eb4:	200023a0 	.word	0x200023a0
 8000eb8:	20000370 	.word	0x20000370
 8000ebc:	200023a4 	.word	0x200023a4
 8000ec0:	200023a8 	.word	0x200023a8

08000ec4 <_Z10writeFLASHv>:
extern struct CommonRegisterBlock crb;
extern struct SocketRegisterBlock srb0, srb1, srb2, srb3, srb4, srb5, srb6, srb7;

// Запись во FLASH
void writeFLASH()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
	// Открываем доступ к FLASH (она закрыта от случайной записи)
	HAL_FLASH_Unlock();
 8000eca:	f001 fcd7 	bl	800287c <HAL_FLASH_Unlock>

	// Объявляем структуру, необходимую для функции стирания страницы
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES; // Стираем постранично
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
	//eraseInit.Banks = FLASH_BANK_1;
	eraseInit.PageAddress = CONFIG_FLASHPAGE; // Адрес страницы для стирания
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <_Z10writeFLASHv+0x90>)
 8000ed4:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = 1; // Число страниц = 1
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]

	// Объявляем переменную для сохранения результата стирания FLASH (функции HAL_FLASHEx_Erase()), д.б. 0xFFFFFFFF (не используем)
	uint32_t statusFLASHerase {0};
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]

	// Очищаем страницу
	HAL_FLASHEx_Erase(&eraseInit, &statusFLASHerase);
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fdb0 	bl	8002a4c <HAL_FLASHEx_Erase>

	// Записываем блок Common Register
	writeBlockFLASH(CONFIG_FLASHPAGE, (uint64_t*) &crb, sizeof(crb)/8);
 8000eec:	2206      	movs	r2, #6
 8000eee:	491a      	ldr	r1, [pc, #104]	; (8000f58 <_Z10writeFLASHv+0x94>)
 8000ef0:	4818      	ldr	r0, [pc, #96]	; (8000f54 <_Z10writeFLASHv+0x90>)
 8000ef2:	f000 f853 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 0 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 64, (uint64_t*) &srb0, sizeof(srb0)/8);
 8000ef6:	2206      	movs	r2, #6
 8000ef8:	4918      	ldr	r1, [pc, #96]	; (8000f5c <_Z10writeFLASHv+0x98>)
 8000efa:	4819      	ldr	r0, [pc, #100]	; (8000f60 <_Z10writeFLASHv+0x9c>)
 8000efc:	f000 f84e 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 1 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 120, (uint64_t*) &srb1, sizeof(srb1)/8);
 8000f00:	2206      	movs	r2, #6
 8000f02:	4918      	ldr	r1, [pc, #96]	; (8000f64 <_Z10writeFLASHv+0xa0>)
 8000f04:	4818      	ldr	r0, [pc, #96]	; (8000f68 <_Z10writeFLASHv+0xa4>)
 8000f06:	f000 f849 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 2 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 176, (uint64_t*) &srb2, sizeof(srb2)/8);
 8000f0a:	2206      	movs	r2, #6
 8000f0c:	4917      	ldr	r1, [pc, #92]	; (8000f6c <_Z10writeFLASHv+0xa8>)
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <_Z10writeFLASHv+0xac>)
 8000f10:	f000 f844 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 3 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 232, (uint64_t*) &srb3, sizeof(srb3)/8);
 8000f14:	2206      	movs	r2, #6
 8000f16:	4917      	ldr	r1, [pc, #92]	; (8000f74 <_Z10writeFLASHv+0xb0>)
 8000f18:	4817      	ldr	r0, [pc, #92]	; (8000f78 <_Z10writeFLASHv+0xb4>)
 8000f1a:	f000 f83f 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 4 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 288, (uint64_t*) &srb4, sizeof(srb4)/8);
 8000f1e:	2206      	movs	r2, #6
 8000f20:	4916      	ldr	r1, [pc, #88]	; (8000f7c <_Z10writeFLASHv+0xb8>)
 8000f22:	4817      	ldr	r0, [pc, #92]	; (8000f80 <_Z10writeFLASHv+0xbc>)
 8000f24:	f000 f83a 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 5 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 344, (uint64_t*) &srb5, sizeof(srb5)/8);
 8000f28:	2206      	movs	r2, #6
 8000f2a:	4916      	ldr	r1, [pc, #88]	; (8000f84 <_Z10writeFLASHv+0xc0>)
 8000f2c:	4816      	ldr	r0, [pc, #88]	; (8000f88 <_Z10writeFLASHv+0xc4>)
 8000f2e:	f000 f835 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 6 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 400, (uint64_t*) &srb6, sizeof(srb6)/8);
 8000f32:	2206      	movs	r2, #6
 8000f34:	4915      	ldr	r1, [pc, #84]	; (8000f8c <_Z10writeFLASHv+0xc8>)
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <_Z10writeFLASHv+0xcc>)
 8000f38:	f000 f830 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Записываем блок Socket 7 Register
	writeBlockFLASH(CONFIG_FLASHPAGE + 456, (uint64_t*) &srb7, sizeof(srb7)/8);
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	4915      	ldr	r1, [pc, #84]	; (8000f94 <_Z10writeFLASHv+0xd0>)
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <_Z10writeFLASHv+0xd4>)
 8000f42:	f000 f82b 	bl	8000f9c <_Z15writeBlockFLASHmPyj>

	// Закрываем доступ к FLASH, от случайной записи
	HAL_FLASH_Lock();
 8000f46:	f001 fcbf 	bl	80028c8 <HAL_FLASH_Lock>
	return;
 8000f4a:	bf00      	nop
}
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	0801fc00 	.word	0x0801fc00
 8000f58:	20000370 	.word	0x20000370
 8000f5c:	200003a0 	.word	0x200003a0
 8000f60:	0801fc40 	.word	0x0801fc40
 8000f64:	200003d0 	.word	0x200003d0
 8000f68:	0801fc78 	.word	0x0801fc78
 8000f6c:	20000400 	.word	0x20000400
 8000f70:	0801fcb0 	.word	0x0801fcb0
 8000f74:	200007a8 	.word	0x200007a8
 8000f78:	0801fce8 	.word	0x0801fce8
 8000f7c:	200007d8 	.word	0x200007d8
 8000f80:	0801fd20 	.word	0x0801fd20
 8000f84:	20000808 	.word	0x20000808
 8000f88:	0801fd58 	.word	0x0801fd58
 8000f8c:	20000838 	.word	0x20000838
 8000f90:	0801fd90 	.word	0x0801fd90
 8000f94:	20000430 	.word	0x20000430
 8000f98:	0801fdc8 	.word	0x0801fdc8

08000f9c <_Z15writeBlockFLASHmPyj>:

// Запись области во FLASH, по 64бита (doubleword)
void writeBlockFLASH(uint32_t address, uint64_t* pData64, unsigned int size)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	// Объявляем переменную для сохранения результата записи во FLASH (функции HAL_FLASH_Program())
	HAL_StatusTypeDef statusFLASHprogram;

	// Записываем нужную область памяти
	for (unsigned int i = 0; i < size; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d217      	bcs.n	8000fe4 <_Z15writeBlockFLASHmPyj+0x48>
	{
		statusFLASHprogram = HAL_FLASH_Program (FLASH_TYPEPROGRAM_DOUBLEWORD, address + i*8, *(pData64++));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	00da      	lsls	r2, r3, #3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	18d1      	adds	r1, r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f103 0208 	add.w	r2, r3, #8
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f001 fbe7 	bl	800279c <HAL_FLASH_Program>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	74fb      	strb	r3, [r7, #19]
		if (statusFLASHprogram != HAL_OK) break; // Если что-то пошло не так - выходим из цикла
 8000fd2:	7cfb      	ldrb	r3, [r7, #19]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d103      	bne.n	8000fe0 <_Z15writeBlockFLASHmPyj+0x44>
	for (unsigned int i = 0; i < size; i++)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e7e5      	b.n	8000fac <_Z15writeBlockFLASHmPyj+0x10>
		if (statusFLASHprogram != HAL_OK) break; // Если что-то пошло не так - выходим из цикла
 8000fe0:	bf00      	nop
	}
	return;
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
}
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff2:	f001 f98f 	bl	8002314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff6:	f000 fb9d 	bl	8001734 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffa:	f000 fd69 	bl	8001ad0 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000ffe:	f000 fbe9 	bl	80017d4 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8001002:	f000 fd37 	bl	8001a74 <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 8001006:	f000 fcd9 	bl	80019bc <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 800100a:	f000 fc7b 	bl	8001904 <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 800100e:	f000 fc1d 	bl	800184c <_ZL12MX_TIM2_Initv>

  //char temp[4];
  //utoa(crb.sipr0, temp, 4);
  //text0[23] = temp[0];

  fillText();
 8001012:	f7ff fe2f 	bl	8000c74 <_Z8fillTextv>

  // Включаем чип W5500 через �?бро�?
  ethernetA1.reset();
 8001016:	48a3      	ldr	r0, [pc, #652]	; (80012a4 <main+0x2b8>)
 8001018:	f7ff f8d6 	bl	80001c8 <_ZN5W55005resetEv>

  // Запи�?ываем "на�?тройки" в блок реги�?тров CRB
  ethernetA1.writeArrayToCRB(&crb.mr, 47, W5500_MR);
 800101c:	2300      	movs	r3, #0
 800101e:	222f      	movs	r2, #47	; 0x2f
 8001020:	49a1      	ldr	r1, [pc, #644]	; (80012a8 <main+0x2bc>)
 8001022:	48a0      	ldr	r0, [pc, #640]	; (80012a4 <main+0x2b8>)
 8001024:	f7ff f922 	bl	800026c <_ZN5W550015writeArrayToCRBEPhhh>

  HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f001 f9d5 	bl	80023d8 <HAL_Delay>

  // У�?танавливаем режим UDP дл�? �?окета 0
  //ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP, W5500_Sn_MR);
 800102e:	2300      	movs	r3, #0
 8001030:	2202      	movs	r2, #2
 8001032:	2108      	movs	r1, #8
 8001034:	489b      	ldr	r0, [pc, #620]	; (80012a4 <main+0x2b8>)
 8001036:	f7ff f9d4 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // У�?танавливаем режим TCP дл�? �?окета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 800103a:	2300      	movs	r3, #0
 800103c:	2281      	movs	r2, #129	; 0x81
 800103e:	2128      	movs	r1, #40	; 0x28
 8001040:	4898      	ldr	r0, [pc, #608]	; (80012a4 <main+0x2b8>)
 8001042:	f7ff f9ce 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // У�?танавливаем режим TCP дл�? �?окета 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 8001046:	2300      	movs	r3, #0
 8001048:	2281      	movs	r2, #129	; 0x81
 800104a:	2148      	movs	r1, #72	; 0x48
 800104c:	4895      	ldr	r0, [pc, #596]	; (80012a4 <main+0x2b8>)
 800104e:	f7ff f9c8 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке дл�? �?окета 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 8001052:	232c      	movs	r3, #44	; 0x2c
 8001054:	22ef      	movs	r2, #239	; 0xef
 8001056:	2108      	movs	r1, #8
 8001058:	4892      	ldr	r0, [pc, #584]	; (80012a4 <main+0x2b8>)
 800105a:	f7ff f9c2 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке, �?оединении дл�? �?окета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IMR_SEND_OK_OFF & W5500_Sn_IMR_CON_OFF, W5500_Sn_IMR);
 800105e:	232c      	movs	r3, #44	; 0x2c
 8001060:	22ee      	movs	r2, #238	; 0xee
 8001062:	2128      	movs	r1, #40	; 0x28
 8001064:	488f      	ldr	r0, [pc, #572]	; (80012a4 <main+0x2b8>)
 8001066:	f7ff f9bc 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке дл�? �?окета 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 800106a:	232c      	movs	r3, #44	; 0x2c
 800106c:	22ef      	movs	r2, #239	; 0xef
 800106e:	2148      	movs	r1, #72	; 0x48
 8001070:	488c      	ldr	r0, [pc, #560]	; (80012a4 <main+0x2b8>)
 8001072:	f7ff f9b6 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(10);
 8001076:	200a      	movs	r0, #10
 8001078:	f001 f9ae 	bl	80023d8 <HAL_Delay>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 0
  ethernetA1.writeArrayToSRB(SOCKET0, &srb0.sNport0, 14, W5500_Sn_PORT);
 800107c:	2304      	movs	r3, #4
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	230e      	movs	r3, #14
 8001082:	4a8a      	ldr	r2, [pc, #552]	; (80012ac <main+0x2c0>)
 8001084:	2108      	movs	r1, #8
 8001086:	4887      	ldr	r0, [pc, #540]	; (80012a4 <main+0x2b8>)
 8001088:	f7ff fa24 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 1
  ethernetA1.writeArrayToSRB(SOCKET1, &srb1.sNport0, 14, W5500_Sn_PORT);
 800108c:	2304      	movs	r3, #4
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	230e      	movs	r3, #14
 8001092:	4a87      	ldr	r2, [pc, #540]	; (80012b0 <main+0x2c4>)
 8001094:	2128      	movs	r1, #40	; 0x28
 8001096:	4883      	ldr	r0, [pc, #524]	; (80012a4 <main+0x2b8>)
 8001098:	f7ff fa1c 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 2
  ethernetA1.writeArrayToSRB(SOCKET2, &srb2.sNport0, 14, W5500_Sn_PORT);
 800109c:	2304      	movs	r3, #4
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	230e      	movs	r3, #14
 80010a2:	4a84      	ldr	r2, [pc, #528]	; (80012b4 <main+0x2c8>)
 80010a4:	2148      	movs	r1, #72	; 0x48
 80010a6:	487f      	ldr	r0, [pc, #508]	; (80012a4 <main+0x2b8>)
 80010a8:	f7ff fa14 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  HAL_Delay(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f001 f993 	bl	80023d8 <HAL_Delay>

  // Открываем �?окет 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 80010b2:	2301      	movs	r3, #1
 80010b4:	2201      	movs	r2, #1
 80010b6:	2108      	movs	r1, #8
 80010b8:	487a      	ldr	r0, [pc, #488]	; (80012a4 <main+0x2b8>)
 80010ba:	f7ff f992 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем �?окет 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 80010be:	2301      	movs	r3, #1
 80010c0:	2201      	movs	r2, #1
 80010c2:	2128      	movs	r1, #40	; 0x28
 80010c4:	4877      	ldr	r0, [pc, #476]	; (80012a4 <main+0x2b8>)
 80010c6:	f7ff f98c 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем �?окет 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 80010ca:	2301      	movs	r3, #1
 80010cc:	2201      	movs	r2, #1
 80010ce:	2148      	movs	r1, #72	; 0x48
 80010d0:	4874      	ldr	r0, [pc, #464]	; (80012a4 <main+0x2b8>)
 80010d2:	f7ff f986 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f001 f97e 	bl	80023d8 <HAL_Delay>

  // провер�?ем что �?окет 1 проиницилизирован и запу�?каем режим �?ервера
  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 80010dc:	2203      	movs	r2, #3
 80010de:	2128      	movs	r1, #40	; 0x28
 80010e0:	4870      	ldr	r0, [pc, #448]	; (80012a4 <main+0x2b8>)
 80010e2:	f7ff f90c 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b13      	cmp	r3, #19
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <main+0x116>
  {
	  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 80010f6:	2301      	movs	r3, #1
 80010f8:	2202      	movs	r2, #2
 80010fa:	2128      	movs	r1, #40	; 0x28
 80010fc:	4869      	ldr	r0, [pc, #420]	; (80012a4 <main+0x2b8>)
 80010fe:	f7ff f970 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
  }

  // провер�?ем что �?окет 2 проиницилизирован и запу�?каем режим �?ервера
  if (ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 8001102:	2203      	movs	r2, #3
 8001104:	2148      	movs	r1, #72	; 0x48
 8001106:	4867      	ldr	r0, [pc, #412]	; (80012a4 <main+0x2b8>)
 8001108:	f7ff f8f9 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 800110c:	4603      	mov	r3, r0
 800110e:	2b13      	cmp	r3, #19
 8001110:	bf0c      	ite	eq
 8001112:	2301      	moveq	r3, #1
 8001114:	2300      	movne	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <main+0x13c>
  {
	  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 800111c:	2301      	movs	r3, #1
 800111e:	2202      	movs	r2, #2
 8001120:	2148      	movs	r1, #72	; 0x48
 8001122:	4860      	ldr	r0, [pc, #384]	; (80012a4 <main+0x2b8>)
 8001124:	f7ff f95d 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
  }

  HAL_Delay(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f001 f955 	bl	80023d8 <HAL_Delay>

  // Разрешаем прием по UART
  HAL_UART_Receive_IT(&huart1, &receivedByteUART, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	4961      	ldr	r1, [pc, #388]	; (80012b8 <main+0x2cc>)
 8001132:	4862      	ldr	r0, [pc, #392]	; (80012bc <main+0x2d0>)
 8001134:	f003 fcbf 	bl	8004ab6 <HAL_UART_Receive_IT>

  // очищаем флаги прерываний
  CLEAR_BIT(TIM3->SR, TIM_SR_UIF);
 8001138:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <main+0x2d4>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a60      	ldr	r2, [pc, #384]	; (80012c0 <main+0x2d4>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(TIM4->SR, TIM_SR_UIF);
 8001144:	4b5f      	ldr	r3, [pc, #380]	; (80012c4 <main+0x2d8>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	4a5e      	ldr	r2, [pc, #376]	; (80012c4 <main+0x2d8>)
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6113      	str	r3, [r2, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // провер�?ем е�?ть ли данные по UDP
	  if (socket0dataReady)
 8001150:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <main+0x2dc>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d022      	beq.n	800119e <main+0x1b2>
	  {
		  if((HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY) || (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX))
 8001158:	4858      	ldr	r0, [pc, #352]	; (80012bc <main+0x2d0>)
 800115a:	f003 fe9b 	bl	8004e94 <HAL_UART_GetState>
 800115e:	4603      	mov	r3, r0
 8001160:	2b20      	cmp	r3, #32
 8001162:	d005      	beq.n	8001170 <main+0x184>
 8001164:	4855      	ldr	r0, [pc, #340]	; (80012bc <main+0x2d0>)
 8001166:	f003 fe95 	bl	8004e94 <HAL_UART_GetState>
 800116a:	4603      	mov	r3, r0
 800116c:	2b22      	cmp	r3, #34	; 0x22
 800116e:	d101      	bne.n	8001174 <main+0x188>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <main+0x18a>
 8001174:	2300      	movs	r3, #0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d011      	beq.n	800119e <main+0x1b2>
		  {
			  //// изначально было TX
			  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	4852      	ldr	r0, [pc, #328]	; (80012cc <main+0x2e0>)
 8001182:	f001 fe8f 	bl	8002ea4 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, &receiveSocket0data[8], (sizeOfReceiveSocket0data-8));
 8001186:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <main+0x2e4>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	3b08      	subs	r3, #8
 800118c:	b29b      	uxth	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	4950      	ldr	r1, [pc, #320]	; (80012d4 <main+0x2e8>)
 8001192:	484a      	ldr	r0, [pc, #296]	; (80012bc <main+0x2d0>)
 8001194:	f003 fc4b 	bl	8004a2e <HAL_UART_Transmit_IT>

			  socket0dataReady = false;
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <main+0x2dc>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // провер�?ем е�?ть ли данные по TCP
	  if (socket1dataReady)
 800119e:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <main+0x2ec>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d020      	beq.n	80011e8 <main+0x1fc>
	  {
		  if((HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY) || (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX))
 80011a6:	4845      	ldr	r0, [pc, #276]	; (80012bc <main+0x2d0>)
 80011a8:	f003 fe74 	bl	8004e94 <HAL_UART_GetState>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b20      	cmp	r3, #32
 80011b0:	d005      	beq.n	80011be <main+0x1d2>
 80011b2:	4842      	ldr	r0, [pc, #264]	; (80012bc <main+0x2d0>)
 80011b4:	f003 fe6e 	bl	8004e94 <HAL_UART_GetState>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b22      	cmp	r3, #34	; 0x22
 80011bc:	d101      	bne.n	80011c2 <main+0x1d6>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <main+0x1d8>
 80011c2:	2300      	movs	r3, #0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00f      	beq.n	80011e8 <main+0x1fc>
		  {
			  //// изначально было TX
			  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ce:	483f      	ldr	r0, [pc, #252]	; (80012cc <main+0x2e0>)
 80011d0:	f001 fe68 	bl	8002ea4 <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, receiveSocket1data, sizeOfReceiveSocket1data);
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <main+0x2f0>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4941      	ldr	r1, [pc, #260]	; (80012e0 <main+0x2f4>)
 80011dc:	4837      	ldr	r0, [pc, #220]	; (80012bc <main+0x2d0>)
 80011de:	f003 fc26 	bl	8004a2e <HAL_UART_Transmit_IT>

			  socket1dataReady = false;
 80011e2:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <main+0x2ec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // провер�?ем е�?ть ли данные по Telnet
	  if (socket2dataReady)
 80011e8:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <main+0x2f8>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 8211 	beq.w	8001614 <main+0x628>
	  {
		  for(int i = 0; i < sizeOfReceiveSocket2data; ++i)
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <main+0x2fc>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4293      	cmp	r3, r2
 8001200:	da15      	bge.n	800122e <main+0x242>
		  {
			  if (ptrWriteBufferTelnet <= ptrEndBufferTelnet)
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <main+0x300>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <main+0x304>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d80b      	bhi.n	8001226 <main+0x23a>
			  {
				  *ptrWriteBufferTelnet = receiveSocket2data[i];
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <main+0x300>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4938      	ldr	r1, [pc, #224]	; (80012f4 <main+0x308>)
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	440a      	add	r2, r1
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	701a      	strb	r2, [r3, #0]
				  ++ptrWriteBufferTelnet;
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <main+0x300>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a32      	ldr	r2, [pc, #200]	; (80012ec <main+0x300>)
 8001224:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < sizeOfReceiveSocket2data; ++i)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	e7e3      	b.n	80011f6 <main+0x20a>
			  }
		  }

		  if( *(ptrWriteBufferTelnet - 1) == '\n')
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <main+0x300>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b0a      	cmp	r3, #10
 8001238:	f040 81e9 	bne.w	800160e <main+0x622>
		  {
			  if (counterMessages < 4)
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <main+0x30c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d874      	bhi.n	800132e <main+0x342>
			  {
				  if (*ptrReadBufferTelnet == '\n' || *ptrReadBufferTelnet == '\r')
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <main+0x310>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b0a      	cmp	r3, #10
 800124c:	d004      	beq.n	8001258 <main+0x26c>
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <main+0x310>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b0d      	cmp	r3, #13
 8001256:	d10a      	bne.n	800126e <main+0x282>
				  {
					  receivedIPAddress[counterMessages] = *(&crb.sipr0 + counterMessages);
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <main+0x30c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <main+0x314>)
 8001260:	4413      	add	r3, r2
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <main+0x30c>)
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <main+0x318>)
 800126a:	5499      	strb	r1, [r3, r2]
 800126c:	e054      	b.n	8001318 <main+0x32c>
				  }
				  else
				  {
					  temp32 = atoi(ptrReadBufferTelnet);
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <main+0x310>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f004 f842 	bl	80052fc <atoi>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <main+0x31c>)
 800127e:	601a      	str	r2, [r3, #0]
					  if (temp32 > 0 && temp32 < 256) receivedIPAddress[counterMessages] = (uint8_t)temp32;
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <main+0x31c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d041      	beq.n	800130c <main+0x320>
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <main+0x31c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2bff      	cmp	r3, #255	; 0xff
 800128e:	d83d      	bhi.n	800130c <main+0x320>
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <main+0x31c>)
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <main+0x30c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	b2c9      	uxtb	r1, r1
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <main+0x318>)
 800129e:	5499      	strb	r1, [r3, r2]
 80012a0:	e03a      	b.n	8001318 <main+0x32c>
 80012a2:	bf00      	nop
 80012a4:	200023b0 	.word	0x200023b0
 80012a8:	20000370 	.word	0x20000370
 80012ac:	200003a4 	.word	0x200003a4
 80012b0:	200003d4 	.word	0x200003d4
 80012b4:	20000404 	.word	0x20000404
 80012b8:	20000868 	.word	0x20000868
 80012bc:	20000764 	.word	0x20000764
 80012c0:	40000400 	.word	0x40000400
 80012c4:	40000800 	.word	0x40000800
 80012c8:	20000a75 	.word	0x20000a75
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	2000127e 	.word	0x2000127e
 80012d4:	20000a80 	.word	0x20000a80
 80012d8:	20001280 	.word	0x20001280
 80012dc:	20001a8a 	.word	0x20001a8a
 80012e0:	20001284 	.word	0x20001284
 80012e4:	20001a8c 	.word	0x20001a8c
 80012e8:	20002296 	.word	0x20002296
 80012ec:	20000464 	.word	0x20000464
 80012f0:	20000468 	.word	0x20000468
 80012f4:	20001a90 	.word	0x20001a90
 80012f8:	200023ae 	.word	0x200023ae
 80012fc:	20000460 	.word	0x20000460
 8001300:	2000037f 	.word	0x2000037f
 8001304:	200023a0 	.word	0x200023a0
 8001308:	2000239c 	.word	0x2000239c
					  else receivedIPAddress[counterMessages] = 0;
 800130c:	4b88      	ldr	r3, [pc, #544]	; (8001530 <main+0x544>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b88      	ldr	r3, [pc, #544]	; (8001534 <main+0x548>)
 8001314:	2100      	movs	r1, #0
 8001316:	5499      	strb	r1, [r3, r2]

				  }
				  ++counterMessages;
 8001318:	4b85      	ldr	r3, [pc, #532]	; (8001530 <main+0x544>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b83      	ldr	r3, [pc, #524]	; (8001530 <main+0x544>)
 8001322:	701a      	strb	r2, [r3, #0]
				  ptrReadBufferTelnet = ptrWriteBufferTelnet;
 8001324:	4b84      	ldr	r3, [pc, #528]	; (8001538 <main+0x54c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a84      	ldr	r2, [pc, #528]	; (800153c <main+0x550>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e158      	b.n	80015e0 <main+0x5f4>
			  }
			  else if (counterMessages < 8)
 800132e:	4b80      	ldr	r3, [pc, #512]	; (8001530 <main+0x544>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b07      	cmp	r3, #7
 8001334:	d840      	bhi.n	80013b8 <main+0x3cc>
			  {
				  if (*ptrReadBufferTelnet == '\n' || *ptrReadBufferTelnet == '\r')
 8001336:	4b81      	ldr	r3, [pc, #516]	; (800153c <main+0x550>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b0a      	cmp	r3, #10
 800133e:	d004      	beq.n	800134a <main+0x35e>
 8001340:	4b7e      	ldr	r3, [pc, #504]	; (800153c <main+0x550>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b0d      	cmp	r3, #13
 8001348:	d10b      	bne.n	8001362 <main+0x376>
				  {
					  receivedSubnetMask[counterMessages - 4] = *(&crb.subr0 + counterMessages - 4);
 800134a:	4b79      	ldr	r3, [pc, #484]	; (8001530 <main+0x544>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3b04      	subs	r3, #4
 8001350:	4a7b      	ldr	r2, [pc, #492]	; (8001540 <main+0x554>)
 8001352:	441a      	add	r2, r3
 8001354:	4b76      	ldr	r3, [pc, #472]	; (8001530 <main+0x544>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3b04      	subs	r3, #4
 800135a:	7811      	ldrb	r1, [r2, #0]
 800135c:	4a79      	ldr	r2, [pc, #484]	; (8001544 <main+0x558>)
 800135e:	54d1      	strb	r1, [r2, r3]
 8001360:	e01f      	b.n	80013a2 <main+0x3b6>
				  }
				  else
				  {
					  temp32 = atoi(ptrReadBufferTelnet);
 8001362:	4b76      	ldr	r3, [pc, #472]	; (800153c <main+0x550>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f003 ffc8 	bl	80052fc <atoi>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b75      	ldr	r3, [pc, #468]	; (8001548 <main+0x55c>)
 8001372:	601a      	str	r2, [r3, #0]
					  if (temp32 > 0 && temp32 < 256) receivedSubnetMask[counterMessages - 4] = (uint8_t)temp32;
 8001374:	4b74      	ldr	r3, [pc, #464]	; (8001548 <main+0x55c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00c      	beq.n	8001396 <main+0x3aa>
 800137c:	4b72      	ldr	r3, [pc, #456]	; (8001548 <main+0x55c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2bff      	cmp	r3, #255	; 0xff
 8001382:	d808      	bhi.n	8001396 <main+0x3aa>
 8001384:	4b70      	ldr	r3, [pc, #448]	; (8001548 <main+0x55c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b69      	ldr	r3, [pc, #420]	; (8001530 <main+0x544>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3b04      	subs	r3, #4
 800138e:	b2d1      	uxtb	r1, r2
 8001390:	4a6c      	ldr	r2, [pc, #432]	; (8001544 <main+0x558>)
 8001392:	54d1      	strb	r1, [r2, r3]
 8001394:	e005      	b.n	80013a2 <main+0x3b6>
					  else receivedSubnetMask[counterMessages - 4] = 0;
 8001396:	4b66      	ldr	r3, [pc, #408]	; (8001530 <main+0x544>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3b04      	subs	r3, #4
 800139c:	4a69      	ldr	r2, [pc, #420]	; (8001544 <main+0x558>)
 800139e:	2100      	movs	r1, #0
 80013a0:	54d1      	strb	r1, [r2, r3]
				  }
				  ++counterMessages;
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <main+0x544>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b61      	ldr	r3, [pc, #388]	; (8001530 <main+0x544>)
 80013ac:	701a      	strb	r2, [r3, #0]
				  ptrReadBufferTelnet = ptrWriteBufferTelnet;
 80013ae:	4b62      	ldr	r3, [pc, #392]	; (8001538 <main+0x54c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a62      	ldr	r2, [pc, #392]	; (800153c <main+0x550>)
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e113      	b.n	80015e0 <main+0x5f4>
			  }
			  else if (counterMessages < 14)
 80013b8:	4b5d      	ldr	r3, [pc, #372]	; (8001530 <main+0x544>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b0d      	cmp	r3, #13
 80013be:	f200 80f4 	bhi.w	80015aa <main+0x5be>
			  {
				  if (*ptrReadBufferTelnet == '\n' || *ptrReadBufferTelnet == '\r')
 80013c2:	4b5e      	ldr	r3, [pc, #376]	; (800153c <main+0x550>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b0a      	cmp	r3, #10
 80013ca:	d004      	beq.n	80013d6 <main+0x3ea>
 80013cc:	4b5b      	ldr	r3, [pc, #364]	; (800153c <main+0x550>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b0d      	cmp	r3, #13
 80013d4:	d10f      	bne.n	80013f6 <main+0x40a>
				  {
					  receivedMACAddress[counterMessages - 8] = *(&crb.shar0 + counterMessages - 8);
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <main+0x544>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3b08      	subs	r3, #8
 80013dc:	4a5b      	ldr	r2, [pc, #364]	; (800154c <main+0x560>)
 80013de:	441a      	add	r2, r3
 80013e0:	4b53      	ldr	r3, [pc, #332]	; (8001530 <main+0x544>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3b08      	subs	r3, #8
 80013e6:	7811      	ldrb	r1, [r2, #0]
 80013e8:	4a59      	ldr	r2, [pc, #356]	; (8001550 <main+0x564>)
 80013ea:	54d1      	strb	r1, [r2, r3]
					  ptrReadBufferTelnet = ptrWriteBufferTelnet;
 80013ec:	4b52      	ldr	r3, [pc, #328]	; (8001538 <main+0x54c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <main+0x550>)
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e0d2      	b.n	800159c <main+0x5b0>
				  }
				  else
				  {
					  uint8_t tempCounter { 0 };
 80013f6:	2300      	movs	r3, #0
 80013f8:	70fb      	strb	r3, [r7, #3]
					  while (ptrReadBufferTelnet != ptrWriteBufferTelnet)
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <main+0x550>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b4e      	ldr	r3, [pc, #312]	; (8001538 <main+0x54c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	f000 80ca 	beq.w	800159c <main+0x5b0>
					  {
						  if (tempCounter == 0)
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d14f      	bne.n	80014ae <main+0x4c2>
						  {
							  if (*ptrReadBufferTelnet >= '0' && *ptrReadBufferTelnet <= '9')
 800140e:	4b4b      	ldr	r3, [pc, #300]	; (800153c <main+0x550>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b2f      	cmp	r3, #47	; 0x2f
 8001416:	d914      	bls.n	8001442 <main+0x456>
 8001418:	4b48      	ldr	r3, [pc, #288]	; (800153c <main+0x550>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b39      	cmp	r3, #57	; 0x39
 8001420:	d80f      	bhi.n	8001442 <main+0x456>
							  {
								  receivedMACAddress[counterMessages - 8] = (*ptrReadBufferTelnet - 48)*16;
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <main+0x550>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	3b30      	subs	r3, #48	; 0x30
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b40      	ldr	r3, [pc, #256]	; (8001530 <main+0x544>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3b08      	subs	r3, #8
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d1      	uxtb	r1, r2
 8001436:	4a46      	ldr	r2, [pc, #280]	; (8001550 <main+0x564>)
 8001438:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	3301      	adds	r3, #1
 800143e:	70fb      	strb	r3, [r7, #3]
 8001440:	e0a6      	b.n	8001590 <main+0x5a4>
							  }
							  else if (*ptrReadBufferTelnet >= 'A' && *ptrReadBufferTelnet <= 'F')
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <main+0x550>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	d914      	bls.n	8001476 <main+0x48a>
 800144c:	4b3b      	ldr	r3, [pc, #236]	; (800153c <main+0x550>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b46      	cmp	r3, #70	; 0x46
 8001454:	d80f      	bhi.n	8001476 <main+0x48a>
							  {
								  receivedMACAddress[counterMessages - 8] = (*ptrReadBufferTelnet - 55)*16;
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <main+0x550>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3b37      	subs	r3, #55	; 0x37
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b33      	ldr	r3, [pc, #204]	; (8001530 <main+0x544>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3b08      	subs	r3, #8
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d1      	uxtb	r1, r2
 800146a:	4a39      	ldr	r2, [pc, #228]	; (8001550 <main+0x564>)
 800146c:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	3301      	adds	r3, #1
 8001472:	70fb      	strb	r3, [r7, #3]
 8001474:	e08c      	b.n	8001590 <main+0x5a4>
							  }
							  else if (*ptrReadBufferTelnet >= 'a' && *ptrReadBufferTelnet <= 'f')
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <main+0x550>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b60      	cmp	r3, #96	; 0x60
 800147e:	f240 8087 	bls.w	8001590 <main+0x5a4>
 8001482:	4b2e      	ldr	r3, [pc, #184]	; (800153c <main+0x550>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b66      	cmp	r3, #102	; 0x66
 800148a:	f200 8081 	bhi.w	8001590 <main+0x5a4>
							  {
								  receivedMACAddress[counterMessages - 8] = (*ptrReadBufferTelnet - 87)*16;
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <main+0x550>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3b57      	subs	r3, #87	; 0x57
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <main+0x544>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	3b08      	subs	r3, #8
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d1      	uxtb	r1, r2
 80014a2:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <main+0x564>)
 80014a4:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	3301      	adds	r3, #1
 80014aa:	70fb      	strb	r3, [r7, #3]
 80014ac:	e070      	b.n	8001590 <main+0x5a4>
							  }
						  }
						  else if (tempCounter == 1)
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d16d      	bne.n	8001590 <main+0x5a4>
						  {
							  if (*ptrReadBufferTelnet >= '0' && *ptrReadBufferTelnet <= '9')
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <main+0x550>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b2f      	cmp	r3, #47	; 0x2f
 80014bc:	d919      	bls.n	80014f2 <main+0x506>
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <main+0x550>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b39      	cmp	r3, #57	; 0x39
 80014c6:	d814      	bhi.n	80014f2 <main+0x506>
							  {
								  receivedMACAddress[counterMessages - 8] += (*ptrReadBufferTelnet - 48);
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <main+0x544>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	3b08      	subs	r3, #8
 80014ce:	4a20      	ldr	r2, [pc, #128]	; (8001550 <main+0x564>)
 80014d0:	5cd2      	ldrb	r2, [r2, r3]
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <main+0x550>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <main+0x544>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	3b08      	subs	r3, #8
 80014e2:	3a30      	subs	r2, #48	; 0x30
 80014e4:	b2d1      	uxtb	r1, r2
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <main+0x564>)
 80014e8:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	3301      	adds	r3, #1
 80014ee:	70fb      	strb	r3, [r7, #3]
 80014f0:	e04e      	b.n	8001590 <main+0x5a4>
							  }
							  else if (*ptrReadBufferTelnet >= 'A' && *ptrReadBufferTelnet <= 'F')
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <main+0x550>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d92b      	bls.n	8001554 <main+0x568>
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <main+0x550>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b46      	cmp	r3, #70	; 0x46
 8001504:	d826      	bhi.n	8001554 <main+0x568>
							  {
								  receivedMACAddress[counterMessages - 8] += (*ptrReadBufferTelnet - 55);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <main+0x544>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	3b08      	subs	r3, #8
 800150c:	4a10      	ldr	r2, [pc, #64]	; (8001550 <main+0x564>)
 800150e:	5cd2      	ldrb	r2, [r2, r3]
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <main+0x550>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <main+0x544>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3b08      	subs	r3, #8
 8001520:	3a37      	subs	r2, #55	; 0x37
 8001522:	b2d1      	uxtb	r1, r2
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <main+0x564>)
 8001526:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	3301      	adds	r3, #1
 800152c:	70fb      	strb	r3, [r7, #3]
 800152e:	e02f      	b.n	8001590 <main+0x5a4>
 8001530:	200023ae 	.word	0x200023ae
 8001534:	200023a0 	.word	0x200023a0
 8001538:	20000464 	.word	0x20000464
 800153c:	20000460 	.word	0x20000460
 8001540:	20000375 	.word	0x20000375
 8001544:	200023a4 	.word	0x200023a4
 8001548:	2000239c 	.word	0x2000239c
 800154c:	20000379 	.word	0x20000379
 8001550:	200023a8 	.word	0x200023a8
							  }
							  else if (*ptrReadBufferTelnet >= 'a' && *ptrReadBufferTelnet <= 'f')
 8001554:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <main+0x708>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b60      	cmp	r3, #96	; 0x60
 800155c:	d918      	bls.n	8001590 <main+0x5a4>
 800155e:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <main+0x708>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b66      	cmp	r3, #102	; 0x66
 8001566:	d813      	bhi.n	8001590 <main+0x5a4>
							  {
								  receivedMACAddress[counterMessages - 8] += (*ptrReadBufferTelnet - 87);
 8001568:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <main+0x70c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3b08      	subs	r3, #8
 800156e:	4a63      	ldr	r2, [pc, #396]	; (80016fc <main+0x710>)
 8001570:	5cd2      	ldrb	r2, [r2, r3]
 8001572:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <main+0x708>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4413      	add	r3, r2
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <main+0x70c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	3b08      	subs	r3, #8
 8001582:	3a57      	subs	r2, #87	; 0x57
 8001584:	b2d1      	uxtb	r1, r2
 8001586:	4a5d      	ldr	r2, [pc, #372]	; (80016fc <main+0x710>)
 8001588:	54d1      	strb	r1, [r2, r3]
								  ++tempCounter;
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	3301      	adds	r3, #1
 800158e:	70fb      	strb	r3, [r7, #3]
							  }
						  }
						  ++ptrReadBufferTelnet;
 8001590:	4b58      	ldr	r3, [pc, #352]	; (80016f4 <main+0x708>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4a57      	ldr	r2, [pc, #348]	; (80016f4 <main+0x708>)
 8001598:	6013      	str	r3, [r2, #0]
					  while (ptrReadBufferTelnet != ptrWriteBufferTelnet)
 800159a:	e72e      	b.n	80013fa <main+0x40e>
					  }
				  }
				  ++counterMessages;
 800159c:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <main+0x70c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <main+0x70c>)
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	e01a      	b.n	80015e0 <main+0x5f4>
			  }
			  else if (counterMessages == 14)
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <main+0x70c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b0e      	cmp	r3, #14
 80015b0:	d116      	bne.n	80015e0 <main+0x5f4>
			  {
				  if (*ptrReadBufferTelnet == 'Y' || *ptrReadBufferTelnet == 'y')
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <main+0x708>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b59      	cmp	r3, #89	; 0x59
 80015ba:	d004      	beq.n	80015c6 <main+0x5da>
 80015bc:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <main+0x708>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b79      	cmp	r3, #121	; 0x79
 80015c4:	d107      	bne.n	80015d6 <main+0x5ea>
				  {
					  ethernetA1.sendString(SOCKET2, textApply);
 80015c6:	4a4e      	ldr	r2, [pc, #312]	; (8001700 <main+0x714>)
 80015c8:	2148      	movs	r1, #72	; 0x48
 80015ca:	484e      	ldr	r0, [pc, #312]	; (8001704 <main+0x718>)
 80015cc:	f7ff f8fc 	bl	80007c8 <_ZN5W550010sendStringEhPc>
					  saveSettings();
 80015d0:	f7ff fc32 	bl	8000e38 <_Z12saveSettingsv>
 80015d4:	e004      	b.n	80015e0 <main+0x5f4>
				  }
				  else
				  {
					  ethernetA1.sendString(SOCKET2, textNotApply);
 80015d6:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <main+0x71c>)
 80015d8:	2148      	movs	r1, #72	; 0x48
 80015da:	484a      	ldr	r0, [pc, #296]	; (8001704 <main+0x718>)
 80015dc:	f7ff f8f4 	bl	80007c8 <_ZN5W550010sendStringEhPc>
				  }
			  }

			  if(typedValueCounter == 13)
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <main+0x720>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b0d      	cmp	r3, #13
 80015e6:	d101      	bne.n	80015ec <main+0x600>
			  {
				  fillFinalText();
 80015e8:	f7ff fc02 	bl	8000df0 <_Z13fillFinalTextv>
			  }

			  ethernetA1.sendString(SOCKET2, arrText[typedValueCounter]);
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <main+0x720>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <main+0x724>)
 80015f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f8:	461a      	mov	r2, r3
 80015fa:	2148      	movs	r1, #72	; 0x48
 80015fc:	4841      	ldr	r0, [pc, #260]	; (8001704 <main+0x718>)
 80015fe:	f7ff f8e3 	bl	80007c8 <_ZN5W550010sendStringEhPc>
			  ++typedValueCounter;
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <main+0x720>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b40      	ldr	r3, [pc, #256]	; (800170c <main+0x720>)
 800160c:	701a      	strb	r2, [r3, #0]
		  }
		  socket2dataReady = false;
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <main+0x728>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
	  }


	  // провер�?ем е�?ть ли данные по UART
	  if (receivedPacketUARTisReady)
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <main+0x72c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d023      	beq.n	8001664 <main+0x678>
	  {
		  if (needsTransmitUDP)
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <main+0x730>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <main+0x654>
		  {
			  // отправл�?ем данные, прин�?тые по UART, по UDP
			  ethernetA1.sendPacket(SOCKET0, copiedReceivedPacketUART, copiedReceivedBytesUARTCounter);
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <main+0x734>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	4a3e      	ldr	r2, [pc, #248]	; (8001724 <main+0x738>)
 800162c:	2108      	movs	r1, #8
 800162e:	4835      	ldr	r0, [pc, #212]	; (8001704 <main+0x718>)
 8001630:	f7ff f88c 	bl	800074c <_ZN5W550010sendPacketEhPht>

			  // �?бра�?ываем флаги
			  receivedPacketUARTisReady = false;
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <main+0x72c>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
			  needsTransmitUDP = false;
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <main+0x730>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
		  }

		  if (needsTransmitTCP)
 8001640:	4b39      	ldr	r3, [pc, #228]	; (8001728 <main+0x73c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00d      	beq.n	8001664 <main+0x678>
		  {
			  // отправл�?ем данные, прин�?тые по UART, по UDP
			  ethernetA1.sendPacket(SOCKET1, copiedReceivedPacketUART, copiedReceivedBytesUARTCounter);
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <main+0x734>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4a35      	ldr	r2, [pc, #212]	; (8001724 <main+0x738>)
 8001650:	2128      	movs	r1, #40	; 0x28
 8001652:	482c      	ldr	r0, [pc, #176]	; (8001704 <main+0x718>)
 8001654:	f7ff f87a 	bl	800074c <_ZN5W550010sendPacketEhPht>

			  // �?бра�?ываем флаги
			  receivedPacketUARTisReady = false;
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <main+0x72c>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			  needsTransmitTCP = false;
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <main+0x73c>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // е�?ли �?оединение по TCP было закрыто, нужно �?нова проинициализировать �?окет и перейти в режим про�?лушки (�?ервера)
	  if (needsOpenTCP)
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <main+0x740>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01e      	beq.n	80016aa <main+0x6be>
	  {
		  // Открываем �?окет 1
		  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 800166c:	2301      	movs	r3, #1
 800166e:	2201      	movs	r2, #1
 8001670:	2128      	movs	r1, #40	; 0x28
 8001672:	4824      	ldr	r0, [pc, #144]	; (8001704 <main+0x718>)
 8001674:	f7fe feb5 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

		  HAL_Delay(1);
 8001678:	2001      	movs	r0, #1
 800167a:	f000 fead 	bl	80023d8 <HAL_Delay>

		  // провер�?ем что �?окет 1 проиницилизирован и запу�?каем режим �?ервера
		  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 800167e:	2203      	movs	r2, #3
 8001680:	2128      	movs	r1, #40	; 0x28
 8001682:	4820      	ldr	r0, [pc, #128]	; (8001704 <main+0x718>)
 8001684:	f7fe fe3b 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001688:	4603      	mov	r3, r0
 800168a:	2b13      	cmp	r3, #19
 800168c:	bf0c      	ite	eq
 800168e:	2301      	moveq	r3, #1
 8001690:	2300      	movne	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <main+0x6b8>
		  {
			  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8001698:	2301      	movs	r3, #1
 800169a:	2202      	movs	r2, #2
 800169c:	2128      	movs	r1, #40	; 0x28
 800169e:	4819      	ldr	r0, [pc, #100]	; (8001704 <main+0x718>)
 80016a0:	f7fe fe9f 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
		  }

		  needsOpenTCP = false;
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <main+0x740>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	  }


	  // е�?ли �?оединение по Telnet было закрыто, нужно �?нова проинициализировать �?окет и перейти в режим про�?лушки (�?ервера)
	  if (needsOpenTelnet)
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <main+0x744>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f43f ad4e 	beq.w	8001150 <main+0x164>
	  {
		  // Открываем �?окет 2
		  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 80016b4:	2301      	movs	r3, #1
 80016b6:	2201      	movs	r2, #1
 80016b8:	2148      	movs	r1, #72	; 0x48
 80016ba:	4812      	ldr	r0, [pc, #72]	; (8001704 <main+0x718>)
 80016bc:	f7fe fe91 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

		  HAL_Delay(1);
 80016c0:	2001      	movs	r0, #1
 80016c2:	f000 fe89 	bl	80023d8 <HAL_Delay>

		  // провер�?ем что �?окет 2 проиницилизирован и запу�?каем режим �?ервера
		  if (ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 80016c6:	2203      	movs	r2, #3
 80016c8:	2148      	movs	r1, #72	; 0x48
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <main+0x718>)
 80016cc:	f7fe fe17 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b13      	cmp	r3, #19
 80016d4:	bf0c      	ite	eq
 80016d6:	2301      	moveq	r3, #1
 80016d8:	2300      	movne	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <main+0x700>
		  {
			  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 80016e0:	2301      	movs	r3, #1
 80016e2:	2202      	movs	r2, #2
 80016e4:	2148      	movs	r1, #72	; 0x48
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <main+0x718>)
 80016e8:	f7fe fe7b 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
		  }

		  needsOpenTelnet = false;
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <main+0x744>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
	  }
*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80016f2:	e52d      	b.n	8001150 <main+0x164>
 80016f4:	20000460 	.word	0x20000460
 80016f8:	200023ae 	.word	0x200023ae
 80016fc:	200023a8 	.word	0x200023a8
 8001700:	2000031c 	.word	0x2000031c
 8001704:	200023b0 	.word	0x200023b0
 8001708:	20000354 	.word	0x20000354
 800170c:	20002398 	.word	0x20002398
 8001710:	200002c8 	.word	0x200002c8
 8001714:	20001a8c 	.word	0x20001a8c
 8001718:	2000096d 	.word	0x2000096d
 800171c:	20000a71 	.word	0x20000a71
 8001720:	20000a70 	.word	0x20000a70
 8001724:	20000970 	.word	0x20000970
 8001728:	20000a72 	.word	0x20000a72
 800172c:	20000a73 	.word	0x20000a73
 8001730:	20000a74 	.word	0x20000a74

08001734 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b090      	sub	sp, #64	; 0x40
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	2228      	movs	r2, #40	; 0x28
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fe08 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800175a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001764:	2301      	movs	r3, #1
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001768:	2302      	movs	r3, #2
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001772:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001778:	f107 0318 	add.w	r3, r7, #24
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fbc1 	bl	8002f04 <HAL_RCC_OscConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001792:	f000 fbbd 	bl	8001f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001796:	230f      	movs	r3, #15
 8001798:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179a:	2302      	movs	r3, #2
 800179c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2101      	movs	r1, #1
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 fe29 	bl	8003408 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80017c6:	f000 fba3 	bl	8001f10 <Error_Handler>
  }
}
 80017ca:	bf00      	nop
 80017cc:	3740      	adds	r7, #64	; 0x40
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 80017da:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <_ZL12MX_SPI1_Initv+0x74>)
 80017dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 80017e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 8001800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 8001808:	2208      	movs	r2, #8
 800180a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 8001820:	220a      	movs	r2, #10
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001824:	4807      	ldr	r0, [pc, #28]	; (8001844 <_ZL12MX_SPI1_Initv+0x70>)
 8001826:	f001 ff89 	bl	800373c <HAL_SPI_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800183a:	f000 fb69 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000634 	.word	0x20000634
 8001848:	40013000 	.word	0x40013000

0800184c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 800186a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000;
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 800187e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001890:	481b      	ldr	r0, [pc, #108]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 8001892:	f002 fc5f 	bl	8004154 <HAL_TIM_Base_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80018a6:	f000 fb33 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	4619      	mov	r1, r3
 80018b6:	4812      	ldr	r0, [pc, #72]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 80018b8:	f002 fe1c 	bl	80044f4 <HAL_TIM_ConfigClockSource>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bf14      	ite	ne
 80018c2:	2301      	movne	r3, #1
 80018c4:	2300      	moveq	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80018cc:	f000 fb20 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	4808      	ldr	r0, [pc, #32]	; (8001900 <_ZL12MX_TIM2_Initv+0xb4>)
 80018de:	f002 ffe9 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80018f2:	f000 fb0d 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000068c 	.word	0x2000068c

08001904 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001928:	2201      	movs	r2, #1
 800192a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001934:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001946:	481b      	ldr	r0, [pc, #108]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001948:	f002 fc04 	bl	8004154 <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 800195c:	f000 fad8 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	4619      	mov	r1, r3
 800196c:	4811      	ldr	r0, [pc, #68]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 800196e:	f002 fdc1 	bl	80044f4 <HAL_TIM_ConfigClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf14      	ite	ne
 8001978:	2301      	movne	r3, #1
 800197a:	2300      	moveq	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8001982:	f000 fac5 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	4619      	mov	r1, r3
 8001992:	4808      	ldr	r0, [pc, #32]	; (80019b4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001994:	f002 ff8e 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 80019a8:	f000 fab2 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200006d4 	.word	0x200006d4
 80019b8:	40000400 	.word	0x40000400

080019bc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	463b      	mov	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 80019da:	4a25      	ldr	r2, [pc, #148]	; (8001a70 <_ZL12MX_TIM4_Initv+0xb4>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 80019e0:	2203      	movs	r2, #3
 80019e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 80019ec:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80019f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019fe:	481b      	ldr	r0, [pc, #108]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 8001a00:	f002 fba8 	bl	8004154 <HAL_TIM_Base_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001a14:	f000 fa7c 	bl	8001f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	4619      	mov	r1, r3
 8001a24:	4811      	ldr	r0, [pc, #68]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 8001a26:	f002 fd65 	bl	80044f4 <HAL_TIM_ConfigClockSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001a3a:	f000 fa69 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4808      	ldr	r0, [pc, #32]	; (8001a6c <_ZL12MX_TIM4_Initv+0xb0>)
 8001a4c:	f002 ff32 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001a60:	f000 fa56 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000071c 	.word	0x2000071c
 8001a70:	40000800 	.word	0x40000800

08001a74 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_ZL19MX_USART1_UART_Initv+0x58>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aaa:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001aac:	f002 ff72 	bl	8004994 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf14      	ite	ne
 8001ab6:	2301      	movne	r3, #1
 8001ab8:	2300      	moveq	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001ac0:	f000 fa26 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000764 	.word	0x20000764
 8001acc:	40013800 	.word	0x40013800

08001ad0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae4:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a35      	ldr	r2, [pc, #212]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <_ZL12MX_GPIO_Initv+0x138>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	2110      	movs	r1, #16
 8001b48:	4830      	ldr	r0, [pc, #192]	; (8001c0c <_ZL12MX_GPIO_Initv+0x13c>)
 8001b4a:	f001 f9ab 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2120      	movs	r1, #32
 8001b52:	482e      	ldr	r0, [pc, #184]	; (8001c0c <_ZL12MX_GPIO_Initv+0x13c>)
 8001b54:	f001 f9a6 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b5e:	482c      	ldr	r0, [pc, #176]	; (8001c10 <_ZL12MX_GPIO_Initv+0x140>)
 8001b60:	f001 f9a0 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RSTBUTTON_Pin */
  GPIO_InitStruct.Pin = RSTBUTTON_Pin;
 8001b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RSTBUTTON_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4619      	mov	r1, r3
 8001b78:	4824      	ldr	r0, [pc, #144]	; (8001c0c <_ZL12MX_GPIO_Initv+0x13c>)
 8001b7a:	f001 f80f 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8001b7e:	2310      	movs	r3, #16
 8001b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <_ZL12MX_GPIO_Initv+0x144>)
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4821      	ldr	r0, [pc, #132]	; (8001c18 <_ZL12MX_GPIO_Initv+0x148>)
 8001b92:	f001 f803 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 8001b96:	2330      	movs	r3, #48	; 0x30
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	4619      	mov	r1, r3
 8001bac:	4817      	ldr	r0, [pc, #92]	; (8001c0c <_ZL12MX_GPIO_Initv+0x13c>)
 8001bae:	f000 fff5 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8001bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bb8:	2311      	movs	r3, #17
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4811      	ldr	r0, [pc, #68]	; (8001c10 <_ZL12MX_GPIO_Initv+0x140>)
 8001bcc:	f000 ffe6 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4619      	mov	r1, r3
 8001be8:	4809      	ldr	r0, [pc, #36]	; (8001c10 <_ZL12MX_GPIO_Initv+0x140>)
 8001bea:	f000 ffd7 	bl	8002b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	200a      	movs	r0, #10
 8001bf4:	f000 fceb 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f000 fd04 	bl	8002606 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bfe:	bf00      	nop
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	10210000 	.word	0x10210000
 8001c18:	40010800 	.word	0x40010800

08001c1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_UART_RxCpltCallback+0x5c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d121      	bne.n	8001c70 <HAL_UART_RxCpltCallback+0x54>
  {
	  //// изначально было так - // включаем cветодиод "RX"
	  //// HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);

	  // включаем cветодиод "TX"
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c32:	4812      	ldr	r0, [pc, #72]	; (8001c7c <HAL_UART_RxCpltCallback+0x60>)
 8001c34:	f001 f936 	bl	8002ea4 <HAL_GPIO_WritePin>

	  // запу�?каем таймер TIM4, от�?читываем врем�? �?вечени�? cветодиода "RX"
	  HAL_TIM_Base_Start_IT(&htim4);
 8001c38:	4811      	ldr	r0, [pc, #68]	; (8001c80 <HAL_UART_RxCpltCallback+0x64>)
 8001c3a:	f002 fb01 	bl	8004240 <HAL_TIM_Base_Start_IT>

	  //HAL_TIM_Base_Stop(&htim3);

	  // обнул�?ем �?четчик таймера TIM3
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_UART_RxCpltCallback+0x68>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24

	  // запу�?каем таймер TIM3, от�?читываем врем�? до �?ледующего пакета по RX
	  HAL_TIM_Base_Start_IT(&htim3);
 8001c46:	480f      	ldr	r0, [pc, #60]	; (8001c84 <HAL_UART_RxCpltCallback+0x68>)
 8001c48:	f002 fafa 	bl	8004240 <HAL_TIM_Base_Start_IT>

	  // �?охран�?ем полученный байт в буфер
	  receivedPacketUART[receivedBytesUARTCounter] = receivedByteUART;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_UART_RxCpltCallback+0x6c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_UART_RxCpltCallback+0x70>)
 8001c54:	7819      	ldrb	r1, [r3, #0]
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_UART_RxCpltCallback+0x74>)
 8001c58:	5499      	strb	r1, [r3, r2]

	  //buf1.put(rxByte);

	  // инкрементируем �?четчик полученных байт
	  receivedBytesUARTCounter++;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_UART_RxCpltCallback+0x6c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_UART_RxCpltCallback+0x6c>)
 8001c64:	701a      	strb	r2, [r3, #0]

	  // �?нова ждем приема байта по UART1
	  HAL_UART_Receive_IT(&huart1, &receivedByteUART, 1);
 8001c66:	2201      	movs	r2, #1
 8001c68:	4908      	ldr	r1, [pc, #32]	; (8001c8c <HAL_UART_RxCpltCallback+0x70>)
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <HAL_UART_RxCpltCallback+0x5c>)
 8001c6c:	f002 ff23 	bl	8004ab6 <HAL_UART_Receive_IT>
  }
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000764 	.word	0x20000764
 8001c7c:	40010c00 	.word	0x40010c00
 8001c80:	2000071c 	.word	0x2000071c
 8001c84:	200006d4 	.word	0x200006d4
 8001c88:	2000096c 	.word	0x2000096c
 8001c8c:	20000868 	.word	0x20000868
 8001c90:	2000086c 	.word	0x2000086c

08001c94 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_UART_TxCpltCallback+0x24>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d105      	bne.n	8001cb0 <HAL_UART_TxCpltCallback+0x1c>
  {
	  //// изначально было так - // гаcим cветодиод "TX"
	  //// HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);

	  // гаcим cветодиод "RX"
	  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001caa:	4804      	ldr	r0, [pc, #16]	; (8001cbc <HAL_UART_TxCpltCallback+0x28>)
 8001cac:	f001 f8fa 	bl	8002ea4 <HAL_GPIO_WritePin>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000764 	.word	0x20000764
 8001cbc:	40010c00 	.word	0x40010c00

08001cc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from TIM3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d121      	bne.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		HAL_TIM_Base_Stop(&htim3);
 8001cd2:	481b      	ldr	r0, [pc, #108]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cd4:	f002 fa8d 	bl	80041f2 <HAL_TIM_Base_Stop>

		// копируем полученный пакет
		for (int i = 0; i < receivedBytesUARTCounter; ++i)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	da0c      	bge.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			copiedReceivedPacketUART[i] = receivedPacketUART[i];
 8001ce8:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	7819      	ldrb	r1, [r3, #0]
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < receivedBytesUARTCounter; ++i)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	e7ec      	b.n	8001cdc <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
		// копируем �?четчик полученных байт
		copiedReceivedBytesUARTCounter = receivedBytesUARTCounter;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001d08:	701a      	strb	r2, [r3, #0]

		// у�?танавливаем флаг о готовно�?ти пакета, прин�?того по UART
		receivedPacketUARTisReady = true;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]

		// обнул�?ем �?четчик полученных байт
		receivedBytesUARTCounter = 0;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM4
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		HAL_TIM_Base_Stop(&htim4);
 8001d20:	480e      	ldr	r0, [pc, #56]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d22:	f002 fa66 	bl	80041f2 <HAL_TIM_Base_Stop>

		//// изначально было так - // гаcим cветодиод "RX"
		//// HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);

		// гаcим cветодиод "TX"
		HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d2e:	f001 f8b9 	bl	8002ea4 <HAL_GPIO_WritePin>
	}
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	200006d4 	.word	0x200006d4
 8001d44:	2000096c 	.word	0x2000096c
 8001d48:	2000086c 	.word	0x2000086c
 8001d4c:	20000970 	.word	0x20000970
 8001d50:	20000a70 	.word	0x20000a70
 8001d54:	2000096d 	.word	0x2000096d
 8001d58:	40000800 	.word	0x40000800
 8001d5c:	2000071c 	.word	0x2000071c
 8001d60:	40010c00 	.word	0x40010c00

08001d64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == W5500_INT_Pin)
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	2b10      	cmp	r3, #16
 8001d72:	f040 80aa 	bne.w	8001eca <HAL_GPIO_EXTI_Callback+0x166>
	{
		// читаем флаги прерываний от �?окетов
		uint8_t valueSIR = ethernetA1.readByteFromCRB(W5500_SIR);
 8001d76:	2117      	movs	r1, #23
 8001d78:	4856      	ldr	r0, [pc, #344]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001d7a:	f7fe fa43 	bl	8000204 <_ZN5W550015readByteFromCRBEh>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	73fb      	strb	r3, [r7, #15]
		uint8_t valueSn_IR {0};
 8001d82:	2300      	movs	r3, #0
 8001d84:	73bb      	strb	r3, [r7, #14]
		if (valueSIR)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 809e 	beq.w	8001eca <HAL_GPIO_EXTI_Callback+0x166>
		{
			if (valueSIR & W5500_S0_INT)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01d      	beq.n	8001dd4 <HAL_GPIO_EXTI_Callback+0x70>
			{
				// читаем флаги прерываний �?окета 0
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET0, W5500_Sn_IR);
 8001d98:	2202      	movs	r2, #2
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	484d      	ldr	r0, [pc, #308]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001d9e:	f7fe faae 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 8001da6:	7bbb      	ldrb	r3, [r7, #14]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d011      	beq.n	8001dd4 <HAL_GPIO_EXTI_Callback+0x70>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET0, receiveSocket0data, &sizeOfReceiveSocket0data);
 8001db0:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x174>)
 8001db2:	4a4a      	ldr	r2, [pc, #296]	; (8001edc <HAL_GPIO_EXTI_Callback+0x178>)
 8001db4:	2108      	movs	r1, #8
 8001db6:	4847      	ldr	r0, [pc, #284]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001db8:	f7fe fc77 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket0dataReady = true;
 8001dbc:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
					needsTransmitUDP = true;
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x180>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S0_IR
					ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IR_RECV, W5500_Sn_IR);
 8001dc8:	2302      	movs	r3, #2
 8001dca:	2204      	movs	r2, #4
 8001dcc:	2108      	movs	r1, #8
 8001dce:	4841      	ldr	r0, [pc, #260]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001dd0:	f7fe fb07 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				{

				}
			}

			if (valueSIR & W5500_S1_INT)
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d031      	beq.n	8001e42 <HAL_GPIO_EXTI_Callback+0xde>
			{
				// читаем флаги прерываний �?окета 1
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_IR);
 8001dde:	2202      	movs	r2, #2
 8001de0:	2128      	movs	r1, #40	; 0x28
 8001de2:	483c      	ldr	r0, [pc, #240]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001de4:	f7fe fa8b 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 8001dec:	7bbb      	ldrb	r3, [r7, #14]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d011      	beq.n	8001e1a <HAL_GPIO_EXTI_Callback+0xb6>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET1, receiveSocket1data, &sizeOfReceiveSocket1data);
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <HAL_GPIO_EXTI_Callback+0x184>)
 8001df8:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <HAL_GPIO_EXTI_Callback+0x188>)
 8001dfa:	2128      	movs	r1, #40	; 0x28
 8001dfc:	4835      	ldr	r0, [pc, #212]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001dfe:	f7fe fc54 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket1dataReady = true;
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
					needsTransmitTCP = true;
 8001e08:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x190>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_RECV, W5500_Sn_IR);
 8001e0e:	2302      	movs	r3, #2
 8001e10:	2204      	movs	r2, #4
 8001e12:	2128      	movs	r1, #40	; 0x28
 8001e14:	482f      	ldr	r0, [pc, #188]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001e16:	f7fe fae4 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				if (valueSn_IR & W5500_Sn_IR_CON) // �?оединение �? пиром у�?пешно у�?тановлено
				{

				}

				if (valueSn_IR & W5500_Sn_IR_DISCON) // от пира получен пакет FIN или FIN/ACK
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00e      	beq.n	8001e42 <HAL_GPIO_EXTI_Callback+0xde>
				{
					// отправл�?ем команду DISCONNECT
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 8001e24:	2301      	movs	r3, #1
 8001e26:	2208      	movs	r2, #8
 8001e28:	2128      	movs	r1, #40	; 0x28
 8001e2a:	482a      	ldr	r0, [pc, #168]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001e2c:	f7fe fad9 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
					// у�?танавливаем флаг
					needsOpenTCP = true;
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0x194>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_DISCON, W5500_Sn_IR);
 8001e36:	2302      	movs	r3, #2
 8001e38:	2202      	movs	r2, #2
 8001e3a:	2128      	movs	r1, #40	; 0x28
 8001e3c:	4825      	ldr	r0, [pc, #148]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001e3e:	f7fe fad0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				{

				}
			}

			if (valueSIR & W5500_S2_INT)
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d03e      	beq.n	8001eca <HAL_GPIO_EXTI_Callback+0x166>
			{
				// читаем флаги прерываний �?окета 2
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_IR);
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	2148      	movs	r1, #72	; 0x48
 8001e50:	4820      	ldr	r0, [pc, #128]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001e52:	f7fe fa54 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001e56:	4603      	mov	r3, r0
 8001e58:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <HAL_GPIO_EXTI_Callback+0x11e>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET2, receiveSocket2data, &sizeOfReceiveSocket2data);
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_GPIO_EXTI_Callback+0x198>)
 8001e66:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001e68:	2148      	movs	r1, #72	; 0x48
 8001e6a:	481a      	ldr	r0, [pc, #104]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001e6c:	f7fe fc1d 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket2dataReady = true;
 8001e70:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
					//needsTransmitTCP = true;
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_RECV, W5500_Sn_IR);
 8001e76:	2302      	movs	r3, #2
 8001e78:	2204      	movs	r2, #4
 8001e7a:	2148      	movs	r1, #72	; 0x48
 8001e7c:	4815      	ldr	r0, [pc, #84]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001e7e:	f7fe fab0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				if (valueSn_IR & W5500_Sn_IR_SEND_OK) // команда SEND выполнена
				{

				}

				if (valueSn_IR & W5500_Sn_IR_CON) // �?оединение �? пиром у�?пешно у�?тановлено
 8001e82:	7bbb      	ldrb	r3, [r7, #14]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x13e>
				{
					ethernetA1.sendString(SOCKET2, text0);
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001e8e:	2148      	movs	r1, #72	; 0x48
 8001e90:	4810      	ldr	r0, [pc, #64]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001e92:	f7fe fc99 	bl	80007c8 <_ZN5W550010sendStringEhPc>
					// �?бра�?ываем флаг прерывани�? CON в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_CON, W5500_Sn_IR);
 8001e96:	2302      	movs	r3, #2
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2148      	movs	r1, #72	; 0x48
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001e9e:	f7fe faa0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				}

				if (valueSn_IR & W5500_Sn_IR_DISCON) // от пира получен пакет FIN или FIN/ACK
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00e      	beq.n	8001eca <HAL_GPIO_EXTI_Callback+0x166>
				{
					// отправл�?ем команду DISCONNECT
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 8001eac:	2301      	movs	r3, #1
 8001eae:	2208      	movs	r2, #8
 8001eb0:	2148      	movs	r1, #72	; 0x48
 8001eb2:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001eb4:	f7fe fa95 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
					// у�?танавливаем флаг
					needsOpenTelnet = true;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_DISCON, W5500_Sn_IR);
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	2148      	movs	r1, #72	; 0x48
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x170>)
 8001ec6:	f7fe fa8c 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
			}


		}
	}
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200023b0 	.word	0x200023b0
 8001ed8:	2000127e 	.word	0x2000127e
 8001edc:	20000a78 	.word	0x20000a78
 8001ee0:	20000a75 	.word	0x20000a75
 8001ee4:	20000a71 	.word	0x20000a71
 8001ee8:	20001a8a 	.word	0x20001a8a
 8001eec:	20001284 	.word	0x20001284
 8001ef0:	20001280 	.word	0x20001280
 8001ef4:	20000a72 	.word	0x20000a72
 8001ef8:	20000a73 	.word	0x20000a73
 8001efc:	20002296 	.word	0x20002296
 8001f00:	20001a90 	.word	0x20001a90
 8001f04:	20001a8c 	.word	0x20001a8c
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000a74 	.word	0x20000a74

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <Error_Handler+0x8>
	...

08001f1c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10e      	bne.n	8001f4a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d109      	bne.n	8001f4a <_Z41__static_initialization_and_destruction_0ii+0x2e>
W5500 ethernetA1(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);
 8001f36:	2310      	movs	r3, #16
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2320      	movs	r3, #32
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001f42:	490a      	ldr	r1, [pc, #40]	; (8001f6c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001f44:	480a      	ldr	r0, [pc, #40]	; (8001f70 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f46:	f7fe f909 	bl	800015c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d107      	bne.n	8001f60 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d102      	bne.n	8001f60 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f5c:	f7fe f92a 	bl	80001b4 <_ZN5W5500D1Ev>
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	20000634 	.word	0x20000634
 8001f70:	200023b0 	.word	0x200023b0

08001f74 <_GLOBAL__sub_I_hspi1>:
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff ffcd 	bl	8001f1c <_Z41__static_initialization_and_destruction_0ii>
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_GLOBAL__sub_D_hspi1>:
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff ffc5 	bl	8001f1c <_Z41__static_initialization_and_destruction_0ii>
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_MspInit+0x5c>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <HAL_MspInit+0x5c>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6193      	str	r3, [r2, #24]
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_MspInit+0x5c>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_MspInit+0x5c>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <HAL_MspInit+0x5c>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_MspInit+0x5c>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_MspInit+0x60>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_MspInit+0x60>)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000

08001ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_SPI_MspInit+0x98>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d137      	bne.n	8002088 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_SPI_MspInit+0x9c>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_SPI_MspInit+0x9c>)
 800201e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_SPI_MspInit+0x9c>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_SPI_MspInit+0x9c>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <HAL_SPI_MspInit+0x9c>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_SPI_MspInit+0x9c>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002048:	23a0      	movs	r3, #160	; 0xa0
 800204a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4619      	mov	r1, r3
 800205a:	480f      	ldr	r0, [pc, #60]	; (8002098 <HAL_SPI_MspInit+0xa0>)
 800205c:	f000 fd9e 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002060:	2340      	movs	r3, #64	; 0x40
 8002062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	4809      	ldr	r0, [pc, #36]	; (8002098 <HAL_SPI_MspInit+0xa0>)
 8002074:	f000 fd92 	bl	8002b9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2023      	movs	r0, #35	; 0x23
 800207e:	f000 faa6 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002082:	2023      	movs	r0, #35	; 0x23
 8002084:	f000 fabf 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40013000 	.word	0x40013000
 8002094:	40021000 	.word	0x40021000
 8002098:	40010800 	.word	0x40010800

0800209c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d114      	bne.n	80020d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a25      	ldr	r2, [pc, #148]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	201c      	movs	r0, #28
 80020cc:	f000 fa7f 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d0:	201c      	movs	r0, #28
 80020d2:	f000 fa98 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020d6:	e032      	b.n	800213e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_TIM_Base_MspInit+0xb0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d114      	bne.n	800210c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a18      	ldr	r2, [pc, #96]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	61d3      	str	r3, [r2, #28]
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	201d      	movs	r0, #29
 8002100:	f000 fa65 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002104:	201d      	movs	r0, #29
 8002106:	f000 fa7e 	bl	8002606 <HAL_NVIC_EnableIRQ>
}
 800210a:	e018      	b.n	800213e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_TIM_Base_MspInit+0xb4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d113      	bne.n	800213e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	61d3      	str	r3, [r2, #28]
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_TIM_Base_MspInit+0xac>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	201e      	movs	r0, #30
 8002134:	f000 fa4b 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002138:	201e      	movs	r0, #30
 800213a:	f000 fa64 	bl	8002606 <HAL_NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800

08002154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a20      	ldr	r2, [pc, #128]	; (80021f0 <HAL_UART_MspInit+0x9c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d139      	bne.n	80021e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002174:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_UART_MspInit+0xa0>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_UART_MspInit+0xa0>)
 800217a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_UART_MspInit+0xa0>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_UART_MspInit+0xa0>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_UART_MspInit+0xa0>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6193      	str	r3, [r2, #24]
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_UART_MspInit+0xa0>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	4619      	mov	r1, r3
 80021b8:	480f      	ldr	r0, [pc, #60]	; (80021f8 <HAL_UART_MspInit+0xa4>)
 80021ba:	f000 fcef 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4619      	mov	r1, r3
 80021d2:	4809      	ldr	r0, [pc, #36]	; (80021f8 <HAL_UART_MspInit+0xa4>)
 80021d4:	f000 fce2 	bl	8002b9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2025      	movs	r0, #37	; 0x25
 80021de:	f000 f9f6 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021e2:	2025      	movs	r0, #37	; 0x25
 80021e4:	f000 fa0f 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40010800 	.word	0x40010800

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002242:	f000 f8ad 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}

0800224a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 800224e:	2010      	movs	r0, #16
 8002250:	f000 fe40 	bl	8002ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM2_IRQHandler+0x10>)
 800225e:	f002 f841 	bl	80042e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000068c 	.word	0x2000068c

0800226c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM3_IRQHandler+0x10>)
 8002272:	f002 f837 	bl	80042e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200006d4 	.word	0x200006d4

08002280 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM4_IRQHandler+0x10>)
 8002286:	f002 f82d 	bl	80042e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000071c 	.word	0x2000071c

08002294 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <SPI1_IRQHandler+0x10>)
 800229a:	f001 fdb1 	bl	8003e00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000634 	.word	0x20000634

080022a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <USART1_IRQHandler+0x10>)
 80022ae:	f002 fc33 	bl	8004b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000764 	.word	0x20000764

080022bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ca:	490d      	ldr	r1, [pc, #52]	; (8002300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d0:	e002      	b.n	80022d8 <LoopCopyDataInit>

080022d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d6:	3304      	adds	r3, #4

080022d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022dc:	d3f9      	bcc.n	80022d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022e0:	4c0a      	ldr	r4, [pc, #40]	; (800230c <LoopFillZerobss+0x22>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e4:	e001      	b.n	80022ea <LoopFillZerobss>

080022e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e8:	3204      	adds	r2, #4

080022ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ec:	d3fb      	bcc.n	80022e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ee:	f7ff ffe5 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f2:	f003 f80d 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022f6:	f7fe fe79 	bl	8000fec <main>
  bx lr
 80022fa:	4770      	bx	lr
  ldr r0, =_sdata
 80022fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002300:	200004dc 	.word	0x200004dc
  ldr r2, =_sidata
 8002304:	080055c8 	.word	0x080055c8
  ldr r2, =_sbss
 8002308:	200004e0 	.word	0x200004e0
  ldr r4, =_ebss
 800230c:	200025e8 	.word	0x200025e8

08002310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002310:	e7fe      	b.n	8002310 <ADC1_2_IRQHandler>
	...

08002314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x28>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x28>)
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f947 	bl	80025b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f000 f808 	bl	8002340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fe30 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_InitTick+0x54>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f95f 	bl	8002622 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 f927 	bl	80025ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x5c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000046c 	.word	0x2000046c
 8002398:	20000474 	.word	0x20000474
 800239c:	20000470 	.word	0x20000470

080023a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_IncTick+0x1c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_IncTick+0x20>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_IncTick+0x20>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000474 	.word	0x20000474
 80023c0:	200025c0 	.word	0x200025c0

080023c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <HAL_GetTick+0x10>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	200025c0 	.word	0x200025c0

080023d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_GetTick>
 80023e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d005      	beq.n	80023fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_Delay+0x44>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fe:	bf00      	nop
 8002400:	f7ff ffe0 	bl	80023c4 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d8f7      	bhi.n	8002400 <HAL_Delay+0x28>
  {
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000474 	.word	0x20000474

08002420 <__NVIC_SetPriorityGrouping>:
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800244c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002452:	4a04      	ldr	r2, [pc, #16]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	60d3      	str	r3, [r2, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_GetPriorityGrouping>:
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_EnableIRQ>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4906      	ldr	r1, [pc, #24]	; (80024b8 <__NVIC_EnableIRQ+0x34>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	; (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002584:	d301      	bcc.n	800258a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002586:	2301      	movs	r3, #1
 8002588:	e00f      	b.n	80025aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <SysTick_Config+0x40>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002592:	210f      	movs	r1, #15
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f7ff ff90 	bl	80024bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <SysTick_Config+0x40>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <SysTick_Config+0x40>)
 80025a4:	2207      	movs	r2, #7
 80025a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	e000e010 	.word	0xe000e010

080025b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff2d 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e0:	f7ff ff42 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f7ff ff90 	bl	8002510 <NVIC_EncodePriority>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff5f 	bl	80024bc <__NVIC_SetPriority>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff35 	bl	8002484 <__NVIC_EnableIRQ>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ffa2 	bl	8002574 <SysTick_Config>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800264c:	2b02      	cmp	r3, #2
 800264e:	d008      	beq.n	8002662 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2204      	movs	r2, #4
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e020      	b.n	80026a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 020e 	bic.w	r2, r2, #14
 8002670:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d005      	beq.n	80026d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2204      	movs	r2, #4
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e051      	b.n	8002776 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020e 	bic.w	r2, r2, #14
 80026e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_DMA_Abort_IT+0xd0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d029      	beq.n	8002750 <HAL_DMA_Abort_IT+0xa0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a20      	ldr	r2, [pc, #128]	; (8002784 <HAL_DMA_Abort_IT+0xd4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_DMA_Abort_IT+0x9c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_DMA_Abort_IT+0xd8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d01a      	beq.n	8002746 <HAL_DMA_Abort_IT+0x96>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_DMA_Abort_IT+0xdc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d012      	beq.n	8002740 <HAL_DMA_Abort_IT+0x90>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <HAL_DMA_Abort_IT+0xe0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00a      	beq.n	800273a <HAL_DMA_Abort_IT+0x8a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <HAL_DMA_Abort_IT+0xe4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d102      	bne.n	8002734 <HAL_DMA_Abort_IT+0x84>
 800272e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002732:	e00e      	b.n	8002752 <HAL_DMA_Abort_IT+0xa2>
 8002734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002738:	e00b      	b.n	8002752 <HAL_DMA_Abort_IT+0xa2>
 800273a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273e:	e008      	b.n	8002752 <HAL_DMA_Abort_IT+0xa2>
 8002740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002744:	e005      	b.n	8002752 <HAL_DMA_Abort_IT+0xa2>
 8002746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800274a:	e002      	b.n	8002752 <HAL_DMA_Abort_IT+0xa2>
 800274c:	2310      	movs	r3, #16
 800274e:	e000      	b.n	8002752 <HAL_DMA_Abort_IT+0xa2>
 8002750:	2301      	movs	r3, #1
 8002752:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_DMA_Abort_IT+0xe8>)
 8002754:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
    } 
  }
  return status;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40020008 	.word	0x40020008
 8002784:	4002001c 	.word	0x4002001c
 8002788:	40020030 	.word	0x40020030
 800278c:	40020044 	.word	0x40020044
 8002790:	40020058 	.word	0x40020058
 8002794:	4002006c 	.word	0x4002006c
 8002798:	40020000 	.word	0x40020000

0800279c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HAL_FLASH_Program+0xd8>)
 80027b8:	7e1b      	ldrb	r3, [r3, #24]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_FLASH_Program+0x26>
 80027be:	2302      	movs	r3, #2
 80027c0:	e054      	b.n	800286c <HAL_FLASH_Program+0xd0>
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_FLASH_Program+0xd8>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027cc:	f000 f8a8 	bl	8002920 <FLASH_WaitForLastOperation>
 80027d0:	4603      	mov	r3, r0
 80027d2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d144      	bne.n	8002864 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d102      	bne.n	80027e6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	757b      	strb	r3, [r7, #21]
 80027e4:	e007      	b.n	80027f6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d102      	bne.n	80027f2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80027ec:	2302      	movs	r3, #2
 80027ee:	757b      	strb	r3, [r7, #21]
 80027f0:	e001      	b.n	80027f6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80027f2:	2304      	movs	r3, #4
 80027f4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	75bb      	strb	r3, [r7, #22]
 80027fa:	e02d      	b.n	8002858 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80027fc:	7dbb      	ldrb	r3, [r7, #22]
 80027fe:	005a      	lsls	r2, r3, #1
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	eb02 0c03 	add.w	ip, r2, r3
 8002806:	7dbb      	ldrb	r3, [r7, #22]
 8002808:	0119      	lsls	r1, r3, #4
 800280a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800280e:	f1c1 0620 	rsb	r6, r1, #32
 8002812:	f1a1 0020 	sub.w	r0, r1, #32
 8002816:	fa22 f401 	lsr.w	r4, r2, r1
 800281a:	fa03 f606 	lsl.w	r6, r3, r6
 800281e:	4334      	orrs	r4, r6
 8002820:	fa23 f000 	lsr.w	r0, r3, r0
 8002824:	4304      	orrs	r4, r0
 8002826:	fa23 f501 	lsr.w	r5, r3, r1
 800282a:	b2a3      	uxth	r3, r4
 800282c:	4619      	mov	r1, r3
 800282e:	4660      	mov	r0, ip
 8002830:	f000 f85a 	bl	80028e8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002834:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002838:	f000 f872 	bl	8002920 <FLASH_WaitForLastOperation>
 800283c:	4603      	mov	r3, r0
 800283e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_FLASH_Program+0xdc>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_FLASH_Program+0xdc>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d107      	bne.n	8002862 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002852:	7dbb      	ldrb	r3, [r7, #22]
 8002854:	3301      	adds	r3, #1
 8002856:	75bb      	strb	r3, [r7, #22]
 8002858:	7dba      	ldrb	r2, [r7, #22]
 800285a:	7d7b      	ldrb	r3, [r7, #21]
 800285c:	429a      	cmp	r2, r3
 800285e:	d3cd      	bcc.n	80027fc <HAL_FLASH_Program+0x60>
 8002860:	e000      	b.n	8002864 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002862:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_FLASH_Program+0xd8>)
 8002866:	2200      	movs	r2, #0
 8002868:	761a      	strb	r2, [r3, #24]

  return status;
 800286a:	7dfb      	ldrb	r3, [r7, #23]
}
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002874:	200025c8 	.word	0x200025c8
 8002878:	40022000 	.word	0x40022000

0800287c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_FLASH_Unlock+0x40>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_FLASH_Unlock+0x40>)
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <HAL_FLASH_Unlock+0x44>)
 8002896:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_FLASH_Unlock+0x40>)
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_FLASH_Unlock+0x48>)
 800289c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_FLASH_Unlock+0x40>)
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80028ae:	79fb      	ldrb	r3, [r7, #7]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000
 80028c0:	45670123 	.word	0x45670123
 80028c4:	cdef89ab 	.word	0xcdef89ab

080028c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_FLASH_Lock+0x1c>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_FLASH_Lock+0x1c>)
 80028d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40022000 	.word	0x40022000

080028e8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <FLASH_Program_HalfWord+0x30>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <FLASH_Program_HalfWord+0x34>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	4a07      	ldr	r2, [pc, #28]	; (800291c <FLASH_Program_HalfWord+0x34>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	887a      	ldrh	r2, [r7, #2]
 800290a:	801a      	strh	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	200025c8 	.word	0x200025c8
 800291c:	40022000 	.word	0x40022000

08002920 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff fd4c 	bl	80023c4 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800292e:	e010      	b.n	8002952 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002936:	d00c      	beq.n	8002952 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <FLASH_WaitForLastOperation+0x2e>
 800293e:	f7ff fd41 	bl	80023c4 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d201      	bcs.n	8002952 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e025      	b.n	800299e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <FLASH_WaitForLastOperation+0x88>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1e8      	bne.n	8002930 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <FLASH_WaitForLastOperation+0x88>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <FLASH_WaitForLastOperation+0x88>)
 800296c:	2220      	movs	r2, #32
 800296e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <FLASH_WaitForLastOperation+0x88>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <FLASH_WaitForLastOperation+0x88>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002988:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <FLASH_WaitForLastOperation+0x88>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002994:	f000 f80a 	bl	80029ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40022000 	.word	0x40022000

080029ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80029b6:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <FLASH_SetErrorCode+0x98>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <FLASH_SetErrorCode+0x9c>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <FLASH_SetErrorCode+0x9c>)
 80029cc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f043 0310 	orr.w	r3, r3, #16
 80029d4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <FLASH_SetErrorCode+0x98>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <FLASH_SetErrorCode+0x9c>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <FLASH_SetErrorCode+0x9c>)
 80029ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <FLASH_SetErrorCode+0x98>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <FLASH_SetErrorCode+0x9c>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	4a0f      	ldr	r2, [pc, #60]	; (8002a48 <FLASH_SetErrorCode+0x9c>)
 8002a0c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <FLASH_SetErrorCode+0x98>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <FLASH_SetErrorCode+0x98>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f240 1201 	movw	r2, #257	; 0x101
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d106      	bne.n	8002a32 <FLASH_SetErrorCode+0x86>
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <FLASH_SetErrorCode+0x98>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <FLASH_SetErrorCode+0x98>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	61d3      	str	r3, [r2, #28]
}  
 8002a30:	e002      	b.n	8002a38 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002a32:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <FLASH_SetErrorCode+0x98>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60d3      	str	r3, [r2, #12]
}  
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40022000 	.word	0x40022000
 8002a48:	200025c8 	.word	0x200025c8

08002a4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_FLASHEx_Erase+0xd0>)
 8002a60:	7e1b      	ldrb	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_FLASHEx_Erase+0x1e>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e053      	b.n	8002b12 <HAL_FLASHEx_Erase+0xc6>
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_FLASHEx_Erase+0xd0>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d116      	bne.n	8002aa6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002a78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a7c:	f7ff ff50 	bl	8002920 <FLASH_WaitForLastOperation>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d141      	bne.n	8002b0a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 f84c 	bl	8002b24 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a90:	f7ff ff46 	bl	8002920 <FLASH_WaitForLastOperation>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_FLASHEx_Erase+0xd4>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_FLASHEx_Erase+0xd4>)
 8002a9e:	f023 0304 	bic.w	r3, r3, #4
 8002aa2:	6113      	str	r3, [r2, #16]
 8002aa4:	e031      	b.n	8002b0a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002aa6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aaa:	f7ff ff39 	bl	8002920 <FLASH_WaitForLastOperation>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d12a      	bne.n	8002b0a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aba:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	e019      	b.n	8002af8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002ac4:	68b8      	ldr	r0, [r7, #8]
 8002ac6:	f000 f849 	bl	8002b5c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ace:	f7ff ff27 	bl	8002920 <FLASH_WaitForLastOperation>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_FLASHEx_Erase+0xd4>)
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <HAL_FLASHEx_Erase+0xd4>)
 8002adc:	f023 0302 	bic.w	r3, r3, #2
 8002ae0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	601a      	str	r2, [r3, #0]
            break;
 8002aee:	e00c      	b.n	8002b0a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	029a      	lsls	r2, r3, #10
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3dc      	bcc.n	8002ac4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <HAL_FLASHEx_Erase+0xd0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	761a      	strb	r2, [r3, #24]

  return status;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200025c8 	.word	0x200025c8
 8002b20:	40022000 	.word	0x40022000

08002b24 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <FLASH_MassErase+0x30>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <FLASH_MassErase+0x34>)
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <FLASH_MassErase+0x34>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <FLASH_MassErase+0x34>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <FLASH_MassErase+0x34>)
 8002b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b48:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	200025c8 	.word	0x200025c8
 8002b58:	40022000 	.word	0x40022000

08002b5c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <FLASH_PageErase+0x38>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <FLASH_PageErase+0x3c>)
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <FLASH_PageErase+0x3c>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <FLASH_PageErase+0x3c>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <FLASH_PageErase+0x3c>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <FLASH_PageErase+0x3c>)
 8002b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b86:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	200025c8 	.word	0x200025c8
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b08b      	sub	sp, #44	; 0x2c
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bae:	e169      	b.n	8002e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8158 	bne.w	8002e7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a9a      	ldr	r2, [pc, #616]	; (8002e3c <HAL_GPIO_Init+0x2a0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d05e      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bd8:	4a98      	ldr	r2, [pc, #608]	; (8002e3c <HAL_GPIO_Init+0x2a0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d875      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bde:	4a98      	ldr	r2, [pc, #608]	; (8002e40 <HAL_GPIO_Init+0x2a4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d058      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002be4:	4a96      	ldr	r2, [pc, #600]	; (8002e40 <HAL_GPIO_Init+0x2a4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d86f      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bea:	4a96      	ldr	r2, [pc, #600]	; (8002e44 <HAL_GPIO_Init+0x2a8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d052      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bf0:	4a94      	ldr	r2, [pc, #592]	; (8002e44 <HAL_GPIO_Init+0x2a8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d869      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002bf6:	4a94      	ldr	r2, [pc, #592]	; (8002e48 <HAL_GPIO_Init+0x2ac>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04c      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002bfc:	4a92      	ldr	r2, [pc, #584]	; (8002e48 <HAL_GPIO_Init+0x2ac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d863      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c02:	4a92      	ldr	r2, [pc, #584]	; (8002e4c <HAL_GPIO_Init+0x2b0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d046      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
 8002c08:	4a90      	ldr	r2, [pc, #576]	; (8002e4c <HAL_GPIO_Init+0x2b0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d85d      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c0e:	2b12      	cmp	r3, #18
 8002c10:	d82a      	bhi.n	8002c68 <HAL_GPIO_Init+0xcc>
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d859      	bhi.n	8002cca <HAL_GPIO_Init+0x12e>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <HAL_GPIO_Init+0x80>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c97 	.word	0x08002c97
 8002c20:	08002c71 	.word	0x08002c71
 8002c24:	08002c83 	.word	0x08002c83
 8002c28:	08002cc5 	.word	0x08002cc5
 8002c2c:	08002ccb 	.word	0x08002ccb
 8002c30:	08002ccb 	.word	0x08002ccb
 8002c34:	08002ccb 	.word	0x08002ccb
 8002c38:	08002ccb 	.word	0x08002ccb
 8002c3c:	08002ccb 	.word	0x08002ccb
 8002c40:	08002ccb 	.word	0x08002ccb
 8002c44:	08002ccb 	.word	0x08002ccb
 8002c48:	08002ccb 	.word	0x08002ccb
 8002c4c:	08002ccb 	.word	0x08002ccb
 8002c50:	08002ccb 	.word	0x08002ccb
 8002c54:	08002ccb 	.word	0x08002ccb
 8002c58:	08002ccb 	.word	0x08002ccb
 8002c5c:	08002ccb 	.word	0x08002ccb
 8002c60:	08002c79 	.word	0x08002c79
 8002c64:	08002c8d 	.word	0x08002c8d
 8002c68:	4a79      	ldr	r2, [pc, #484]	; (8002e50 <HAL_GPIO_Init+0x2b4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c6e:	e02c      	b.n	8002cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	623b      	str	r3, [r7, #32]
          break;
 8002c76:	e029      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	623b      	str	r3, [r7, #32]
          break;
 8002c80:	e024      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	3308      	adds	r3, #8
 8002c88:	623b      	str	r3, [r7, #32]
          break;
 8002c8a:	e01f      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	330c      	adds	r3, #12
 8002c92:	623b      	str	r3, [r7, #32]
          break;
 8002c94:	e01a      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	623b      	str	r3, [r7, #32]
          break;
 8002ca2:	e013      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cac:	2308      	movs	r3, #8
 8002cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	611a      	str	r2, [r3, #16]
          break;
 8002cb6:	e009      	b.n	8002ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	615a      	str	r2, [r3, #20]
          break;
 8002cc2:	e003      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x130>
          break;
 8002cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d801      	bhi.n	8002cd6 <HAL_GPIO_Init+0x13a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	e001      	b.n	8002cda <HAL_GPIO_Init+0x13e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2bff      	cmp	r3, #255	; 0xff
 8002ce0:	d802      	bhi.n	8002ce8 <HAL_GPIO_Init+0x14c>
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	e002      	b.n	8002cee <HAL_GPIO_Init+0x152>
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	3b08      	subs	r3, #8
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	210f      	movs	r1, #15
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80b1 	beq.w	8002e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a4c      	ldr	r2, [pc, #304]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_GPIO_Init+0x2b8>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d34:	4a48      	ldr	r2, [pc, #288]	; (8002e58 <HAL_GPIO_Init+0x2bc>)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <HAL_GPIO_Init+0x2c0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d013      	beq.n	8002d88 <HAL_GPIO_Init+0x1ec>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3f      	ldr	r2, [pc, #252]	; (8002e60 <HAL_GPIO_Init+0x2c4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00d      	beq.n	8002d84 <HAL_GPIO_Init+0x1e8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	; (8002e64 <HAL_GPIO_Init+0x2c8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <HAL_GPIO_Init+0x1e4>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <HAL_GPIO_Init+0x2cc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_GPIO_Init+0x1e0>
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e006      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e004      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e002      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_GPIO_Init+0x1ee>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	f002 0203 	and.w	r2, r2, #3
 8002d90:	0092      	lsls	r2, r2, #2
 8002d92:	4093      	lsls	r3, r2
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d9a:	492f      	ldr	r1, [pc, #188]	; (8002e58 <HAL_GPIO_Init+0x2bc>)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	492c      	ldr	r1, [pc, #176]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4928      	ldr	r1, [pc, #160]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4922      	ldr	r1, [pc, #136]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
 8002de8:	e006      	b.n	8002df8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	491e      	ldr	r1, [pc, #120]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4918      	ldr	r1, [pc, #96]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4914      	ldr	r1, [pc, #80]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d021      	beq.n	8002e70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_GPIO_Init+0x2d0>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
 8002e38:	e021      	b.n	8002e7e <HAL_GPIO_Init+0x2e2>
 8002e3a:	bf00      	nop
 8002e3c:	10320000 	.word	0x10320000
 8002e40:	10310000 	.word	0x10310000
 8002e44:	10220000 	.word	0x10220000
 8002e48:	10210000 	.word	0x10210000
 8002e4c:	10120000 	.word	0x10120000
 8002e50:	10110000 	.word	0x10110000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40010800 	.word	0x40010800
 8002e60:	40010c00 	.word	0x40010c00
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40011400 	.word	0x40011400
 8002e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	4909      	ldr	r1, [pc, #36]	; (8002ea0 <HAL_GPIO_Init+0x304>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	3301      	adds	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f47f ae8e 	bne.w	8002bb0 <HAL_GPIO_Init+0x14>
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	372c      	adds	r7, #44	; 0x2c
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ec0:	e003      	b.n	8002eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	041a      	lsls	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe ff36 	bl	8001d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40010400 	.word	0x40010400

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e272      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8087 	beq.w	8003032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f24:	4b92      	ldr	r3, [pc, #584]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d00c      	beq.n	8002f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f30:	4b8f      	ldr	r3, [pc, #572]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06c      	beq.n	8003030 <HAL_RCC_OscConfig+0x12c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d168      	bne.n	8003030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e24c      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x76>
 8002f6c:	4b80      	ldr	r3, [pc, #512]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a7f      	ldr	r2, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e02e      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b7b      	ldr	r3, [pc, #492]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7a      	ldr	r2, [pc, #488]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b78      	ldr	r3, [pc, #480]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a77      	ldr	r2, [pc, #476]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xbc>
 8002fa6:	4b72      	ldr	r3, [pc, #456]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a71      	ldr	r2, [pc, #452]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6e      	ldr	r2, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002fc0:	4b6b      	ldr	r3, [pc, #428]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a67      	ldr	r2, [pc, #412]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7ff f9f0 	bl	80023c4 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7ff f9ec 	bl	80023c4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e200      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe4>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7ff f9dc 	bl	80023c4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7ff f9d8 	bl	80023c4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1ec      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x10c>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800304a:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x18c>
 8003056:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b43      	ldr	r3, [pc, #268]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x176>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1c0      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4939      	ldr	r1, [pc, #228]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x270>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7ff f991 	bl	80023c4 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a6:	f7ff f98d 	bl	80023c4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1a1      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4927      	ldr	r1, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCC_OscConfig+0x270>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7ff f970 	bl	80023c4 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7ff f96c 	bl	80023c4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e180      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03a      	beq.n	8003188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d019      	beq.n	800314e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_RCC_OscConfig+0x274>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7ff f950 	bl	80023c4 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7ff f94c 	bl	80023c4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e160      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_RCC_OscConfig+0x26c>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003146:	2001      	movs	r0, #1
 8003148:	f000 fada 	bl	8003700 <RCC_Delay>
 800314c:	e01c      	b.n	8003188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_RCC_OscConfig+0x274>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003154:	f7ff f936 	bl	80023c4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315a:	e00f      	b.n	800317c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315c:	f7ff f932 	bl	80023c4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d908      	bls.n	800317c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e146      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	42420000 	.word	0x42420000
 8003178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	4b92      	ldr	r3, [pc, #584]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e9      	bne.n	800315c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a6 	beq.w	80032e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319a:	4b8b      	ldr	r3, [pc, #556]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a87      	ldr	r2, [pc, #540]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]
 80031b2:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d118      	bne.n	8003200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b7f      	ldr	r3, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7e      	ldr	r2, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7ff f8f3 	bl	80023c4 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7ff f8ef 	bl	80023c4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e103      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b75      	ldr	r3, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x4c8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x312>
 8003208:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a6e      	ldr	r2, [pc, #440]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e02d      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x334>
 800321e:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6213      	str	r3, [r2, #32]
 800322a:	4b67      	ldr	r3, [pc, #412]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a66      	ldr	r2, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	e01c      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x356>
 8003240:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4a60      	ldr	r2, [pc, #384]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	4b5e      	ldr	r3, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a5d      	ldr	r2, [pc, #372]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	e00b      	b.n	8003272 <HAL_RCC_OscConfig+0x36e>
 800325a:	4b5b      	ldr	r3, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	4a5a      	ldr	r2, [pc, #360]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	f023 0301 	bic.w	r3, r3, #1
 8003264:	6213      	str	r3, [r2, #32]
 8003266:	4b58      	ldr	r3, [pc, #352]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a57      	ldr	r2, [pc, #348]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d015      	beq.n	80032a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7ff f8a3 	bl	80023c4 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7ff f89f 	bl	80023c4 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0b1      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	4b4b      	ldr	r3, [pc, #300]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ee      	beq.n	8003282 <HAL_RCC_OscConfig+0x37e>
 80032a4:	e014      	b.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a6:	f7ff f88d 	bl	80023c4 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7ff f889 	bl	80023c4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e09b      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b3c      	ldr	r3, [pc, #240]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a3b      	ldr	r2, [pc, #236]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8087 	beq.w	80033fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d061      	beq.n	80033bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d146      	bne.n	800338e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7ff f85d 	bl	80023c4 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7ff f859 	bl	80023c4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e06d      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d108      	bne.n	8003348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003336:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	4921      	ldr	r1, [pc, #132]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a19      	ldr	r1, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	430b      	orrs	r3, r1
 800335a:	491b      	ldr	r1, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7ff f82d 	bl	80023c4 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7ff f829 	bl	80023c4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e03d      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x46a>
 800338c:	e035      	b.n	80033fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x4cc>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7ff f816 	bl	80023c4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7ff f812 	bl	80023c4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e026      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x498>
 80033ba:	e01e      	b.n	80033fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e019      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x500>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0d0      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b6a      	ldr	r3, [pc, #424]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b67      	ldr	r3, [pc, #412]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	4965      	ldr	r1, [pc, #404]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0b8      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800346e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	494d      	ldr	r1, [pc, #308]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d040      	beq.n	8003528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d115      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07f      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e073      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4936      	ldr	r1, [pc, #216]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f8:	f7fe ff64 	bl	80023c4 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe ff60 	bl	80023c4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e053      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d210      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0207 	bic.w	r2, r3, #7
 800353e:	4922      	ldr	r1, [pc, #136]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e032      	b.n	80035be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4916      	ldr	r1, [pc, #88]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	490e      	ldr	r1, [pc, #56]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003596:	f000 f821 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490a      	ldr	r1, [pc, #40]	; (80035d0 <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1cc>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1d0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fec2 	bl	8002340 <HAL_InitTick>

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40022000 	.word	0x40022000
 80035cc:	40021000 	.word	0x40021000
 80035d0:	0800549c 	.word	0x0800549c
 80035d4:	2000046c 	.word	0x2000046c
 80035d8:	20000470 	.word	0x20000470

080035dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035dc:	b490      	push	{r4, r7}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCC_GetSysClockFreq+0xac>)
 80035e4:	1d3c      	adds	r4, r7, #4
 80035e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035ec:	f240 2301 	movw	r3, #513	; 0x201
 80035f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003606:	4b21      	ldr	r3, [pc, #132]	; (800368c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b04      	cmp	r3, #4
 8003614:	d002      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0x40>
 8003616:	2b08      	cmp	r3, #8
 8003618:	d003      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x46>
 800361a:	e02b      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb4>)
 800361e:	623b      	str	r3, [r7, #32]
      break;
 8003620:	e02b      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	0c9b      	lsrs	r3, r3, #18
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3328      	adds	r3, #40	; 0x28
 800362c:	443b      	add	r3, r7
 800362e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003632:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	0c5b      	lsrs	r3, r3, #17
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	3328      	adds	r3, #40	; 0x28
 800364a:	443b      	add	r3, r7
 800364c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003650:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003656:	fb03 f202 	mul.w	r2, r3, r2
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
 8003662:	e004      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	623b      	str	r3, [r7, #32]
      break;
 8003672:	e002      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003676:	623b      	str	r3, [r7, #32]
      break;
 8003678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367a:	6a3b      	ldr	r3, [r7, #32]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc90      	pop	{r4, r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	0800548c 	.word	0x0800548c
 800368c:	40021000 	.word	0x40021000
 8003690:	00b71b00 	.word	0x00b71b00
 8003694:	003d0900 	.word	0x003d0900
 8003698:	007a1200 	.word	0x007a1200

0800369c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b02      	ldr	r3, [pc, #8]	; (80036ac <HAL_RCC_GetHCLKFreq+0x10>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	2000046c 	.word	0x2000046c

080036b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b4:	f7ff fff2 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	080054ac 	.word	0x080054ac

080036d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036dc:	f7ff ffde 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	0adb      	lsrs	r3, r3, #11
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4903      	ldr	r1, [pc, #12]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021000 	.word	0x40021000
 80036fc:	080054ac 	.word	0x080054ac

08003700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <RCC_Delay+0x34>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <RCC_Delay+0x38>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0a5b      	lsrs	r3, r3, #9
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800371c:	bf00      	nop
  }
  while (Delay --);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	60fa      	str	r2, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f9      	bne.n	800371c <RCC_Delay+0x1c>
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	2000046c 	.word	0x2000046c
 8003738:	10624dd3 	.word	0x10624dd3

0800373c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e076      	b.n	800383c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375e:	d009      	beq.n	8003774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]
 8003766:	e005      	b.n	8003774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fe fc32 	bl	8001ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	ea42 0103 	orr.w	r1, r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	0c1a      	lsrs	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f002 0204 	and.w	r2, r2, #4
 800381a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_SPI_Transmit+0x22>
 8003862:	2302      	movs	r3, #2
 8003864:	e126      	b.n	8003ab4 <HAL_SPI_Transmit+0x270>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386e:	f7fe fda9 	bl	80023c4 <HAL_GetTick>
 8003872:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d002      	beq.n	800388a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003884:	2302      	movs	r3, #2
 8003886:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003888:	e10b      	b.n	8003aa2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_Transmit+0x52>
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	77fb      	strb	r3, [r7, #31]
    goto error;
 800389a:	e102      	b.n	8003aa2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2203      	movs	r2, #3
 80038a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e2:	d10f      	bne.n	8003904 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003902:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d007      	beq.n	8003922 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392a:	d14b      	bne.n	80039c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_SPI_Transmit+0xf6>
 8003934:	8afb      	ldrh	r3, [r7, #22]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d13e      	bne.n	80039b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	881a      	ldrh	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	1c9a      	adds	r2, r3, #2
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800395e:	e02b      	b.n	80039b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d112      	bne.n	8003994 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	881a      	ldrh	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	1c9a      	adds	r2, r3, #2
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	86da      	strh	r2, [r3, #54]	; 0x36
 8003992:	e011      	b.n	80039b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003994:	f7fe fd16 	bl	80023c4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d803      	bhi.n	80039ac <HAL_SPI_Transmit+0x168>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039aa:	d102      	bne.n	80039b2 <HAL_SPI_Transmit+0x16e>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039b6:	e074      	b.n	8003aa2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ce      	bne.n	8003960 <HAL_SPI_Transmit+0x11c>
 80039c2:	e04c      	b.n	8003a5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_SPI_Transmit+0x18e>
 80039cc:	8afb      	ldrh	r3, [r7, #22]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d140      	bne.n	8003a54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	7812      	ldrb	r2, [r2, #0]
 80039de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039f8:	e02c      	b.n	8003a54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d113      	bne.n	8003a30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	7812      	ldrb	r2, [r2, #0]
 8003a14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a2e:	e011      	b.n	8003a54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a30:	f7fe fcc8 	bl	80023c4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d803      	bhi.n	8003a48 <HAL_SPI_Transmit+0x204>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d102      	bne.n	8003a4e <HAL_SPI_Transmit+0x20a>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a52:	e026      	b.n	8003aa2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1cd      	bne.n	80039fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	6839      	ldr	r1, [r7, #0]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fb58 	bl	8004118 <SPI_EndRxTxTransaction>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	77fb      	strb	r3, [r7, #31]
 8003a9e:	e000      	b.n	8003aa2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003aa0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3720      	adds	r7, #32
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08c      	sub	sp, #48	; 0x30
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003aca:	2301      	movs	r3, #1
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x26>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e18a      	b.n	8003df8 <HAL_SPI_TransmitReceive+0x33c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aea:	f7fe fc6b 	bl	80023c4 <HAL_GetTick>
 8003aee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d00f      	beq.n	8003b2c <HAL_SPI_TransmitReceive+0x70>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d107      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d103      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x68>
 8003b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d003      	beq.n	8003b2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b2a:	e15b      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x82>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x82>
 8003b38:	887b      	ldrh	r3, [r7, #2]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b44:	e14e      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d003      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2205      	movs	r2, #5
 8003b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	887a      	ldrh	r2, [r7, #2]
 8003b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	887a      	ldrh	r2, [r7, #2]
 8003b70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	887a      	ldrh	r2, [r7, #2]
 8003b82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d007      	beq.n	8003bae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb6:	d178      	bne.n	8003caa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_SPI_TransmitReceive+0x10a>
 8003bc0:	8b7b      	ldrh	r3, [r7, #26]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d166      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	881a      	ldrh	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	1c9a      	adds	r2, r3, #2
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bea:	e053      	b.n	8003c94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d11b      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0x176>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d016      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x176>
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d113      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d119      	bne.n	8003c74 <HAL_SPI_TransmitReceive+0x1b8>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d014      	beq.n	8003c74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	b292      	uxth	r2, r2
 8003c56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c70:	2301      	movs	r3, #1
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c74:	f7fe fba6 	bl	80023c4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d807      	bhi.n	8003c94 <HAL_SPI_TransmitReceive+0x1d8>
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d003      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c92:	e0a7      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1a6      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x130>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1a1      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x130>
 8003ca8:	e07c      	b.n	8003da4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x1fc>
 8003cb2:	8b7b      	ldrh	r3, [r7, #26]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d16b      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	7812      	ldrb	r2, [r2, #0]
 8003cc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cde:	e057      	b.n	8003d90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d11c      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x26c>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d017      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x26c>
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d114      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d119      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x2ae>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d014      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d66:	2301      	movs	r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d6a:	f7fe fb2b 	bl	80023c4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d803      	bhi.n	8003d82 <HAL_SPI_TransmitReceive+0x2c6>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d102      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x2cc>
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d8e:	e029      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1a2      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x224>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d19d      	bne.n	8003ce0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f9b5 	bl	8004118 <SPI_EndRxTxTransaction>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003dc0:	e010      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	e000      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003de2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003df4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3730      	adds	r7, #48	; 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10f      	bne.n	8003e44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
    return;
 8003e42:	e0be      	b.n	8003fc2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_SPI_IRQHandler+0x66>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	09db      	lsrs	r3, r3, #7
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
    return;
 8003e64:	e0ad      	b.n	8003fc2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_SPI_IRQHandler+0x80>
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80a1 	beq.w	8003fc2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 809a 	beq.w	8003fc2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d023      	beq.n	8003ee2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d011      	beq.n	8003eca <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 0204 	orr.w	r2, r3, #4
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	e00b      	b.n	8003ee2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	693b      	ldr	r3, [r7, #16]
        return;
 8003ee0:	e06f      	b.n	8003fc2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d014      	beq.n	8003f18 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f043 0201 	orr.w	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d04f      	beq.n	8003fc0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f2e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <HAL_SPI_IRQHandler+0x14c>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d034      	beq.n	8003fb6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0203 	bic.w	r2, r2, #3
 8003f5a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d011      	beq.n	8003f88 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f68:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <HAL_SPI_IRQHandler+0x1c8>)
 8003f6a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fb9d 	bl	80026b0 <HAL_DMA_Abort_IT>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d016      	beq.n	8003fbe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <HAL_SPI_IRQHandler+0x1c8>)
 8003f96:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe fb87 	bl	80026b0 <HAL_DMA_Abort_IT>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003fb4:	e003      	b.n	8003fbe <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f808 	bl	8003fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003fbc:	e000      	b.n	8003fc0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003fbe:	bf00      	nop
    return;
 8003fc0:	bf00      	nop
  }
}
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	08003fdf 	.word	0x08003fdf

08003fcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ffe7 	bl	8003fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004018:	f7fe f9d4 	bl	80023c4 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	4413      	add	r3, r2
 8004026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004028:	f7fe f9cc 	bl	80023c4 <HAL_GetTick>
 800402c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800402e:	4b39      	ldr	r3, [pc, #228]	; (8004114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	015b      	lsls	r3, r3, #5
 8004034:	0d1b      	lsrs	r3, r3, #20
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403e:	e054      	b.n	80040ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d050      	beq.n	80040ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004048:	f7fe f9bc 	bl	80023c4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	429a      	cmp	r2, r3
 8004056:	d902      	bls.n	800405e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d13d      	bne.n	80040da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800406c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004076:	d111      	bne.n	800409c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004080:	d004      	beq.n	800408c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408a:	d107      	bne.n	800409c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a4:	d10f      	bne.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e017      	b.n	800410a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4013      	ands	r3, r2
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	429a      	cmp	r2, r3
 8004106:	d19b      	bne.n	8004040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	2000046c 	.word	0x2000046c

08004118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2200      	movs	r2, #0
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff ff6a 	bl	8004008 <SPI_WaitFlagStateUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e000      	b.n	800414c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e041      	b.n	80041ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd ff8e 	bl	800209c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f000 fa96 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	f241 1311 	movw	r3, #4369	; 0x1111
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <HAL_TIM_Base_Stop+0x38>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	f240 4344 	movw	r3, #1092	; 0x444
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <HAL_TIM_Base_Stop+0x38>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
	...

08004240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d001      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e03a      	b.n	80042ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <HAL_TIM_Base_Start_IT+0x98>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x58>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d009      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x58>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <HAL_TIM_Base_Start_IT+0x9c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x58>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d111      	bne.n	80042bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d010      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	e007      	b.n	80042cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800

080042e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0202 	mvn.w	r2, #2
 8004310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f9b1 	bl	800468e <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f9a4 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f9b3 	bl	80046a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b04      	cmp	r3, #4
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0204 	mvn.w	r2, #4
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f987 	bl	800468e <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f97a 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f989 	bl	80046a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0208 	mvn.w	r2, #8
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f95d 	bl	800468e <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f950 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f95f 	bl	80046a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b10      	cmp	r3, #16
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0210 	mvn.w	r2, #16
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2208      	movs	r2, #8
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f933 	bl	800468e <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f926 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f935 	bl	80046a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0201 	mvn.w	r2, #1
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fd fc2c 	bl	8001cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b80      	cmp	r3, #128	; 0x80
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b80      	cmp	r3, #128	; 0x80
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa77 	bl	8004982 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8f9 	bl	80046b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d10e      	bne.n	80044ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d107      	bne.n	80044ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0220 	mvn.w	r2, #32
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa42 	bl	8004970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIM_ConfigClockSource+0x18>
 8004508:	2302      	movs	r3, #2
 800450a:	e0b3      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x180>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800452a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d03e      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0xd0>
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	f200 8087 	bhi.w	800465c <HAL_TIM_ConfigClockSource+0x168>
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	f000 8085 	beq.w	8004660 <HAL_TIM_ConfigClockSource+0x16c>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d87f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x168>
 800455c:	2b70      	cmp	r3, #112	; 0x70
 800455e:	d01a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xa2>
 8004560:	2b70      	cmp	r3, #112	; 0x70
 8004562:	d87b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x168>
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d050      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x116>
 8004568:	2b60      	cmp	r3, #96	; 0x60
 800456a:	d877      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x168>
 800456c:	2b50      	cmp	r3, #80	; 0x50
 800456e:	d03c      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xf6>
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d873      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x168>
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d058      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x136>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d86f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x168>
 800457c:	2b30      	cmp	r3, #48	; 0x30
 800457e:	d064      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x156>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d86b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x168>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d060      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x156>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d867      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x168>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x156>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d05a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004594:	e062      	b.n	800465c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f000 f966 	bl	8004876 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	609a      	str	r2, [r3, #8]
      break;
 80045c2:	e04e      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f000 f94f 	bl	8004876 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e6:	609a      	str	r2, [r3, #8]
      break;
 80045e8:	e03b      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 f8c6 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2150      	movs	r1, #80	; 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f91d 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 8004608:	e02b      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	461a      	mov	r2, r3
 8004618:	f000 f8e4 	bl	80047e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2160      	movs	r1, #96	; 0x60
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f90d 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 8004628:	e01b      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	461a      	mov	r2, r3
 8004638:	f000 f8a6 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f8fd 	bl	8004842 <TIM_ITRx_SetConfig>
      break;
 8004648:	e00b      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 f8f4 	bl	8004842 <TIM_ITRx_SetConfig>
        break;
 800465a:	e002      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004660:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a29      	ldr	r2, [pc, #164]	; (800477c <TIM_Base_SetConfig+0xb8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00b      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d007      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a26      	ldr	r2, [pc, #152]	; (8004780 <TIM_Base_SetConfig+0xbc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_Base_SetConfig+0x30>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a25      	ldr	r2, [pc, #148]	; (8004784 <TIM_Base_SetConfig+0xc0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d108      	bne.n	8004706 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1c      	ldr	r2, [pc, #112]	; (800477c <TIM_Base_SetConfig+0xb8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <TIM_Base_SetConfig+0xbc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a18      	ldr	r2, [pc, #96]	; (8004784 <TIM_Base_SetConfig+0xc0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a07      	ldr	r2, [pc, #28]	; (800477c <TIM_Base_SetConfig+0xb8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	615a      	str	r2, [r3, #20]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800

08004788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 030a 	bic.w	r3, r3, #10
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f023 0210 	bic.w	r2, r3, #16
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800480e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	031b      	lsls	r3, r3, #12
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004820:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	621a      	str	r2, [r3, #32]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	f043 0307 	orr.w	r3, r3, #7
 8004864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004876:	b480      	push	{r7}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004890:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	021a      	lsls	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	431a      	orrs	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	609a      	str	r2, [r3, #8]
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e046      	b.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d009      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10c      	bne.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800

08004970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e03f      	b.n	8004a26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fd fbca 	bl	8002154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fc01 	bl	80051e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d130      	bne.n	8004aaa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_UART_Transmit_IT+0x26>
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e029      	b.n	8004aac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Transmit_IT+0x38>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e022      	b.n	8004aac <HAL_UART_Transmit_IT+0x7e>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2221      	movs	r2, #33	; 0x21
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aa4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d11d      	bne.n	8004b0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_Receive_IT+0x26>
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e016      	b.n	8004b0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_UART_Receive_IT+0x38>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e00f      	b.n	8004b0e <HAL_UART_Receive_IT+0x58>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f9e3 	bl	8004ece <UART_Start_Receive_IT>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	e000      	b.n	8004b0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10d      	bne.n	8004b6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_UART_IRQHandler+0x52>
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa93 	bl	800508e <UART_Receive_IT>
      return;
 8004b68:	e17b      	b.n	8004e62 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80b1 	beq.w	8004cd4 <HAL_UART_IRQHandler+0x1bc>
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_UART_IRQHandler+0x70>
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a6 	beq.w	8004cd4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x90>
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xb0>
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	f043 0202 	orr.w	r2, r3, #2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_UART_IRQHandler+0xd0>
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00f      	beq.n	8004c12 <HAL_UART_IRQHandler+0xfa>
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_UART_IRQHandler+0xee>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0208 	orr.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 811e 	beq.w	8004e58 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_UART_IRQHandler+0x11e>
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa2c 	bl	800508e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <HAL_UART_IRQHandler+0x146>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d031      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f96e 	bl	8004f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d023      	beq.n	8004cba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	4a76      	ldr	r2, [pc, #472]	; (8004e68 <HAL_UART_IRQHandler+0x350>)
 8004c90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fd fd0a 	bl	80026b0 <HAL_DMA_Abort_IT>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cac:	4610      	mov	r0, r2
 8004cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	e00e      	b.n	8004cd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8da 	bl	8004e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e00a      	b.n	8004cd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f8d6 	bl	8004e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	e006      	b.n	8004cd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8d2 	bl	8004e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cce:	e0c3      	b.n	8004e58 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd0:	bf00      	nop
    return;
 8004cd2:	e0c1      	b.n	8004e58 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 80a1 	bne.w	8004e20 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 809b 	beq.w	8004e20 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8095 	beq.w	8004e20 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d04e      	beq.n	8004db8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d24:	8a3b      	ldrh	r3, [r7, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8098 	beq.w	8004e5c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d30:	8a3a      	ldrh	r2, [r7, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	f080 8092 	bcs.w	8004e5c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8a3a      	ldrh	r2, [r7, #16]
 8004d3c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d02b      	beq.n	8004da0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d56:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695a      	ldr	r2, [r3, #20]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d76:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0210 	bic.w	r2, r2, #16
 8004d94:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fd fc4d 	bl	800263a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f864 	bl	8004e7e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004db6:	e051      	b.n	8004e5c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d047      	beq.n	8004e60 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004dd0:	8a7b      	ldrh	r3, [r7, #18]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d044      	beq.n	8004e60 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004de4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0210 	bic.w	r2, r2, #16
 8004e12:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e14:	8a7b      	ldrh	r3, [r7, #18]
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f830 	bl	8004e7e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e1e:	e01f      	b.n	8004e60 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_UART_IRQHandler+0x324>
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f8c3 	bl	8004fc0 <UART_Transmit_IT>
    return;
 8004e3a:	e012      	b.n	8004e62 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <HAL_UART_IRQHandler+0x34a>
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f904 	bl	800505e <UART_EndTransmit_IT>
    return;
 8004e56:	e004      	b.n	8004e62 <HAL_UART_IRQHandler+0x34a>
    return;
 8004e58:	bf00      	nop
 8004e5a:	e002      	b.n	8004e62 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e5c:	bf00      	nop
 8004e5e:	e000      	b.n	8004e62 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e60:	bf00      	nop
  }
}
 8004e62:	3728      	adds	r7, #40	; 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	08004f99 	.word	0x08004f99

08004e6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	b2db      	uxtb	r3, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	88fa      	ldrh	r2, [r7, #6]
 8004eec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2222      	movs	r2, #34	; 0x22
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f12:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0220 	orr.w	r2, r2, #32
 8004f32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695a      	ldr	r2, [r3, #20]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d107      	bne.n	8004f80 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0210 	bic.w	r2, r2, #16
 8004f7e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff ff5a 	bl	8004e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b21      	cmp	r3, #33	; 0x21
 8004fd2:	d13e      	bne.n	8005052 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fdc:	d114      	bne.n	8005008 <UART_Transmit_IT+0x48>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d110      	bne.n	8005008 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ffa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]
 8005006:	e008      	b.n	800501a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6211      	str	r1, [r2, #32]
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4619      	mov	r1, r3
 8005028:	84d1      	strh	r1, [r2, #38]	; 0x26
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800503c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800504c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	e000      	b.n	8005054 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005052:	2302      	movs	r3, #2
  }
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr

0800505e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005074:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fc fe08 	bl	8001c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b22      	cmp	r3, #34	; 0x22
 80050a0:	f040 8099 	bne.w	80051d6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ac:	d117      	bne.n	80050de <UART_Receive_IT+0x50>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d113      	bne.n	80050de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
 80050dc:	e026      	b.n	800512c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f0:	d007      	beq.n	8005102 <UART_Receive_IT+0x74>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <UART_Receive_IT+0x82>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e008      	b.n	8005122 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511c:	b2da      	uxtb	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29b      	uxth	r3, r3
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4619      	mov	r1, r3
 800513a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800513c:	2b00      	cmp	r3, #0
 800513e:	d148      	bne.n	80051d2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0220 	bic.w	r2, r2, #32
 800514e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800515e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	2b01      	cmp	r3, #1
 800517e:	d123      	bne.n	80051c8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0210 	bic.w	r2, r2, #16
 8005194:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d10a      	bne.n	80051ba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fe5c 	bl	8004e7e <HAL_UARTEx_RxEventCallback>
 80051c6:	e002      	b.n	80051ce <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fc fd27 	bl	8001c1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e002      	b.n	80051d8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e000      	b.n	80051d8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
  }
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800521a:	f023 030c 	bic.w	r3, r3, #12
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	430b      	orrs	r3, r1
 8005226:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <UART_SetConfig+0x114>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d103      	bne.n	8005250 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005248:	f7fe fa46 	bl	80036d8 <HAL_RCC_GetPCLK2Freq>
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	e002      	b.n	8005256 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005250:	f7fe fa2e 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8005254:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009a      	lsls	r2, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <UART_SetConfig+0x118>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	0119      	lsls	r1, r3, #4
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	009a      	lsls	r2, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	fbb2 f2f3 	udiv	r2, r2, r3
 800528c:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <UART_SetConfig+0x118>)
 800528e:	fba3 0302 	umull	r0, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2064      	movs	r0, #100	; 0x64
 8005296:	fb00 f303 	mul.w	r3, r0, r3
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	3332      	adds	r3, #50	; 0x32
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <UART_SetConfig+0x118>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ac:	4419      	add	r1, r3
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009a      	lsls	r2, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <UART_SetConfig+0x118>)
 80052c6:	fba3 0302 	umull	r0, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	2064      	movs	r0, #100	; 0x64
 80052ce:	fb00 f303 	mul.w	r3, r0, r3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	3332      	adds	r3, #50	; 0x32
 80052d8:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <UART_SetConfig+0x118>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	f003 020f 	and.w	r2, r3, #15
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	440a      	add	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40013800 	.word	0x40013800
 80052f8:	51eb851f 	.word	0x51eb851f

080052fc <atoi>:
 80052fc:	220a      	movs	r2, #10
 80052fe:	2100      	movs	r1, #0
 8005300:	f000 b8ae 	b.w	8005460 <strtol>

08005304 <__errno>:
 8005304:	4b01      	ldr	r3, [pc, #4]	; (800530c <__errno+0x8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000478 	.word	0x20000478

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	2600      	movs	r6, #0
 8005314:	4d0c      	ldr	r5, [pc, #48]	; (8005348 <__libc_init_array+0x38>)
 8005316:	4c0d      	ldr	r4, [pc, #52]	; (800534c <__libc_init_array+0x3c>)
 8005318:	1b64      	subs	r4, r4, r5
 800531a:	10a4      	asrs	r4, r4, #2
 800531c:	42a6      	cmp	r6, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	f000 f8a8 	bl	8005474 <_init>
 8005324:	2600      	movs	r6, #0
 8005326:	4d0a      	ldr	r5, [pc, #40]	; (8005350 <__libc_init_array+0x40>)
 8005328:	4c0a      	ldr	r4, [pc, #40]	; (8005354 <__libc_init_array+0x44>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	42a6      	cmp	r6, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f855 3b04 	ldr.w	r3, [r5], #4
 8005338:	4798      	blx	r3
 800533a:	3601      	adds	r6, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005342:	4798      	blx	r3
 8005344:	3601      	adds	r6, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	080055b8 	.word	0x080055b8
 800534c:	080055b8 	.word	0x080055b8
 8005350:	080055b8 	.word	0x080055b8
 8005354:	080055c0 	.word	0x080055c0

08005358 <memset>:
 8005358:	4603      	mov	r3, r0
 800535a:	4402      	add	r2, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <_strtol_l.constprop.0>:
 8005368:	2b01      	cmp	r3, #1
 800536a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536e:	4680      	mov	r8, r0
 8005370:	d001      	beq.n	8005376 <_strtol_l.constprop.0+0xe>
 8005372:	2b24      	cmp	r3, #36	; 0x24
 8005374:	d906      	bls.n	8005384 <_strtol_l.constprop.0+0x1c>
 8005376:	f7ff ffc5 	bl	8005304 <__errno>
 800537a:	2316      	movs	r3, #22
 800537c:	6003      	str	r3, [r0, #0]
 800537e:	2000      	movs	r0, #0
 8005380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005384:	460d      	mov	r5, r1
 8005386:	4f35      	ldr	r7, [pc, #212]	; (800545c <_strtol_l.constprop.0+0xf4>)
 8005388:	4628      	mov	r0, r5
 800538a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800538e:	5de6      	ldrb	r6, [r4, r7]
 8005390:	f016 0608 	ands.w	r6, r6, #8
 8005394:	d1f8      	bne.n	8005388 <_strtol_l.constprop.0+0x20>
 8005396:	2c2d      	cmp	r4, #45	; 0x2d
 8005398:	d12f      	bne.n	80053fa <_strtol_l.constprop.0+0x92>
 800539a:	2601      	movs	r6, #1
 800539c:	782c      	ldrb	r4, [r5, #0]
 800539e:	1c85      	adds	r5, r0, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d057      	beq.n	8005454 <_strtol_l.constprop.0+0xec>
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d109      	bne.n	80053bc <_strtol_l.constprop.0+0x54>
 80053a8:	2c30      	cmp	r4, #48	; 0x30
 80053aa:	d107      	bne.n	80053bc <_strtol_l.constprop.0+0x54>
 80053ac:	7828      	ldrb	r0, [r5, #0]
 80053ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80053b2:	2858      	cmp	r0, #88	; 0x58
 80053b4:	d149      	bne.n	800544a <_strtol_l.constprop.0+0xe2>
 80053b6:	2310      	movs	r3, #16
 80053b8:	786c      	ldrb	r4, [r5, #1]
 80053ba:	3502      	adds	r5, #2
 80053bc:	2700      	movs	r7, #0
 80053be:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80053c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80053c6:	fbbe f9f3 	udiv	r9, lr, r3
 80053ca:	4638      	mov	r0, r7
 80053cc:	fb03 ea19 	mls	sl, r3, r9, lr
 80053d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80053d4:	f1bc 0f09 	cmp.w	ip, #9
 80053d8:	d814      	bhi.n	8005404 <_strtol_l.constprop.0+0x9c>
 80053da:	4664      	mov	r4, ip
 80053dc:	42a3      	cmp	r3, r4
 80053de:	dd22      	ble.n	8005426 <_strtol_l.constprop.0+0xbe>
 80053e0:	2f00      	cmp	r7, #0
 80053e2:	db1d      	blt.n	8005420 <_strtol_l.constprop.0+0xb8>
 80053e4:	4581      	cmp	r9, r0
 80053e6:	d31b      	bcc.n	8005420 <_strtol_l.constprop.0+0xb8>
 80053e8:	d101      	bne.n	80053ee <_strtol_l.constprop.0+0x86>
 80053ea:	45a2      	cmp	sl, r4
 80053ec:	db18      	blt.n	8005420 <_strtol_l.constprop.0+0xb8>
 80053ee:	2701      	movs	r7, #1
 80053f0:	fb00 4003 	mla	r0, r0, r3, r4
 80053f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053f8:	e7ea      	b.n	80053d0 <_strtol_l.constprop.0+0x68>
 80053fa:	2c2b      	cmp	r4, #43	; 0x2b
 80053fc:	bf04      	itt	eq
 80053fe:	782c      	ldrbeq	r4, [r5, #0]
 8005400:	1c85      	addeq	r5, r0, #2
 8005402:	e7cd      	b.n	80053a0 <_strtol_l.constprop.0+0x38>
 8005404:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005408:	f1bc 0f19 	cmp.w	ip, #25
 800540c:	d801      	bhi.n	8005412 <_strtol_l.constprop.0+0xaa>
 800540e:	3c37      	subs	r4, #55	; 0x37
 8005410:	e7e4      	b.n	80053dc <_strtol_l.constprop.0+0x74>
 8005412:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005416:	f1bc 0f19 	cmp.w	ip, #25
 800541a:	d804      	bhi.n	8005426 <_strtol_l.constprop.0+0xbe>
 800541c:	3c57      	subs	r4, #87	; 0x57
 800541e:	e7dd      	b.n	80053dc <_strtol_l.constprop.0+0x74>
 8005420:	f04f 37ff 	mov.w	r7, #4294967295
 8005424:	e7e6      	b.n	80053f4 <_strtol_l.constprop.0+0x8c>
 8005426:	2f00      	cmp	r7, #0
 8005428:	da07      	bge.n	800543a <_strtol_l.constprop.0+0xd2>
 800542a:	2322      	movs	r3, #34	; 0x22
 800542c:	4670      	mov	r0, lr
 800542e:	f8c8 3000 	str.w	r3, [r8]
 8005432:	2a00      	cmp	r2, #0
 8005434:	d0a4      	beq.n	8005380 <_strtol_l.constprop.0+0x18>
 8005436:	1e69      	subs	r1, r5, #1
 8005438:	e005      	b.n	8005446 <_strtol_l.constprop.0+0xde>
 800543a:	b106      	cbz	r6, 800543e <_strtol_l.constprop.0+0xd6>
 800543c:	4240      	negs	r0, r0
 800543e:	2a00      	cmp	r2, #0
 8005440:	d09e      	beq.n	8005380 <_strtol_l.constprop.0+0x18>
 8005442:	2f00      	cmp	r7, #0
 8005444:	d1f7      	bne.n	8005436 <_strtol_l.constprop.0+0xce>
 8005446:	6011      	str	r1, [r2, #0]
 8005448:	e79a      	b.n	8005380 <_strtol_l.constprop.0+0x18>
 800544a:	2430      	movs	r4, #48	; 0x30
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1b5      	bne.n	80053bc <_strtol_l.constprop.0+0x54>
 8005450:	2308      	movs	r3, #8
 8005452:	e7b3      	b.n	80053bc <_strtol_l.constprop.0+0x54>
 8005454:	2c30      	cmp	r4, #48	; 0x30
 8005456:	d0a9      	beq.n	80053ac <_strtol_l.constprop.0+0x44>
 8005458:	230a      	movs	r3, #10
 800545a:	e7af      	b.n	80053bc <_strtol_l.constprop.0+0x54>
 800545c:	080054b5 	.word	0x080054b5

08005460 <strtol>:
 8005460:	4613      	mov	r3, r2
 8005462:	460a      	mov	r2, r1
 8005464:	4601      	mov	r1, r0
 8005466:	4802      	ldr	r0, [pc, #8]	; (8005470 <strtol+0x10>)
 8005468:	6800      	ldr	r0, [r0, #0]
 800546a:	f7ff bf7d 	b.w	8005368 <_strtol_l.constprop.0>
 800546e:	bf00      	nop
 8005470:	20000478 	.word	0x20000478

08005474 <_init>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	bf00      	nop
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr

08005480 <_fini>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr

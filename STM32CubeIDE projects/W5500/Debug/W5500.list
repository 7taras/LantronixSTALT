
W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba0  08004ba0  00020440  2**0
                  CONTENTS
  4 .ARM          00000000  08004ba0  08004ba0  00020440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ba0  08004ba0  00020440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  08004bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f1c  20000440  08004ff0  00020440  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000235c  08004ff0  0002235c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f712  00000000  00000000  00020469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e4  00000000  00000000  0002fb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00031e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00032d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1db  00000000  00000000  00033bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8aa  00000000  00000000  0004dda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e748  00000000  00000000  0005d64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebd95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004008  00000000  00000000  000ebde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000440 	.word	0x20000440
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a5c 	.word	0x08004a5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000444 	.word	0x20000444
 8000148:	08004a5c 	.word	0x08004a5c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
//#pragma once
#include "W5500.h"

W5500::W5500(
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	807b      	strh	r3, [r7, #2]
		SPI_HandleTypeDef* hspi_m,
		GPIO_TypeDef* W5500_CS_GPIO_Port_m,
		uint16_t W5500_CS_Pin_m,
		GPIO_TypeDef* W5500_RST_GPIO_Port_m,
		uint16_t W5500_RST_Pin_m
		)
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	3310      	adds	r3, #16
 800016e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f004 fbe3 	bl	8004940 <memset>
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f004 fbda 	bl	8004940 <memset>
{
	hspi_w = hspi_m;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	68ba      	ldr	r2, [r7, #8]
 8000190:	601a      	str	r2, [r3, #0]
	W5500_CS_GPIO_Port_w = W5500_CS_GPIO_Port_m;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	605a      	str	r2, [r3, #4]
	W5500_CS_Pin_w = W5500_CS_Pin_m;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	887a      	ldrh	r2, [r7, #2]
 800019c:	819a      	strh	r2, [r3, #12]
	W5500_RST_GPIO_Port_w = W5500_RST_GPIO_Port_m;
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	69ba      	ldr	r2, [r7, #24]
 80001a2:	609a      	str	r2, [r3, #8]
	W5500_RST_Pin_w = W5500_RST_Pin_m;
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	8bba      	ldrh	r2, [r7, #28]
 80001a8:	81da      	strh	r2, [r3, #14]
}
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	4618      	mov	r0, r3
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <_ZN5W5500D1Ev>:

W5500::~W5500()
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
{
}
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	4618      	mov	r0, r3
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr

080001c8 <_ZN5W55005resetEv>:

// аппаратный сброс чипа
void W5500::reset()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// для аппаратного сброса "тянем" вход RSTn к "0" на 1 мс
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_RESET);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6898      	ldr	r0, [r3, #8]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	89db      	ldrh	r3, [r3, #14]
 80001d8:	2200      	movs	r2, #0
 80001da:	4619      	mov	r1, r3
 80001dc:	f002 f956 	bl	800248c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f001 fded 	bl	8001dc0 <HAL_Delay>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	6898      	ldr	r0, [r3, #8]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	89db      	ldrh	r3, [r3, #14]
 80001ee:	2201      	movs	r2, #1
 80001f0:	4619      	mov	r1, r3
 80001f2:	f002 f94b 	bl	800248c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f001 fde2 	bl	8001dc0 <HAL_Delay>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <_ZN5W550015readByteFromCRBEh>:

//---------------------------------------------------------------------------

// читаем байт из регистра блока CRB
uint8_t W5500::readByteFromCRB(uint8_t address)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af02      	add	r7, sp, #8
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	mosiBytes_w[0] = 0;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	78fa      	ldrb	r2, [r7, #3]
 800021a:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	6858      	ldr	r0, [r3, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	899b      	ldrh	r3, [r3, #12]
 800022a:	2200      	movs	r2, #0
 800022c:	4619      	mov	r1, r3
 800022e:	f002 f92d 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f103 0110 	add.w	r1, r3, #16
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2304      	movs	r3, #4
 800024a:	f002 ff2b 	bl	80030a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	6858      	ldr	r0, [r3, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	899b      	ldrh	r3, [r3, #12]
 8000256:	2201      	movs	r2, #1
 8000258:	4619      	mov	r1, r3
 800025a:	f002 f917 	bl	800248c <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <_ZN5W550015writeArrayToCRBEPhhh>:
	return;
}

// записываем массив байт в регистры блока CRB
void W5500::writeArrayToCRB(uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	460b      	mov	r3, r1
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	4613      	mov	r3, r2
 8000280:	71bb      	strb	r3, [r7, #6]
	mosiBytes_w[0] = 0;
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2200      	movs	r2, #0
 8000286:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	79ba      	ldrb	r2, [r7, #6]
 800028c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	2204      	movs	r2, #4
 8000292:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	429a      	cmp	r2, r3
 800029e:	da0d      	bge.n	80002bc <_ZN5W550015writeArrayToCRBEPhhh+0x50>
	{
		mosiBytes_w[i+3] = array[i];
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	441a      	add	r2, r3
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3303      	adds	r3, #3
 80002aa:	7811      	ldrb	r1, [r2, #0]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	4413      	add	r3, r2
 80002b0:	460a      	mov	r2, r1
 80002b2:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	3301      	adds	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	e7ed      	b.n	8000298 <_ZN5W550015writeArrayToCRBEPhhh+0x2c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	6858      	ldr	r0, [r3, #4]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	899b      	ldrh	r3, [r3, #12]
 80002c4:	2200      	movs	r2, #0
 80002c6:	4619      	mov	r1, r3
 80002c8:	f002 f8e0 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f103 0110 	add.w	r1, r3, #16
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	3303      	adds	r3, #3
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	f002 fda3 	bl	8002e2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	6858      	ldr	r0, [r3, #4]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	899b      	ldrh	r3, [r3, #12]
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	f002 f8cb 	bl	800248c <HAL_GPIO_WritePin>
	return;
 80002f6:	bf00      	nop
}
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <_ZN5W550015readByteFromSRBEhh>:

// читаем байт из регистра блока SRB
uint8_t W5500::readByteFromSRB(uint8_t socket, uint8_t address)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b084      	sub	sp, #16
 8000302:	af02      	add	r7, sp, #8
 8000304:	6078      	str	r0, [r7, #4]
 8000306:	460b      	mov	r3, r1
 8000308:	70fb      	strb	r3, [r7, #3]
 800030a:	4613      	mov	r3, r2
 800030c:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	78ba      	ldrb	r2, [r7, #2]
 8000318:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	78fa      	ldrb	r2, [r7, #3]
 800031e:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6858      	ldr	r0, [r3, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	899b      	ldrh	r3, [r3, #12]
 8000328:	2200      	movs	r2, #0
 800032a:	4619      	mov	r1, r3
 800032c:	f002 f8ae 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6818      	ldr	r0, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f103 0110 	add.w	r1, r3, #16
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2304      	movs	r3, #4
 8000348:	f002 feac 	bl	80030a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6858      	ldr	r0, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	899b      	ldrh	r3, [r3, #12]
 8000354:	2201      	movs	r2, #1
 8000356:	4619      	mov	r1, r3
 8000358:	f002 f898 	bl	800248c <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <_ZN5W550015readWordFromSRBEhh>:

// читаем слово (2 байта) из регистров блока SRB
uint16_t W5500::readWordFromSRB(uint8_t socket, uint8_t address)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b086      	sub	sp, #24
 800036e:	af02      	add	r7, sp, #8
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	460b      	mov	r3, r1
 8000374:	70fb      	strb	r3, [r7, #3]
 8000376:	4613      	mov	r3, r2
 8000378:	70bb      	strb	r3, [r7, #2]
	mosiBytes_w[0] = 0;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	78ba      	ldrb	r2, [r7, #2]
 8000384:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = socket;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	78fa      	ldrb	r2, [r7, #3]
 800038a:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6858      	ldr	r0, [r3, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	899b      	ldrh	r3, [r3, #12]
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	f002 f878 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 5, 1000);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6818      	ldr	r0, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f103 0110 	add.w	r1, r3, #16
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80003ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2305      	movs	r3, #5
 80003b4:	f002 fe76 	bl	80030a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6858      	ldr	r0, [r3, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	899b      	ldrh	r3, [r3, #12]
 80003c0:	2201      	movs	r2, #1
 80003c2:	4619      	mov	r1, r3
 80003c4:	f002 f862 	bl	800248c <HAL_GPIO_WritePin>
	word_w5500 temp;
	temp.byte[0] = misoBytes_w[4];
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80003ce:	733b      	strb	r3, [r7, #12]
	temp.byte[1] = misoBytes_w[3];
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80003d6:	737b      	strb	r3, [r7, #13]
	return temp.word;
 80003d8:	89bb      	ldrh	r3, [r7, #12]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <_ZN5W550014writeByteToSRBEhhh>:
	return;
}

// записываем байт в регистр блока SRB
void W5500::writeByteToSRB(uint8_t socket, uint8_t value, uint8_t address)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b082      	sub	sp, #8
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	4608      	mov	r0, r1
 80003ec:	4611      	mov	r1, r2
 80003ee:	461a      	mov	r2, r3
 80003f0:	4603      	mov	r3, r0
 80003f2:	70fb      	strb	r3, [r7, #3]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70bb      	strb	r3, [r7, #2]
 80003f8:	4613      	mov	r3, r2
 80003fa:	707b      	strb	r3, [r7, #1]
	mosiBytes_w[0] = 0;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	787a      	ldrb	r2, [r7, #1]
 8000406:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	b2da      	uxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = value;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	78ba      	ldrb	r2, [r7, #2]
 8000418:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6858      	ldr	r0, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	899b      	ldrh	r3, [r3, #12]
 8000422:	2200      	movs	r2, #0
 8000424:	4619      	mov	r1, r3
 8000426:	f002 f831 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 1000);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f103 0110 	add.w	r1, r3, #16
 8000434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000438:	2204      	movs	r2, #4
 800043a:	f002 fcf7 	bl	8002e2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6858      	ldr	r0, [r3, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	899b      	ldrh	r3, [r3, #12]
 8000446:	2201      	movs	r2, #1
 8000448:	4619      	mov	r1, r3
 800044a:	f002 f81f 	bl	800248c <HAL_GPIO_WritePin>
	return;
 800044e:	bf00      	nop
}
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_ZN5W550014writeWordToSRBEhth>:

// записываем слово (2 байта) в регистры блока SRB
void W5500::writeWordToSRB(uint8_t socket, uint16_t value, uint8_t address)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b084      	sub	sp, #16
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	4608      	mov	r0, r1
 8000460:	4611      	mov	r1, r2
 8000462:	461a      	mov	r2, r3
 8000464:	4603      	mov	r3, r0
 8000466:	70fb      	strb	r3, [r7, #3]
 8000468:	460b      	mov	r3, r1
 800046a:	803b      	strh	r3, [r7, #0]
 800046c:	4613      	mov	r3, r2
 800046e:	70bb      	strb	r3, [r7, #2]
	word_w5500 temp;
	temp.word = value;
 8000470:	883b      	ldrh	r3, [r7, #0]
 8000472:	81bb      	strh	r3, [r7, #12]
	mosiBytes_w[0] = 0;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = address;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	78ba      	ldrb	r2, [r7, #2]
 800047e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	b2da      	uxtb	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = temp.byte[1];
 800048c:	7b7a      	ldrb	r2, [r7, #13]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = temp.byte[0];
 8000492:	7b3a      	ldrb	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	751a      	strb	r2, [r3, #20]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6858      	ldr	r0, [r3, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	899b      	ldrh	r3, [r3, #12]
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	f001 fff2 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, 5, 1000);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f103 0110 	add.w	r1, r3, #16
 80004b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b6:	2205      	movs	r2, #5
 80004b8:	f002 fcb8 	bl	8002e2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6858      	ldr	r0, [r3, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	899b      	ldrh	r3, [r3, #12]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	f001 ffe0 	bl	800248c <HAL_GPIO_WritePin>
	return;
 80004cc:	bf00      	nop
}
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_ZN5W550015writeArrayToSRBEhPhhh>:

// записываем массив байт в регистры блока SRB
void W5500::writeArrayToSRB(uint8_t socket, uint8_t* array, uint8_t sizeArray, uint8_t beginAddress)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	607a      	str	r2, [r7, #4]
 80004de:	461a      	mov	r2, r3
 80004e0:	460b      	mov	r3, r1
 80004e2:	72fb      	strb	r3, [r7, #11]
 80004e4:	4613      	mov	r3, r2
 80004e6:	72bb      	strb	r3, [r7, #10]
	mosiBytes_w[0] = 0;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2200      	movs	r2, #0
 80004ec:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004f4:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket | 0b00000100);
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	7abb      	ldrb	r3, [r7, #10]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	429a      	cmp	r2, r3
 800050c:	da0d      	bge.n	800052a <_ZN5W550015writeArrayToSRBEhPhhh+0x56>
	{
		mosiBytes_w[i+3] = array[i];
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	441a      	add	r2, r3
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3303      	adds	r3, #3
 8000518:	7811      	ldrb	r1, [r2, #0]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	460a      	mov	r2, r1
 8000520:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e7ed      	b.n	8000506 <_ZN5W550015writeArrayToSRBEhPhhh+0x32>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6858      	ldr	r0, [r3, #4]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	899b      	ldrh	r3, [r3, #12]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	f001 ffa9 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f103 0110 	add.w	r1, r3, #16
 8000544:	7abb      	ldrb	r3, [r7, #10]
 8000546:	b29b      	uxth	r3, r3
 8000548:	3303      	adds	r3, #3
 800054a:	b29a      	uxth	r2, r3
 800054c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000550:	f002 fc6c 	bl	8002e2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6858      	ldr	r0, [r3, #4]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	899b      	ldrh	r3, [r3, #12]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f001 ff94 	bl	800248c <HAL_GPIO_WritePin>
	return;
 8000564:	bf00      	nop
}
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <_ZN5W550021readArrayFromRXbufferEhPht6word_y>:

//---------------------------------------------------------------------------

// читаем массив байт в буфер TX
void W5500::readArrayFromRXbuffer(uint8_t socket, uint8_t* destinationArray, uint16_t sizeArray, word_y beginAddress)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b089      	sub	sp, #36	; 0x24
 8000570:	af02      	add	r7, sp, #8
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	72fb      	strb	r3, [r7, #11]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 8000580:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 8000588:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = (socket + 16);
 8000590:	7afb      	ldrb	r3, [r7, #11]
 8000592:	3310      	adds	r3, #16
 8000594:	b2da      	uxtb	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6858      	ldr	r0, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	899b      	ldrh	r3, [r3, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	f001 ff71 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, (sizeArray + 3), 1000);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 0110 	add.w	r1, r3, #16
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80005ba:	893b      	ldrh	r3, [r7, #8]
 80005bc:	3303      	adds	r3, #3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80005c4:	9400      	str	r4, [sp, #0]
 80005c6:	f002 fd6d 	bl	80030a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6858      	ldr	r0, [r3, #4]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	f001 ff59 	bl	800248c <HAL_GPIO_WritePin>
	for(int i = 0; i < sizeArray; ++i)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	893b      	ldrh	r3, [r7, #8]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	da0d      	bge.n	8000602 <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x96>
	{
		destinationArray[i] = misoBytes_w[i+3];
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	1cda      	adds	r2, r3, #3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	440b      	add	r3, r1
 80005f0:	68f9      	ldr	r1, [r7, #12]
 80005f2:	440a      	add	r2, r1
 80005f4:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 80005f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeArray; ++i)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e7ed      	b.n	80005de <_ZN5W550021readArrayFromRXbufferEhPht6word_y+0x72>
	}
	return;
 8000602:	bf00      	nop
}
 8000604:	371c      	adds	r7, #28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd90      	pop	{r4, r7, pc}

0800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>:


// записываем массив байт в буфер TX
void W5500::writeArrayToTXbuffer(uint8_t socket, uint8_t* array, uint16_t sizeArray, word_y beginAddress)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b086      	sub	sp, #24
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	461a      	mov	r2, r3
 8000616:	460b      	mov	r3, r1
 8000618:	72fb      	strb	r3, [r7, #11]
 800061a:	4613      	mov	r3, r2
 800061c:	813b      	strh	r3, [r7, #8]
	mosiBytes_w[0] = beginAddress.byte[1];
 800061e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = beginAddress.byte[0];
 8000626:	f897 2020 	ldrb.w	r2, [r7, #32]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = ((socket + 8) | 0b00000100);
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	3308      	adds	r3, #8
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b25b      	sxtb	r3, r3
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < sizeArray; ++i)
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	893b      	ldrh	r3, [r7, #8]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	429a      	cmp	r2, r3
 800064c:	da0d      	bge.n	800066a <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x60>
	{
		mosiBytes_w[i+3] = array[i];
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	441a      	add	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3303      	adds	r3, #3
 8000658:	7811      	ldrb	r1, [r2, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < sizeArray; ++i)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e7ed      	b.n	8000646 <_ZN5W550020writeArrayToTXbufferEhPht6word_y+0x3c>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6858      	ldr	r0, [r3, #4]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	f001 ff09 	bl	800248c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_w, mosiBytes_w, (sizeArray + 3), 1000);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f103 0110 	add.w	r1, r3, #16
 8000684:	893b      	ldrh	r3, [r7, #8]
 8000686:	3303      	adds	r3, #3
 8000688:	b29a      	uxth	r2, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	f002 fbcd 	bl	8002e2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6858      	ldr	r0, [r3, #4]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	899b      	ldrh	r3, [r3, #12]
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	f001 fef5 	bl	800248c <HAL_GPIO_WritePin>
	return;
 80006a2:	bf00      	nop
}
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_ZN5W550013receivePacketEhPhPt>:

//---------------------------------------------------------------------------

// получаем данные по протоколу UDP
void W5500::receivePacket(uint8_t socket, uint8_t* dataForReceive, uint16_t* sizeArray)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b08a      	sub	sp, #40	; 0x28
 80006ae:	af02      	add	r7, sp, #8
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	460b      	mov	r3, r1
 80006b8:	72fb      	strb	r3, [r7, #11]
	// временные переменные для хранения значений регистров RX_RSR и RX_RD
	word_y valueRSR, valueRSRretry, valueRD;

	// читаем регистр RX_RSR (разница между значениями RX_WR и RX_RD)
	valueRSR.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006ba:	7afb      	ldrb	r3, [r7, #11]
 80006bc:	2226      	movs	r2, #38	; 0x26
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f7ff fe52 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006c6:	4603      	mov	r3, r0
 80006c8:	83bb      	strh	r3, [r7, #28]
	// считываем еще раз
	valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	2226      	movs	r2, #38	; 0x26
 80006ce:	4619      	mov	r1, r3
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff fe4a 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006d6:	4603      	mov	r3, r0
 80006d8:	833b      	strh	r3, [r7, #24]
	// сравниваем, тем самым исключая изменения в нём в момент считывания
	while (valueRSR.word != valueRSRretry.word)
 80006da:	8bba      	ldrh	r2, [r7, #28]
 80006dc:	8b3b      	ldrh	r3, [r7, #24]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d00a      	beq.n	80006f8 <_ZN5W550013receivePacketEhPhPt+0x4e>
	{
		valueRSR.word = valueRSRretry.word;
 80006e2:	8b3b      	ldrh	r3, [r7, #24]
 80006e4:	83bb      	strh	r3, [r7, #28]
		valueRSRretry.word = readWordFromSRB(socket, W5500_Sn_RX_RSR);
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	2226      	movs	r2, #38	; 0x26
 80006ea:	4619      	mov	r1, r3
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f7ff fe3c 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	833b      	strh	r3, [r7, #24]
	while (valueRSR.word != valueRSRretry.word)
 80006f6:	e7f0      	b.n	80006da <_ZN5W550013receivePacketEhPhPt+0x30>
	}

	// читаем регистр RX_RD (указатель на начало полученных данных)
	valueRD.word = readWordFromSRB(socket, W5500_Sn_RX_RD);
 80006f8:	7afb      	ldrb	r3, [r7, #11]
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	4619      	mov	r1, r3
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff fe33 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000704:	4603      	mov	r3, r0
 8000706:	82bb      	strh	r3, [r7, #20]

	// читаем буфер RX
	readArrayFromRXbuffer(socket, dataForReceive, valueRSR.word, valueRD);
 8000708:	8bba      	ldrh	r2, [r7, #28]
 800070a:	7af9      	ldrb	r1, [r7, #11]
 800070c:	8abb      	ldrh	r3, [r7, #20]
 800070e:	f8ad 3000 	strh.w	r3, [sp]
 8000712:	4613      	mov	r3, r2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff28 	bl	800056c <_ZN5W550021readArrayFromRXbufferEhPht6word_y>

	// увеличиваем значение указателя на полученные данные на число считанных байт
	valueRD.word += valueRSR.word;
 800071c:	8aba      	ldrh	r2, [r7, #20]
 800071e:	8bbb      	ldrh	r3, [r7, #28]
 8000720:	4413      	add	r3, r2
 8000722:	b29b      	uxth	r3, r3
 8000724:	82bb      	strh	r3, [r7, #20]
	writeWordToSRB(socket, valueRD.word, W5500_Sn_RX_RD);
 8000726:	8aba      	ldrh	r2, [r7, #20]
 8000728:	7af9      	ldrb	r1, [r7, #11]
 800072a:	2328      	movs	r3, #40	; 0x28
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f7ff fe92 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// завершаем процесс чтения из буфера RX
	writeByteToSRB(socket, W5500_Sn_CR_RECV, W5500_Sn_CR);
 8000732:	7af9      	ldrb	r1, [r7, #11]
 8000734:	2301      	movs	r3, #1
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff fe52 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

	// записываем значение полученных байт
	*sizeArray = valueRSR.word;
 800073e:	8bba      	ldrh	r2, [r7, #28]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	801a      	strh	r2, [r3, #0]
	return;
 8000744:	bf00      	nop
}
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <_ZN5W550010sendPacketEhPht>:

// отправляем данные по протоколу UDP
void W5500::sendPacket(uint8_t socket, uint8_t* dataForSend, uint16_t sizeArray)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af02      	add	r7, sp, #8
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	461a      	mov	r2, r3
 8000758:	460b      	mov	r3, r1
 800075a:	72fb      	strb	r3, [r7, #11]
 800075c:	4613      	mov	r3, r2
 800075e:	813b      	strh	r3, [r7, #8]
	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	2220      	movs	r2, #32
 8000764:	4619      	mov	r1, r3
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f7ff fdff 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 800076c:	4603      	mov	r3, r0
 800076e:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000770:	8abb      	ldrh	r3, [r7, #20]
 8000772:	893a      	ldrh	r2, [r7, #8]
 8000774:	429a      	cmp	r2, r3
 8000776:	d823      	bhi.n	80007c0 <_ZN5W550010sendPacketEhPht+0x74>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 8000778:	7afb      	ldrb	r3, [r7, #11]
 800077a:	2224      	movs	r2, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff fdf3 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000784:	4603      	mov	r3, r0
 8000786:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, dataForSend, sizeArray, valueWR);
 8000788:	893a      	ldrh	r2, [r7, #8]
 800078a:	7af9      	ldrb	r1, [r7, #11]
 800078c:	8a3b      	ldrh	r3, [r7, #16]
 800078e:	f8ad 3000 	strh.w	r3, [sp]
 8000792:	4613      	mov	r3, r2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f7ff ff37 	bl	800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 800079c:	8a3a      	ldrh	r2, [r7, #16]
 800079e:	893b      	ldrh	r3, [r7, #8]
 80007a0:	4413      	add	r3, r2
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 80007a6:	8a3a      	ldrh	r2, [r7, #16]
 80007a8:	7af9      	ldrb	r1, [r7, #11]
 80007aa:	2324      	movs	r3, #36	; 0x24
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff fe52 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 80007b2:	7af9      	ldrb	r1, [r7, #11]
 80007b4:	2301      	movs	r3, #1
 80007b6:	2220      	movs	r2, #32
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff fe12 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
	return;
 80007be:	e000      	b.n	80007c2 <_ZN5W550010sendPacketEhPht+0x76>
	if((uint16_t)sizeArray > valueFSR.word) return;
 80007c0:	bf00      	nop
}
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZN5W550010sendStringEhPc>:

// отправляем строку
void W5500::sendString(uint8_t socket, char* stringForSend)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	460b      	mov	r3, r1
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	72fb      	strb	r3, [r7, #11]
	// вычисляем размер передаваемой строки
	uint16_t sizeArray = strlen(stringForSend);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fcb8 	bl	800014c <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	82fb      	strh	r3, [r7, #22]

	// временные переменные для хранения значений регистров TX_FSR и TX_WR
	word_y valueFSR, valueWR;

	// читаем регистр TX_FSR (хранит значение свободного места в буфере TX
	valueFSR.word = readWordFromSRB(socket, W5500_Sn_TX_FSR);
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	2220      	movs	r2, #32
 80007e4:	4619      	mov	r1, r3
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff fdbf 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 80007ec:	4603      	mov	r3, r0
 80007ee:	82bb      	strh	r3, [r7, #20]

	// проверяем, что размер данных для отправки не превышает количества свободного места в буфере
	if((uint16_t)sizeArray > valueFSR.word) return;
 80007f0:	8abb      	ldrh	r3, [r7, #20]
 80007f2:	8afa      	ldrh	r2, [r7, #22]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d823      	bhi.n	8000840 <_ZN5W550010sendStringEhPc+0x78>

	// читаем регистр TX_WR (указатель на начало свободного места буфера)
	valueWR.word = readWordFromSRB(socket, W5500_Sn_TX_WR);
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	2224      	movs	r2, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff fdb3 	bl	800036a <_ZN5W550015readWordFromSRBEhh>
 8000804:	4603      	mov	r3, r0
 8000806:	823b      	strh	r3, [r7, #16]

	// записываем данные для отправки в буфер TX
	writeArrayToTXbuffer(socket, (uint8_t*)stringForSend, sizeArray, valueWR);
 8000808:	8afa      	ldrh	r2, [r7, #22]
 800080a:	7af9      	ldrb	r1, [r7, #11]
 800080c:	8a3b      	ldrh	r3, [r7, #16]
 800080e:	f8ad 3000 	strh.w	r3, [sp]
 8000812:	4613      	mov	r3, r2
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff fef7 	bl	800060a <_ZN5W550020writeArrayToTXbufferEhPht6word_y>

	// увеличиваем значение указателя на начало свободного места
	valueWR.word += sizeArray;
 800081c:	8a3a      	ldrh	r2, [r7, #16]
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	4413      	add	r3, r2
 8000822:	b29b      	uxth	r3, r3
 8000824:	823b      	strh	r3, [r7, #16]
	writeWordToSRB(socket, valueWR.word, W5500_Sn_TX_WR);
 8000826:	8a3a      	ldrh	r2, [r7, #16]
 8000828:	7af9      	ldrb	r1, [r7, #11]
 800082a:	2324      	movs	r3, #36	; 0x24
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff fe12 	bl	8000456 <_ZN5W550014writeWordToSRBEhth>

	// отправляем данные
	writeByteToSRB(socket, W5500_Sn_CR_SEND, W5500_Sn_CR);
 8000832:	7af9      	ldrb	r1, [r7, #11]
 8000834:	2301      	movs	r3, #1
 8000836:	2220      	movs	r2, #32
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f7ff fdd2 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
	return;
 800083e:	e000      	b.n	8000842 <_ZN5W550010sendStringEhPc+0x7a>
	if((uint16_t)sizeArray > valueFSR.word) return;
 8000840:	bf00      	nop
}
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <_Z10int2letterRc>:
extern char text10[];
extern char text11[];
extern char text12[];

void int2letter(char& digit)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	  if (digit <= 9) digit += 48;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b09      	cmp	r3, #9
 8000856:	d806      	bhi.n	8000866 <_Z10int2letterRc+0x1e>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3330      	adds	r3, #48	; 0x30
 800085e:	b2da      	uxtb	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	701a      	strb	r2, [r3, #0]
	  else digit += 55;
	  return;
 8000864:	e006      	b.n	8000874 <_Z10int2letterRc+0x2c>
	  else digit += 55;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3337      	adds	r3, #55	; 0x37
 800086c:	b2da      	uxtb	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	701a      	strb	r2, [r3, #0]
	  return;
 8000872:	bf00      	nop
}
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <_Z9writeTextv>:

void writeText()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	  textConnected[53] = crb.sipr0/100 + 48;
 8000880:	4bb4      	ldr	r3, [pc, #720]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000882:	7bdb      	ldrb	r3, [r3, #15]
 8000884:	4ab4      	ldr	r2, [pc, #720]	; (8000b58 <_Z9writeTextv+0x2dc>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3330      	adds	r3, #48	; 0x30
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4bb2      	ldr	r3, [pc, #712]	; (8000b5c <_Z9writeTextv+0x2e0>)
 8000894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	  textConnected[54] = (crb.sipr0/10)%10 + 48;
 8000898:	4bae      	ldr	r3, [pc, #696]	; (8000b54 <_Z9writeTextv+0x2d8>)
 800089a:	7bdb      	ldrb	r3, [r3, #15]
 800089c:	4ab0      	ldr	r2, [pc, #704]	; (8000b60 <_Z9writeTextv+0x2e4>)
 800089e:	fba2 2303 	umull	r2, r3, r2, r3
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4bae      	ldr	r3, [pc, #696]	; (8000b60 <_Z9writeTextv+0x2e4>)
 80008a8:	fba3 1302 	umull	r1, r3, r3, r2
 80008ac:	08d9      	lsrs	r1, r3, #3
 80008ae:	460b      	mov	r3, r1
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	440b      	add	r3, r1
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	3330      	adds	r3, #48	; 0x30
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4ba7      	ldr	r3, [pc, #668]	; (8000b5c <_Z9writeTextv+0x2e0>)
 80008c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	  textConnected[55] = crb.sipr0%10 + 48;
 80008c4:	4ba3      	ldr	r3, [pc, #652]	; (8000b54 <_Z9writeTextv+0x2d8>)
 80008c6:	7bda      	ldrb	r2, [r3, #15]
 80008c8:	4ba5      	ldr	r3, [pc, #660]	; (8000b60 <_Z9writeTextv+0x2e4>)
 80008ca:	fba3 1302 	umull	r1, r3, r3, r2
 80008ce:	08d9      	lsrs	r1, r3, #3
 80008d0:	460b      	mov	r3, r1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3330      	adds	r3, #48	; 0x30
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b9e      	ldr	r3, [pc, #632]	; (8000b5c <_Z9writeTextv+0x2e0>)
 80008e2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	  text0[27] = crb.sipr1/100 + 48;
 80008e6:	4b9b      	ldr	r3, [pc, #620]	; (8000b54 <_Z9writeTextv+0x2d8>)
 80008e8:	7c1b      	ldrb	r3, [r3, #16]
 80008ea:	4a9b      	ldr	r2, [pc, #620]	; (8000b58 <_Z9writeTextv+0x2dc>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	095b      	lsrs	r3, r3, #5
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	3330      	adds	r3, #48	; 0x30
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b9a      	ldr	r3, [pc, #616]	; (8000b64 <_Z9writeTextv+0x2e8>)
 80008fa:	76da      	strb	r2, [r3, #27]
	  text0[28] = (crb.sipr1/10)%10 + 48;
 80008fc:	4b95      	ldr	r3, [pc, #596]	; (8000b54 <_Z9writeTextv+0x2d8>)
 80008fe:	7c1b      	ldrb	r3, [r3, #16]
 8000900:	4a97      	ldr	r2, [pc, #604]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	08db      	lsrs	r3, r3, #3
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b95      	ldr	r3, [pc, #596]	; (8000b60 <_Z9writeTextv+0x2e4>)
 800090c:	fba3 1302 	umull	r1, r3, r3, r2
 8000910:	08d9      	lsrs	r1, r3, #3
 8000912:	460b      	mov	r3, r1
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	440b      	add	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3330      	adds	r3, #48	; 0x30
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b90      	ldr	r3, [pc, #576]	; (8000b64 <_Z9writeTextv+0x2e8>)
 8000924:	771a      	strb	r2, [r3, #28]
	  text0[29] = crb.sipr1%10 + 48;
 8000926:	4b8b      	ldr	r3, [pc, #556]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000928:	7c1a      	ldrb	r2, [r3, #16]
 800092a:	4b8d      	ldr	r3, [pc, #564]	; (8000b60 <_Z9writeTextv+0x2e4>)
 800092c:	fba3 1302 	umull	r1, r3, r3, r2
 8000930:	08d9      	lsrs	r1, r3, #3
 8000932:	460b      	mov	r3, r1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	440b      	add	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	3330      	adds	r3, #48	; 0x30
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b88      	ldr	r3, [pc, #544]	; (8000b64 <_Z9writeTextv+0x2e8>)
 8000944:	775a      	strb	r2, [r3, #29]
	  text1[27] = crb.sipr2/100 + 48;
 8000946:	4b83      	ldr	r3, [pc, #524]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000948:	7c5b      	ldrb	r3, [r3, #17]
 800094a:	4a83      	ldr	r2, [pc, #524]	; (8000b58 <_Z9writeTextv+0x2dc>)
 800094c:	fba2 2303 	umull	r2, r3, r2, r3
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	b2db      	uxtb	r3, r3
 8000954:	3330      	adds	r3, #48	; 0x30
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b83      	ldr	r3, [pc, #524]	; (8000b68 <_Z9writeTextv+0x2ec>)
 800095a:	76da      	strb	r2, [r3, #27]
	  text1[28] = (crb.sipr2/10)%10 + 48;
 800095c:	4b7d      	ldr	r3, [pc, #500]	; (8000b54 <_Z9writeTextv+0x2d8>)
 800095e:	7c5b      	ldrb	r3, [r3, #17]
 8000960:	4a7f      	ldr	r2, [pc, #508]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b7d      	ldr	r3, [pc, #500]	; (8000b60 <_Z9writeTextv+0x2e4>)
 800096c:	fba3 1302 	umull	r1, r3, r3, r2
 8000970:	08d9      	lsrs	r1, r3, #3
 8000972:	460b      	mov	r3, r1
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	440b      	add	r3, r1
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	3330      	adds	r3, #48	; 0x30
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b79      	ldr	r3, [pc, #484]	; (8000b68 <_Z9writeTextv+0x2ec>)
 8000984:	771a      	strb	r2, [r3, #28]
	  text1[29] = crb.sipr2%10 + 48;
 8000986:	4b73      	ldr	r3, [pc, #460]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000988:	7c5a      	ldrb	r2, [r3, #17]
 800098a:	4b75      	ldr	r3, [pc, #468]	; (8000b60 <_Z9writeTextv+0x2e4>)
 800098c:	fba3 1302 	umull	r1, r3, r3, r2
 8000990:	08d9      	lsrs	r1, r3, #3
 8000992:	460b      	mov	r3, r1
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	3330      	adds	r3, #48	; 0x30
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b71      	ldr	r3, [pc, #452]	; (8000b68 <_Z9writeTextv+0x2ec>)
 80009a4:	775a      	strb	r2, [r3, #29]
	  text2[27] = crb.sipr3/100 + 48;
 80009a6:	4b6b      	ldr	r3, [pc, #428]	; (8000b54 <_Z9writeTextv+0x2d8>)
 80009a8:	7c9b      	ldrb	r3, [r3, #18]
 80009aa:	4a6b      	ldr	r2, [pc, #428]	; (8000b58 <_Z9writeTextv+0x2dc>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	095b      	lsrs	r3, r3, #5
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	3330      	adds	r3, #48	; 0x30
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b6c      	ldr	r3, [pc, #432]	; (8000b6c <_Z9writeTextv+0x2f0>)
 80009ba:	76da      	strb	r2, [r3, #27]
	  text2[28] = (crb.sipr3/10)%10 + 48;
 80009bc:	4b65      	ldr	r3, [pc, #404]	; (8000b54 <_Z9writeTextv+0x2d8>)
 80009be:	7c9b      	ldrb	r3, [r3, #18]
 80009c0:	4a67      	ldr	r2, [pc, #412]	; (8000b60 <_Z9writeTextv+0x2e4>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b65      	ldr	r3, [pc, #404]	; (8000b60 <_Z9writeTextv+0x2e4>)
 80009cc:	fba3 1302 	umull	r1, r3, r3, r2
 80009d0:	08d9      	lsrs	r1, r3, #3
 80009d2:	460b      	mov	r3, r1
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3330      	adds	r3, #48	; 0x30
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b62      	ldr	r3, [pc, #392]	; (8000b6c <_Z9writeTextv+0x2f0>)
 80009e4:	771a      	strb	r2, [r3, #28]
	  text2[29] = crb.sipr3%10 + 48;
 80009e6:	4b5b      	ldr	r3, [pc, #364]	; (8000b54 <_Z9writeTextv+0x2d8>)
 80009e8:	7c9a      	ldrb	r2, [r3, #18]
 80009ea:	4b5d      	ldr	r3, [pc, #372]	; (8000b60 <_Z9writeTextv+0x2e4>)
 80009ec:	fba3 1302 	umull	r1, r3, r3, r2
 80009f0:	08d9      	lsrs	r1, r3, #3
 80009f2:	460b      	mov	r3, r1
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	440b      	add	r3, r1
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	3330      	adds	r3, #48	; 0x30
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b5a      	ldr	r3, [pc, #360]	; (8000b6c <_Z9writeTextv+0x2f0>)
 8000a04:	775a      	strb	r2, [r3, #29]

	  text3[36] = crb.subr0/100 + 48;
 8000a06:	4b53      	ldr	r3, [pc, #332]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	4a53      	ldr	r2, [pc, #332]	; (8000b58 <_Z9writeTextv+0x2dc>)
 8000a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a10:	095b      	lsrs	r3, r3, #5
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	3330      	adds	r3, #48	; 0x30
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b55      	ldr	r3, [pc, #340]	; (8000b70 <_Z9writeTextv+0x2f4>)
 8000a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  text3[37] = (crb.subr0/10)%10 + 48;
 8000a1e:	4b4d      	ldr	r3, [pc, #308]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000a20:	795b      	ldrb	r3, [r3, #5]
 8000a22:	4a4f      	ldr	r2, [pc, #316]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000a24:	fba2 2303 	umull	r2, r3, r2, r3
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a32:	08d9      	lsrs	r1, r3, #3
 8000a34:	460b      	mov	r3, r1
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	440b      	add	r3, r1
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	3330      	adds	r3, #48	; 0x30
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <_Z9writeTextv+0x2f4>)
 8000a46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  text3[38] = crb.subr0%10 + 48;
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000a4c:	795a      	ldrb	r2, [r3, #5]
 8000a4e:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000a50:	fba3 1302 	umull	r1, r3, r3, r2
 8000a54:	08d9      	lsrs	r1, r3, #3
 8000a56:	460b      	mov	r3, r1
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	3330      	adds	r3, #48	; 0x30
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <_Z9writeTextv+0x2f4>)
 8000a68:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  text4[36] = crb.subr1/100 + 48;
 8000a6c:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000a6e:	799b      	ldrb	r3, [r3, #6]
 8000a70:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <_Z9writeTextv+0x2dc>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	3330      	adds	r3, #48	; 0x30
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <_Z9writeTextv+0x2f8>)
 8000a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  text4[37] = (crb.subr1/10)%10 + 48;
 8000a84:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000a86:	799b      	ldrb	r3, [r3, #6]
 8000a88:	4a35      	ldr	r2, [pc, #212]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000a94:	fba3 1302 	umull	r1, r3, r3, r2
 8000a98:	08d9      	lsrs	r1, r3, #3
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	3330      	adds	r3, #48	; 0x30
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <_Z9writeTextv+0x2f8>)
 8000aac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  text4[38] = crb.subr1%10 + 48;
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000ab2:	799a      	ldrb	r2, [r3, #6]
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aba:	08d9      	lsrs	r1, r3, #3
 8000abc:	460b      	mov	r3, r1
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	3330      	adds	r3, #48	; 0x30
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <_Z9writeTextv+0x2f8>)
 8000ace:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  text5[36] = crb.subr2/100 + 48;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000ad4:	79db      	ldrb	r3, [r3, #7]
 8000ad6:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <_Z9writeTextv+0x2dc>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	3330      	adds	r3, #48	; 0x30
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <_Z9writeTextv+0x2fc>)
 8000ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  text5[37] = (crb.subr2/10)%10 + 48;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000aec:	79db      	ldrb	r3, [r3, #7]
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000afa:	fba3 1302 	umull	r1, r3, r3, r2
 8000afe:	08d9      	lsrs	r1, r3, #3
 8000b00:	460b      	mov	r3, r1
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	440b      	add	r3, r1
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	3330      	adds	r3, #48	; 0x30
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <_Z9writeTextv+0x2fc>)
 8000b12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  text5[38] = crb.subr2%10 + 48;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000b18:	79da      	ldrb	r2, [r3, #7]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_Z9writeTextv+0x2e4>)
 8000b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b20:	08d9      	lsrs	r1, r3, #3
 8000b22:	460b      	mov	r3, r1
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	3330      	adds	r3, #48	; 0x30
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_Z9writeTextv+0x2fc>)
 8000b34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  text6[36] = crb.subr3/100 + 48;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <_Z9writeTextv+0x2d8>)
 8000b3a:	7a1b      	ldrb	r3, [r3, #8]
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <_Z9writeTextv+0x2dc>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	3330      	adds	r3, #48	; 0x30
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <_Z9writeTextv+0x300>)
 8000b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000b50:	e016      	b.n	8000b80 <_Z9writeTextv+0x304>
 8000b52:	bf00      	nop
 8000b54:	20000000 	.word	0x20000000
 8000b58:	51eb851f 	.word	0x51eb851f
 8000b5c:	200000c0 	.word	0x200000c0
 8000b60:	cccccccd 	.word	0xcccccccd
 8000b64:	200000fc 	.word	0x200000fc
 8000b68:	20000120 	.word	0x20000120
 8000b6c:	20000144 	.word	0x20000144
 8000b70:	20000168 	.word	0x20000168
 8000b74:	20000194 	.word	0x20000194
 8000b78:	200001c0 	.word	0x200001c0
 8000b7c:	200001ec 	.word	0x200001ec
	  text6[37] = (crb.subr3/10)%10 + 48;
 8000b80:	4b4d      	ldr	r3, [pc, #308]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000b82:	7a1b      	ldrb	r3, [r3, #8]
 8000b84:	4a4d      	ldr	r2, [pc, #308]	; (8000cbc <_Z9writeTextv+0x440>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <_Z9writeTextv+0x440>)
 8000b90:	fba3 1302 	umull	r1, r3, r3, r2
 8000b94:	08d9      	lsrs	r1, r3, #3
 8000b96:	460b      	mov	r3, r1
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	3330      	adds	r3, #48	; 0x30
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <_Z9writeTextv+0x444>)
 8000ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  text6[38] = crb.subr3%10 + 48;
 8000bac:	4b42      	ldr	r3, [pc, #264]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000bae:	7a1a      	ldrb	r2, [r3, #8]
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <_Z9writeTextv+0x440>)
 8000bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bb6:	08d9      	lsrs	r1, r3, #3
 8000bb8:	460b      	mov	r3, r1
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	3330      	adds	r3, #48	; 0x30
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b3d      	ldr	r3, [pc, #244]	; (8000cc0 <_Z9writeTextv+0x444>)
 8000bca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	  text7[30] = crb.shar0 / 16;
 8000bce:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000bd0:	7a5b      	ldrb	r3, [r3, #9]
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <_Z9writeTextv+0x448>)
 8000bd8:	779a      	strb	r2, [r3, #30]
	  int2letter(text7[30]);
 8000bda:	483b      	ldr	r0, [pc, #236]	; (8000cc8 <_Z9writeTextv+0x44c>)
 8000bdc:	f7ff fe34 	bl	8000848 <_Z10int2letterRc>
	  text7[31] = crb.shar0 % 16;
 8000be0:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000be2:	7a5b      	ldrb	r3, [r3, #9]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <_Z9writeTextv+0x448>)
 8000bec:	77da      	strb	r2, [r3, #31]
	  int2letter(text7[31]);
 8000bee:	4837      	ldr	r0, [pc, #220]	; (8000ccc <_Z9writeTextv+0x450>)
 8000bf0:	f7ff fe2a 	bl	8000848 <_Z10int2letterRc>

	  text8[30] = crb.shar1 / 16;
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000bf6:	7a9b      	ldrb	r3, [r3, #10]
 8000bf8:	091b      	lsrs	r3, r3, #4
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <_Z9writeTextv+0x454>)
 8000bfe:	779a      	strb	r2, [r3, #30]
	  int2letter(text8[30]);
 8000c00:	4834      	ldr	r0, [pc, #208]	; (8000cd4 <_Z9writeTextv+0x458>)
 8000c02:	f7ff fe21 	bl	8000848 <_Z10int2letterRc>
	  text8[31] = crb.shar1 % 16;
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000c08:	7a9b      	ldrb	r3, [r3, #10]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <_Z9writeTextv+0x454>)
 8000c12:	77da      	strb	r2, [r3, #31]
	  int2letter(text8[31]);
 8000c14:	4830      	ldr	r0, [pc, #192]	; (8000cd8 <_Z9writeTextv+0x45c>)
 8000c16:	f7ff fe17 	bl	8000848 <_Z10int2letterRc>

	  text9[30] = crb.shar2 / 16;
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000c1c:	7adb      	ldrb	r3, [r3, #11]
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <_Z9writeTextv+0x460>)
 8000c24:	779a      	strb	r2, [r3, #30]
	  int2letter(text9[30]);
 8000c26:	482e      	ldr	r0, [pc, #184]	; (8000ce0 <_Z9writeTextv+0x464>)
 8000c28:	f7ff fe0e 	bl	8000848 <_Z10int2letterRc>
	  text9[31] = crb.shar2 % 16;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000c2e:	7adb      	ldrb	r3, [r3, #11]
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <_Z9writeTextv+0x460>)
 8000c38:	77da      	strb	r2, [r3, #31]
	  int2letter(text9[31]);
 8000c3a:	482a      	ldr	r0, [pc, #168]	; (8000ce4 <_Z9writeTextv+0x468>)
 8000c3c:	f7ff fe04 	bl	8000848 <_Z10int2letterRc>

	  text10[30] = crb.shar3 / 16;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000c42:	7b1b      	ldrb	r3, [r3, #12]
 8000c44:	091b      	lsrs	r3, r3, #4
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <_Z9writeTextv+0x46c>)
 8000c4a:	779a      	strb	r2, [r3, #30]
	  int2letter(text10[30]);
 8000c4c:	4827      	ldr	r0, [pc, #156]	; (8000cec <_Z9writeTextv+0x470>)
 8000c4e:	f7ff fdfb 	bl	8000848 <_Z10int2letterRc>
	  text10[31] = crb.shar3 % 16;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000c54:	7b1b      	ldrb	r3, [r3, #12]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <_Z9writeTextv+0x46c>)
 8000c5e:	77da      	strb	r2, [r3, #31]
	  int2letter(text10[31]);
 8000c60:	4823      	ldr	r0, [pc, #140]	; (8000cf0 <_Z9writeTextv+0x474>)
 8000c62:	f7ff fdf1 	bl	8000848 <_Z10int2letterRc>

	  text11[30] = crb.shar4 / 16;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000c68:	7b5b      	ldrb	r3, [r3, #13]
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <_Z9writeTextv+0x478>)
 8000c70:	779a      	strb	r2, [r3, #30]
	  int2letter(text11[30]);
 8000c72:	4821      	ldr	r0, [pc, #132]	; (8000cf8 <_Z9writeTextv+0x47c>)
 8000c74:	f7ff fde8 	bl	8000848 <_Z10int2letterRc>
	  text11[31] = crb.shar4 % 16;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000c7a:	7b5b      	ldrb	r3, [r3, #13]
 8000c7c:	f003 030f 	and.w	r3, r3, #15
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <_Z9writeTextv+0x478>)
 8000c84:	77da      	strb	r2, [r3, #31]
	  int2letter(text11[31]);
 8000c86:	481d      	ldr	r0, [pc, #116]	; (8000cfc <_Z9writeTextv+0x480>)
 8000c88:	f7ff fdde 	bl	8000848 <_Z10int2letterRc>

	  text12[30] = crb.shar5 / 16;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000c8e:	7b9b      	ldrb	r3, [r3, #14]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <_Z9writeTextv+0x484>)
 8000c96:	779a      	strb	r2, [r3, #30]
	  int2letter(text12[30]);
 8000c98:	481a      	ldr	r0, [pc, #104]	; (8000d04 <_Z9writeTextv+0x488>)
 8000c9a:	f7ff fdd5 	bl	8000848 <_Z10int2letterRc>
	  text12[31] = crb.shar5 % 16;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <_Z9writeTextv+0x43c>)
 8000ca0:	7b9b      	ldrb	r3, [r3, #14]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_Z9writeTextv+0x484>)
 8000caa:	77da      	strb	r2, [r3, #31]
	  int2letter(text12[31]);
 8000cac:	4816      	ldr	r0, [pc, #88]	; (8000d08 <_Z9writeTextv+0x48c>)
 8000cae:	f7ff fdcb 	bl	8000848 <_Z10int2letterRc>
	  return;
 8000cb2:	bf00      	nop
}
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	cccccccd 	.word	0xcccccccd
 8000cc0:	200001ec 	.word	0x200001ec
 8000cc4:	20000218 	.word	0x20000218
 8000cc8:	20000236 	.word	0x20000236
 8000ccc:	20000237 	.word	0x20000237
 8000cd0:	2000023c 	.word	0x2000023c
 8000cd4:	2000025a 	.word	0x2000025a
 8000cd8:	2000025b 	.word	0x2000025b
 8000cdc:	20000260 	.word	0x20000260
 8000ce0:	2000027e 	.word	0x2000027e
 8000ce4:	2000027f 	.word	0x2000027f
 8000ce8:	20000284 	.word	0x20000284
 8000cec:	200002a2 	.word	0x200002a2
 8000cf0:	200002a3 	.word	0x200002a3
 8000cf4:	200002a8 	.word	0x200002a8
 8000cf8:	200002c6 	.word	0x200002c6
 8000cfc:	200002c7 	.word	0x200002c7
 8000d00:	200002cc 	.word	0x200002cc
 8000d04:	200002ea 	.word	0x200002ea
 8000d08:	200002eb 	.word	0x200002eb

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f000 fff3 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 fa01 	bl	800111c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 fbcd 	bl	80014b8 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000d1e:	f000 fa4d 	bl	80011bc <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000d22:	f000 fb9b 	bl	800145c <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 8000d26:	f000 fb3d 	bl	80013a4 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8000d2a:	f000 fadf 	bl	80012ec <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 8000d2e:	f000 fa81 	bl	8001234 <_ZL12MX_TIM2_Initv>

  //char temp[4];
  //utoa(crb.sipr0, temp, 4);
  //text0[23] = temp[0];

  writeText();
 8000d32:	f7ff fda3 	bl	800087c <_Z9writeTextv>

  // Включаем чип W5500 через �?бро�?
  ethernetA1.reset();
 8000d36:	4885      	ldr	r0, [pc, #532]	; (8000f4c <main+0x240>)
 8000d38:	f7ff fa46 	bl	80001c8 <_ZN5W55005resetEv>

  // Запи�?ываем "на�?тройки" в блок реги�?тров CRB
  ethernetA1.writeArrayToCRB(&crb.mr, 47, W5500_MR);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	222f      	movs	r2, #47	; 0x2f
 8000d40:	4983      	ldr	r1, [pc, #524]	; (8000f50 <main+0x244>)
 8000d42:	4882      	ldr	r0, [pc, #520]	; (8000f4c <main+0x240>)
 8000d44:	f7ff fa92 	bl	800026c <_ZN5W550015writeArrayToCRBEPhhh>

  HAL_Delay(10);
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f001 f839 	bl	8001dc0 <HAL_Delay>

  // У�?танавливаем режим UDP дл�? �?окета 0
  //ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_MR_UDP, W5500_Sn_MR);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	2202      	movs	r2, #2
 8000d52:	2108      	movs	r1, #8
 8000d54:	487d      	ldr	r0, [pc, #500]	; (8000f4c <main+0x240>)
 8000d56:	f7ff fb44 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // У�?танавливаем режим TCP дл�? �?окета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2281      	movs	r2, #129	; 0x81
 8000d5e:	2128      	movs	r1, #40	; 0x28
 8000d60:	487a      	ldr	r0, [pc, #488]	; (8000f4c <main+0x240>)
 8000d62:	f7ff fb3e 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // У�?танавливаем режим TCP дл�? �?окета 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_MR_TCP | W5500_Sn_MR_MULTI_MFEN, W5500_Sn_MR);
 8000d66:	2300      	movs	r3, #0
 8000d68:	2281      	movs	r2, #129	; 0x81
 8000d6a:	2148      	movs	r1, #72	; 0x48
 8000d6c:	4877      	ldr	r0, [pc, #476]	; (8000f4c <main+0x240>)
 8000d6e:	f7ff fb38 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке дл�? �?окета 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 8000d72:	232c      	movs	r3, #44	; 0x2c
 8000d74:	22ef      	movs	r2, #239	; 0xef
 8000d76:	2108      	movs	r1, #8
 8000d78:	4874      	ldr	r0, [pc, #464]	; (8000f4c <main+0x240>)
 8000d7a:	f7ff fb32 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке, �?оединении дл�? �?окета 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IMR_SEND_OK_OFF & W5500_Sn_IMR_CON_OFF, W5500_Sn_IMR);
 8000d7e:	232c      	movs	r3, #44	; 0x2c
 8000d80:	22ee      	movs	r2, #238	; 0xee
 8000d82:	2128      	movs	r1, #40	; 0x28
 8000d84:	4871      	ldr	r0, [pc, #452]	; (8000f4c <main+0x240>)
 8000d86:	f7ff fb2c 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Отключаем прерывани�? при отправке дл�? �?окета 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IMR_SEND_OK_OFF, W5500_Sn_IMR);
 8000d8a:	232c      	movs	r3, #44	; 0x2c
 8000d8c:	22ef      	movs	r2, #239	; 0xef
 8000d8e:	2148      	movs	r1, #72	; 0x48
 8000d90:	486e      	ldr	r0, [pc, #440]	; (8000f4c <main+0x240>)
 8000d92:	f7ff fb26 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(10);
 8000d96:	200a      	movs	r0, #10
 8000d98:	f001 f812 	bl	8001dc0 <HAL_Delay>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 0
  ethernetA1.writeArrayToSRB(SOCKET0, &srb0.sNport0, 14, W5500_Sn_PORT);
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	230e      	movs	r3, #14
 8000da2:	4a6c      	ldr	r2, [pc, #432]	; (8000f54 <main+0x248>)
 8000da4:	2108      	movs	r1, #8
 8000da6:	4869      	ldr	r0, [pc, #420]	; (8000f4c <main+0x240>)
 8000da8:	f7ff fb94 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 1
  ethernetA1.writeArrayToSRB(SOCKET1, &srb1.sNport0, 14, W5500_Sn_PORT);
 8000dac:	2304      	movs	r3, #4
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	230e      	movs	r3, #14
 8000db2:	4a69      	ldr	r2, [pc, #420]	; (8000f58 <main+0x24c>)
 8000db4:	2128      	movs	r1, #40	; 0x28
 8000db6:	4865      	ldr	r0, [pc, #404]	; (8000f4c <main+0x240>)
 8000db8:	f7ff fb8c 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  // Запи�?ываем порты, MAC, IP в блок реги�?тров SRB �?окета 2
  ethernetA1.writeArrayToSRB(SOCKET2, &srb2.sNport0, 14, W5500_Sn_PORT);
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	230e      	movs	r3, #14
 8000dc2:	4a66      	ldr	r2, [pc, #408]	; (8000f5c <main+0x250>)
 8000dc4:	2148      	movs	r1, #72	; 0x48
 8000dc6:	4861      	ldr	r0, [pc, #388]	; (8000f4c <main+0x240>)
 8000dc8:	f7ff fb84 	bl	80004d4 <_ZN5W550015writeArrayToSRBEhPhhh>

  HAL_Delay(10);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f000 fff7 	bl	8001dc0 <HAL_Delay>

  // Открываем �?окет 0
  ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	485c      	ldr	r0, [pc, #368]	; (8000f4c <main+0x240>)
 8000dda:	f7ff fb02 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем �?окет 1
  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8000dde:	2301      	movs	r3, #1
 8000de0:	2201      	movs	r2, #1
 8000de2:	2128      	movs	r1, #40	; 0x28
 8000de4:	4859      	ldr	r0, [pc, #356]	; (8000f4c <main+0x240>)
 8000de6:	f7ff fafc 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  // Открываем �?окет 2
  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8000dea:	2301      	movs	r3, #1
 8000dec:	2201      	movs	r2, #1
 8000dee:	2148      	movs	r1, #72	; 0x48
 8000df0:	4856      	ldr	r0, [pc, #344]	; (8000f4c <main+0x240>)
 8000df2:	f7ff faf6 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

  HAL_Delay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 ffe2 	bl	8001dc0 <HAL_Delay>

  // провер�?ем что �?окет 1 проиницилизирован и запу�?каем режим �?ервера
  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	2128      	movs	r1, #40	; 0x28
 8000e00:	4852      	ldr	r0, [pc, #328]	; (8000f4c <main+0x240>)
 8000e02:	f7ff fa7c 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b13      	cmp	r3, #19
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d005      	beq.n	8000e22 <main+0x116>
  {
	  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8000e16:	2301      	movs	r3, #1
 8000e18:	2202      	movs	r2, #2
 8000e1a:	2128      	movs	r1, #40	; 0x28
 8000e1c:	484b      	ldr	r0, [pc, #300]	; (8000f4c <main+0x240>)
 8000e1e:	f7ff fae0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
  }

  // провер�?ем что �?окет 2 проиницилизирован и запу�?каем режим �?ервера
  if (ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 8000e22:	2203      	movs	r2, #3
 8000e24:	2148      	movs	r1, #72	; 0x48
 8000e26:	4849      	ldr	r0, [pc, #292]	; (8000f4c <main+0x240>)
 8000e28:	f7ff fa69 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b13      	cmp	r3, #19
 8000e30:	bf0c      	ite	eq
 8000e32:	2301      	moveq	r3, #1
 8000e34:	2300      	movne	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d005      	beq.n	8000e48 <main+0x13c>
  {
	  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	2202      	movs	r2, #2
 8000e40:	2148      	movs	r1, #72	; 0x48
 8000e42:	4842      	ldr	r0, [pc, #264]	; (8000f4c <main+0x240>)
 8000e44:	f7ff facd 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
  }

  HAL_Delay(1);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 ffb9 	bl	8001dc0 <HAL_Delay>

  // Разрешаем прием по UART
  HAL_UART_Receive_IT(&huart1, &receivedByteUART, 1);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4943      	ldr	r1, [pc, #268]	; (8000f60 <main+0x254>)
 8000e52:	4844      	ldr	r0, [pc, #272]	; (8000f64 <main+0x258>)
 8000e54:	f003 f923 	bl	800409e <HAL_UART_Receive_IT>

  // очищаем флаги прерываний
  CLEAR_BIT(TIM3->SR, TIM_SR_UIF);
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <main+0x25c>)
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <main+0x25c>)
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(TIM4->SR, TIM_SR_UIF);
 8000e64:	4b41      	ldr	r3, [pc, #260]	; (8000f6c <main+0x260>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a40      	ldr	r2, [pc, #256]	; (8000f6c <main+0x260>)
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6113      	str	r3, [r2, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // провер�?ем е�?ть ли данные по UDP
	  if (socket0dataReady)
 8000e70:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <main+0x264>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d022      	beq.n	8000ebe <main+0x1b2>
	  {
		  if((HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY) || (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX))
 8000e78:	483a      	ldr	r0, [pc, #232]	; (8000f64 <main+0x258>)
 8000e7a:	f003 faff 	bl	800447c <HAL_UART_GetState>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b20      	cmp	r3, #32
 8000e82:	d005      	beq.n	8000e90 <main+0x184>
 8000e84:	4837      	ldr	r0, [pc, #220]	; (8000f64 <main+0x258>)
 8000e86:	f003 faf9 	bl	800447c <HAL_UART_GetState>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b22      	cmp	r3, #34	; 0x22
 8000e8e:	d101      	bne.n	8000e94 <main+0x188>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <main+0x18a>
 8000e94:	2300      	movs	r3, #0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d011      	beq.n	8000ebe <main+0x1b2>
		  {
			  //// изначально было TX
			  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	4834      	ldr	r0, [pc, #208]	; (8000f74 <main+0x268>)
 8000ea2:	f001 faf3 	bl	800248c <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, &receiveSocket0data[8], (sizeOfReceiveSocket0data-8));
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <main+0x26c>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	3b08      	subs	r3, #8
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4932      	ldr	r1, [pc, #200]	; (8000f7c <main+0x270>)
 8000eb2:	482c      	ldr	r0, [pc, #176]	; (8000f64 <main+0x258>)
 8000eb4:	f003 f8af 	bl	8004016 <HAL_UART_Transmit_IT>

			  socket0dataReady = false;
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <main+0x264>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // провер�?ем е�?ть ли данные по TCP
	  if (socket1dataReady)
 8000ebe:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <main+0x274>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d020      	beq.n	8000f08 <main+0x1fc>
	  {
		  if((HAL_UART_GetState(&huart1) == HAL_UART_STATE_READY) || (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX))
 8000ec6:	4827      	ldr	r0, [pc, #156]	; (8000f64 <main+0x258>)
 8000ec8:	f003 fad8 	bl	800447c <HAL_UART_GetState>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b20      	cmp	r3, #32
 8000ed0:	d005      	beq.n	8000ede <main+0x1d2>
 8000ed2:	4824      	ldr	r0, [pc, #144]	; (8000f64 <main+0x258>)
 8000ed4:	f003 fad2 	bl	800447c <HAL_UART_GetState>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b22      	cmp	r3, #34	; 0x22
 8000edc:	d101      	bne.n	8000ee2 <main+0x1d6>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <main+0x1d8>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00f      	beq.n	8000f08 <main+0x1fc>
		  {
			  //// изначально было TX
			  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eee:	4821      	ldr	r0, [pc, #132]	; (8000f74 <main+0x268>)
 8000ef0:	f001 facc 	bl	800248c <HAL_GPIO_WritePin>
			  HAL_UART_Transmit_IT(&huart1, receiveSocket1data, sizeOfReceiveSocket1data);
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <main+0x278>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4923      	ldr	r1, [pc, #140]	; (8000f88 <main+0x27c>)
 8000efc:	4819      	ldr	r0, [pc, #100]	; (8000f64 <main+0x258>)
 8000efe:	f003 f88a 	bl	8004016 <HAL_UART_Transmit_IT>

			  socket1dataReady = false;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <main+0x274>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // провер�?ем е�?ть ли данные по Telnet
	  if (socket2dataReady)
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <main+0x280>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d077      	beq.n	8001000 <main+0x2f4>
	  {
		  for(int i = 0; i < sizeOfReceiveSocket2data; ++i)
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <main+0x284>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	da3f      	bge.n	8000fa0 <main+0x294>
		  {
			  if (ptrWriteBufferTelnet <= ptrEndBufferTelnet)
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <main+0x288>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <main+0x28c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d80b      	bhi.n	8000f44 <main+0x238>
			  {
				  *ptrWriteBufferTelnet = receiveSocket2data[i];
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <main+0x288>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	491a      	ldr	r1, [pc, #104]	; (8000f9c <main+0x290>)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	440a      	add	r2, r1
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	701a      	strb	r2, [r3, #0]
				  ++ptrWriteBufferTelnet;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <main+0x288>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <main+0x288>)
 8000f42:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < sizeOfReceiveSocket2data; ++i)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e7e3      	b.n	8000f14 <main+0x208>
 8000f4c:	20002148 	.word	0x20002148
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000034 	.word	0x20000034
 8000f58:	20000064 	.word	0x20000064
 8000f5c:	20000094 	.word	0x20000094
 8000f60:	200005d0 	.word	0x200005d0
 8000f64:	2000058c 	.word	0x2000058c
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40000800 	.word	0x40000800
 8000f70:	200007dd 	.word	0x200007dd
 8000f74:	40010c00 	.word	0x40010c00
 8000f78:	20000fe6 	.word	0x20000fe6
 8000f7c:	200007e8 	.word	0x200007e8
 8000f80:	20000fe8 	.word	0x20000fe8
 8000f84:	200017f2 	.word	0x200017f2
 8000f88:	20000fec 	.word	0x20000fec
 8000f8c:	200017f4 	.word	0x200017f4
 8000f90:	20001ffe 	.word	0x20001ffe
 8000f94:	200003c8 	.word	0x200003c8
 8000f98:	200003cc 	.word	0x200003cc
 8000f9c:	200017f8 	.word	0x200017f8
			  }
		  }
		  //ptrReadBufferTelnet

		  if( *(ptrWriteBufferTelnet - 1) == '\n')
 8000fa0:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <main+0x3d4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b0a      	cmp	r3, #10
 8000faa:	d126      	bne.n	8000ffa <main+0x2ee>
		  {
			  receivedDataTelnet[counter32] = atoi(ptrReadBufferTelnet);
 8000fac:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <main+0x3d8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fc97 	bl	80048e4 <atoi>
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	4b4b      	ldr	r3, [pc, #300]	; (80010e8 <main+0x3dc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <main+0x3e0>)
 8000fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  ++counter32;
 8000fc4:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <main+0x3dc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <main+0x3dc>)
 8000fce:	701a      	strb	r2, [r3, #0]
			  ptrReadBufferTelnet = ptrWriteBufferTelnet;
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <main+0x3d4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a43      	ldr	r2, [pc, #268]	; (80010e4 <main+0x3d8>)
 8000fd6:	6013      	str	r3, [r2, #0]

			  ethernetA1.sendString(SOCKET2, arrText[typedValueCounter]);
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <main+0x3e4>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <main+0x3e8>)
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2148      	movs	r1, #72	; 0x48
 8000fe8:	4843      	ldr	r0, [pc, #268]	; (80010f8 <main+0x3ec>)
 8000fea:	f7ff fbed 	bl	80007c8 <_ZN5W550010sendStringEhPc>
			  ++typedValueCounter;
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <main+0x3e4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <main+0x3e4>)
 8000ff8:	701a      	strb	r2, [r3, #0]
		  }
		  socket2dataReady = false;
 8000ffa:	4b40      	ldr	r3, [pc, #256]	; (80010fc <main+0x3f0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
	  }



	  // провер�?ем е�?ть ли данные по UART
	  if (receivedPacketUARTisReady)
 8001000:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <main+0x3f4>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d023      	beq.n	8001050 <main+0x344>
	  {
		  if (needsTransmitUDP)
 8001008:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <main+0x3f8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00d      	beq.n	800102c <main+0x320>
		  {
			  // отправл�?ем данные, прин�?тые по UART, по UDP
			  ethernetA1.sendPacket(SOCKET0, copiedReceivedPacketUART, copiedReceivedBytesUARTCounter);
 8001010:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <main+0x3fc>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4a3d      	ldr	r2, [pc, #244]	; (800110c <main+0x400>)
 8001018:	2108      	movs	r1, #8
 800101a:	4837      	ldr	r0, [pc, #220]	; (80010f8 <main+0x3ec>)
 800101c:	f7ff fb96 	bl	800074c <_ZN5W550010sendPacketEhPht>

			  // �?бра�?ываем флаги
			  receivedPacketUARTisReady = false;
 8001020:	4b37      	ldr	r3, [pc, #220]	; (8001100 <main+0x3f4>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
			  needsTransmitUDP = false;
 8001026:	4b37      	ldr	r3, [pc, #220]	; (8001104 <main+0x3f8>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
		  }

		  if (needsTransmitTCP)
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <main+0x404>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00d      	beq.n	8001050 <main+0x344>
		  {
			  // отправл�?ем данные, прин�?тые по UART, по UDP
			  ethernetA1.sendPacket(SOCKET1, copiedReceivedPacketUART, copiedReceivedBytesUARTCounter);
 8001034:	4b34      	ldr	r3, [pc, #208]	; (8001108 <main+0x3fc>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4a34      	ldr	r2, [pc, #208]	; (800110c <main+0x400>)
 800103c:	2128      	movs	r1, #40	; 0x28
 800103e:	482e      	ldr	r0, [pc, #184]	; (80010f8 <main+0x3ec>)
 8001040:	f7ff fb84 	bl	800074c <_ZN5W550010sendPacketEhPht>

			  // �?бра�?ываем флаги
			  receivedPacketUARTisReady = false;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <main+0x3f4>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
			  needsTransmitTCP = false;
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <main+0x404>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // е�?ли �?оединение по TCP было закрыто, нужно �?нова проинициализировать �?окет и перейти в режим про�?лушки (�?ервера)
	  if (needsOpenTCP)
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <main+0x408>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01e      	beq.n	8001096 <main+0x38a>
	  {
		  // Открываем �?окет 1
		  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 8001058:	2301      	movs	r3, #1
 800105a:	2201      	movs	r2, #1
 800105c:	2128      	movs	r1, #40	; 0x28
 800105e:	4826      	ldr	r0, [pc, #152]	; (80010f8 <main+0x3ec>)
 8001060:	f7ff f9bf 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

		  HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 feab 	bl	8001dc0 <HAL_Delay>

		  // провер�?ем что �?окет 1 проиницилизирован и запу�?каем режим �?ервера
		  if (ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 800106a:	2203      	movs	r2, #3
 800106c:	2128      	movs	r1, #40	; 0x28
 800106e:	4822      	ldr	r0, [pc, #136]	; (80010f8 <main+0x3ec>)
 8001070:	f7ff f945 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 8001074:	4603      	mov	r3, r0
 8001076:	2b13      	cmp	r3, #19
 8001078:	bf0c      	ite	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	2300      	movne	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <main+0x384>
		  {
			  ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 8001084:	2301      	movs	r3, #1
 8001086:	2202      	movs	r2, #2
 8001088:	2128      	movs	r1, #40	; 0x28
 800108a:	481b      	ldr	r0, [pc, #108]	; (80010f8 <main+0x3ec>)
 800108c:	f7ff f9a9 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
		  }

		  needsOpenTCP = false;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <main+0x408>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	  }


	  // е�?ли �?оединение по Telnet было закрыто, нужно �?нова проинициализировать �?окет и перейти в режим про�?лушки (�?ервера)
	  if (needsOpenTelnet)
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <main+0x40c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f43f aee8 	beq.w	8000e70 <main+0x164>
	  {
		  // Открываем �?окет 2
		  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_OPEN, W5500_Sn_CR);
 80010a0:	2301      	movs	r3, #1
 80010a2:	2201      	movs	r2, #1
 80010a4:	2148      	movs	r1, #72	; 0x48
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <main+0x3ec>)
 80010a8:	f7ff f99b 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>

		  HAL_Delay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f000 fe87 	bl	8001dc0 <HAL_Delay>

		  // провер�?ем что �?окет 2 проиницилизирован и запу�?каем режим �?ервера
		  if (ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_SR) == W5500_Sn_SR_SOCK_INIT)
 80010b2:	2203      	movs	r2, #3
 80010b4:	2148      	movs	r1, #72	; 0x48
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <main+0x3ec>)
 80010b8:	f7ff f921 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b13      	cmp	r3, #19
 80010c0:	bf0c      	ite	eq
 80010c2:	2301      	moveq	r3, #1
 80010c4:	2300      	movne	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <main+0x3cc>
		  {
			  ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_LISTEN, W5500_Sn_CR);
 80010cc:	2301      	movs	r3, #1
 80010ce:	2202      	movs	r2, #2
 80010d0:	2148      	movs	r1, #72	; 0x48
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <main+0x3ec>)
 80010d4:	f7ff f985 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
		  }

		  needsOpenTelnet = false;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <main+0x40c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	  }
*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80010de:	e6c7      	b.n	8000e70 <main+0x164>
 80010e0:	200003c8 	.word	0x200003c8
 80010e4:	200003c4 	.word	0x200003c4
 80010e8:	20002144 	.word	0x20002144
 80010ec:	20002104 	.word	0x20002104
 80010f0:	20002100 	.word	0x20002100
 80010f4:	2000038c 	.word	0x2000038c
 80010f8:	20002148 	.word	0x20002148
 80010fc:	200017f4 	.word	0x200017f4
 8001100:	200006d5 	.word	0x200006d5
 8001104:	200007d9 	.word	0x200007d9
 8001108:	200007d8 	.word	0x200007d8
 800110c:	200006d8 	.word	0x200006d8
 8001110:	200007da 	.word	0x200007da
 8001114:	200007db 	.word	0x200007db
 8001118:	200007dc 	.word	0x200007dc

0800111c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b090      	sub	sp, #64	; 0x40
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	2228      	movs	r2, #40	; 0x28
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f003 fc08 	bl	8004940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001146:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800115a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	4618      	mov	r0, r3
 8001166:	f001 f9c1 	bl	80024ec <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf14      	ite	ne
 8001170:	2301      	movne	r3, #1
 8001172:	2300      	moveq	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800117a:	f000 fbbd 	bl	80018f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fc29 	bl	80029f0 <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80011ae:	f000 fba3 	bl	80018f8 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3740      	adds	r7, #64	; 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <_ZL12MX_SPI1_Initv+0x74>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011f0:	2208      	movs	r2, #8
 80011f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120c:	4807      	ldr	r0, [pc, #28]	; (800122c <_ZL12MX_SPI1_Initv+0x70>)
 800120e:	f001 fd89 	bl	8002d24 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	bf14      	ite	ne
 8001218:	2301      	movne	r3, #1
 800121a:	2300      	moveq	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001222:	f000 fb69 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000045c 	.word	0x2000045c
 8001230:	40013000 	.word	0x40013000

08001234 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 800125a:	2264      	movs	r2, #100	; 0x64
 800125c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001266:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800126a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001278:	481b      	ldr	r0, [pc, #108]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 800127a:	f002 fa5f 	bl	800373c <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 800128e:	f000 fb33 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 80012a0:	f002 fc1c 	bl	8003adc <HAL_TIM_ConfigClockSource>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80012b4:	f000 fb20 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <_ZL12MX_TIM2_Initv+0xb4>)
 80012c6:	f002 fde9 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80012da:	f000 fb0d 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200004b4 	.word	0x200004b4

080012ec <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 800130a:	4a25      	ldr	r2, [pc, #148]	; (80013a0 <_ZL12MX_TIM3_Initv+0xb4>)
 800130c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 8001310:	2201      	movs	r2, #1
 8001312:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 800131c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001320:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800132e:	481b      	ldr	r0, [pc, #108]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 8001330:	f002 fa04 	bl	800373c <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf14      	ite	ne
 800133a:	2301      	movne	r3, #1
 800133c:	2300      	moveq	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8001344:	f000 fad8 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4619      	mov	r1, r3
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 8001356:	f002 fbc1 	bl	8003adc <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf14      	ite	ne
 8001360:	2301      	movne	r3, #1
 8001362:	2300      	moveq	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 800136a:	f000 fac5 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	4619      	mov	r1, r3
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <_ZL12MX_TIM3_Initv+0xb0>)
 800137c:	f002 fd8e 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8001390:	f000 fab2 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200004fc 	.word	0x200004fc
 80013a0:	40000400 	.word	0x40000400

080013a4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 80013c2:	4a25      	ldr	r2, [pc, #148]	; (8001458 <_ZL12MX_TIM4_Initv+0xb4>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 80013c8:	2203      	movs	r2, #3
 80013ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 80013d4:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80013d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013e6:	481b      	ldr	r0, [pc, #108]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 80013e8:	f002 f9a8 	bl	800373c <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf14      	ite	ne
 80013f2:	2301      	movne	r3, #1
 80013f4:	2300      	moveq	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 80013fc:	f000 fa7c 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4619      	mov	r1, r3
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 800140e:	f002 fb65 	bl	8003adc <HAL_TIM_ConfigClockSource>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf14      	ite	ne
 8001418:	2301      	movne	r3, #1
 800141a:	2300      	moveq	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001422:	f000 fa69 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <_ZL12MX_TIM4_Initv+0xb0>)
 8001434:	f002 fd32 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001448:	f000 fa56 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000544 	.word	0x20000544
 8001458:	40000800 	.word	0x40000800

0800145c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001462:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800146c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	4807      	ldr	r0, [pc, #28]	; (80014b0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001494:	f002 fd72 	bl	8003f7c <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	bf14      	ite	ne
 800149e:	2301      	movne	r3, #1
 80014a0:	2300      	moveq	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80014a8:	f000 fa26 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000058c 	.word	0x2000058c
 80014b4:	40013800 	.word	0x40013800

080014b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014cc:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a41      	ldr	r2, [pc, #260]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 80014ea:	f043 0320 	orr.w	r3, r3, #32
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0320 	and.w	r3, r3, #32
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a3b      	ldr	r2, [pc, #236]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a35      	ldr	r2, [pc, #212]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <_ZL12MX_GPIO_Initv+0x138>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2110      	movs	r1, #16
 8001530:	4830      	ldr	r0, [pc, #192]	; (80015f4 <_ZL12MX_GPIO_Initv+0x13c>)
 8001532:	f000 ffab 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2120      	movs	r1, #32
 800153a:	482e      	ldr	r0, [pc, #184]	; (80015f4 <_ZL12MX_GPIO_Initv+0x13c>)
 800153c:	f000 ffa6 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001546:	482c      	ldr	r0, [pc, #176]	; (80015f8 <_ZL12MX_GPIO_Initv+0x140>)
 8001548:	f000 ffa0 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RSTBUTTON_Pin */
  GPIO_InitStruct.Pin = RSTBUTTON_Pin;
 800154c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RSTBUTTON_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	4824      	ldr	r0, [pc, #144]	; (80015f4 <_ZL12MX_GPIO_Initv+0x13c>)
 8001562:	f000 fe0f 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8001566:	2310      	movs	r3, #16
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <_ZL12MX_GPIO_Initv+0x144>)
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	4821      	ldr	r0, [pc, #132]	; (8001600 <_ZL12MX_GPIO_Initv+0x148>)
 800157a:	f000 fe03 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 800157e:	2330      	movs	r3, #48	; 0x30
 8001580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2302      	movs	r3, #2
 800158c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4619      	mov	r1, r3
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <_ZL12MX_GPIO_Initv+0x13c>)
 8001596:	f000 fdf5 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 800159a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800159e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015a0:	2311      	movs	r3, #17
 80015a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4619      	mov	r1, r3
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <_ZL12MX_GPIO_Initv+0x140>)
 80015b4:	f000 fde6 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 80015b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <_ZL12MX_GPIO_Initv+0x140>)
 80015d2:	f000 fdd7 	bl	8002184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	200a      	movs	r0, #10
 80015dc:	f000 fceb 	bl	8001fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015e0:	200a      	movs	r0, #10
 80015e2:	f000 fd04 	bl	8001fee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	10210000 	.word	0x10210000
 8001600:	40010800 	.word	0x40010800

08001604 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_UART_RxCpltCallback+0x5c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d121      	bne.n	8001658 <HAL_UART_RxCpltCallback+0x54>
  {
	  //// изначально было так - // включаем cветодиод "RX"
	  //// HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);

	  // включаем cветодиод "TX"
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <HAL_UART_RxCpltCallback+0x60>)
 800161c:	f000 ff36 	bl	800248c <HAL_GPIO_WritePin>

	  // запу�?каем таймер TIM4, от�?читываем врем�? �?вечени�? cветодиода "RX"
	  HAL_TIM_Base_Start_IT(&htim4);
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <HAL_UART_RxCpltCallback+0x64>)
 8001622:	f002 f901 	bl	8003828 <HAL_TIM_Base_Start_IT>

	  //HAL_TIM_Base_Stop(&htim3);

	  // обнул�?ем �?четчик таймера TIM3
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_RxCpltCallback+0x68>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24

	  // запу�?каем таймер TIM3, от�?читываем врем�? до �?ледующего пакета по RX
	  HAL_TIM_Base_Start_IT(&htim3);
 800162e:	480f      	ldr	r0, [pc, #60]	; (800166c <HAL_UART_RxCpltCallback+0x68>)
 8001630:	f002 f8fa 	bl	8003828 <HAL_TIM_Base_Start_IT>

	  // �?охран�?ем полученный байт в буфер
	  receivedPacketUART[receivedBytesUARTCounter] = receivedByteUART;
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_UART_RxCpltCallback+0x6c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_UART_RxCpltCallback+0x70>)
 800163c:	7819      	ldrb	r1, [r3, #0]
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_UART_RxCpltCallback+0x74>)
 8001640:	5499      	strb	r1, [r3, r2]

	  //buf1.put(rxByte);

	  // инкрементируем �?четчик полученных байт
	  receivedBytesUARTCounter++;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_UART_RxCpltCallback+0x6c>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_UART_RxCpltCallback+0x6c>)
 800164c:	701a      	strb	r2, [r3, #0]

	  // �?нова ждем приема байта по UART1
	  HAL_UART_Receive_IT(&huart1, &receivedByteUART, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	4908      	ldr	r1, [pc, #32]	; (8001674 <HAL_UART_RxCpltCallback+0x70>)
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <HAL_UART_RxCpltCallback+0x5c>)
 8001654:	f002 fd23 	bl	800409e <HAL_UART_Receive_IT>
  }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000058c 	.word	0x2000058c
 8001664:	40010c00 	.word	0x40010c00
 8001668:	20000544 	.word	0x20000544
 800166c:	200004fc 	.word	0x200004fc
 8001670:	200006d4 	.word	0x200006d4
 8001674:	200005d0 	.word	0x200005d0
 8001678:	200005d4 	.word	0x200005d4

0800167c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_UART_TxCpltCallback+0x24>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d105      	bne.n	8001698 <HAL_UART_TxCpltCallback+0x1c>
  {
	  //// изначально было так - // гаcим cветодиод "TX"
	  //// HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);

	  // гаcим cветодиод "RX"
	  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <HAL_UART_TxCpltCallback+0x28>)
 8001694:	f000 fefa 	bl	800248c <HAL_GPIO_WritePin>
  }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000058c 	.word	0x2000058c
 80016a4:	40010c00 	.word	0x40010c00

080016a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from TIM3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d121      	bne.n	80016fe <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		HAL_TIM_Base_Stop(&htim3);
 80016ba:	481b      	ldr	r0, [pc, #108]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016bc:	f002 f88d 	bl	80037da <HAL_TIM_Base_Stop>

		// копируем полученный пакет
		for (int i = 0; i < receivedBytesUARTCounter; ++i)
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	da0c      	bge.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			copiedReceivedPacketUART[i] = receivedPacketUART[i];
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4413      	add	r3, r2
 80016d6:	7819      	ldrb	r1, [r3, #0]
 80016d8:	4a16      	ldr	r2, [pc, #88]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	460a      	mov	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < receivedBytesUARTCounter; ++i)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e7ec      	b.n	80016c4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
		// копируем �?четчик полученных байт
		copiedReceivedBytesUARTCounter = receivedBytesUARTCounter;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016f0:	701a      	strb	r2, [r3, #0]

		// у�?танавливаем флаг о готовно�?ти пакета, прин�?того по UART
		receivedPacketUARTisReady = true;
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]

		// обнул�?ем �?четчик полученных байт
		receivedBytesUARTCounter = 0;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM4
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d108      	bne.n	800171a <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		HAL_TIM_Base_Stop(&htim4);
 8001708:	480e      	ldr	r0, [pc, #56]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800170a:	f002 f866 	bl	80037da <HAL_TIM_Base_Stop>

		//// изначально было так - // гаcим cветодиод "RX"
		//// HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);

		// гаcим cветодиод "TX"
		HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001716:	f000 feb9 	bl	800248c <HAL_GPIO_WritePin>
	}
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40000400 	.word	0x40000400
 8001728:	200004fc 	.word	0x200004fc
 800172c:	200006d4 	.word	0x200006d4
 8001730:	200005d4 	.word	0x200005d4
 8001734:	200006d8 	.word	0x200006d8
 8001738:	200007d8 	.word	0x200007d8
 800173c:	200006d5 	.word	0x200006d5
 8001740:	40000800 	.word	0x40000800
 8001744:	20000544 	.word	0x20000544
 8001748:	40010c00 	.word	0x40010c00

0800174c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == W5500_INT_Pin)
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	2b10      	cmp	r3, #16
 800175a:	f040 80aa 	bne.w	80018b2 <HAL_GPIO_EXTI_Callback+0x166>
	{
		// читаем флаги прерываний от �?окетов
		uint8_t valueSIR = ethernetA1.readByteFromCRB(W5500_SIR);
 800175e:	2117      	movs	r1, #23
 8001760:	4856      	ldr	r0, [pc, #344]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 8001762:	f7fe fd4f 	bl	8000204 <_ZN5W550015readByteFromCRBEh>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
		uint8_t valueSn_IR {0};
 800176a:	2300      	movs	r3, #0
 800176c:	73bb      	strb	r3, [r7, #14]
		if (valueSIR)
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 809e 	beq.w	80018b2 <HAL_GPIO_EXTI_Callback+0x166>
		{
			if (valueSIR & W5500_S0_INT)
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01d      	beq.n	80017bc <HAL_GPIO_EXTI_Callback+0x70>
			{
				// читаем флаги прерываний �?окета 0
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET0, W5500_Sn_IR);
 8001780:	2202      	movs	r2, #2
 8001782:	2108      	movs	r1, #8
 8001784:	484d      	ldr	r0, [pc, #308]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 8001786:	f7fe fdba 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 800178a:	4603      	mov	r3, r0
 800178c:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 800178e:	7bbb      	ldrb	r3, [r7, #14]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d011      	beq.n	80017bc <HAL_GPIO_EXTI_Callback+0x70>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET0, receiveSocket0data, &sizeOfReceiveSocket0data);
 8001798:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x174>)
 800179a:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x178>)
 800179c:	2108      	movs	r1, #8
 800179e:	4847      	ldr	r0, [pc, #284]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 80017a0:	f7fe ff83 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket0dataReady = true;
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x17c>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
					needsTransmitUDP = true;
 80017aa:	4b48      	ldr	r3, [pc, #288]	; (80018cc <HAL_GPIO_EXTI_Callback+0x180>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S0_IR
					ethernetA1.writeByteToSRB(SOCKET0, W5500_Sn_IR_RECV, W5500_Sn_IR);
 80017b0:	2302      	movs	r3, #2
 80017b2:	2204      	movs	r2, #4
 80017b4:	2108      	movs	r1, #8
 80017b6:	4841      	ldr	r0, [pc, #260]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 80017b8:	f7fe fe13 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				{

				}
			}

			if (valueSIR & W5500_S1_INT)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d031      	beq.n	800182a <HAL_GPIO_EXTI_Callback+0xde>
			{
				// читаем флаги прерываний �?окета 1
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET1, W5500_Sn_IR);
 80017c6:	2202      	movs	r2, #2
 80017c8:	2128      	movs	r1, #40	; 0x28
 80017ca:	483c      	ldr	r0, [pc, #240]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 80017cc:	f7fe fd97 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d011      	beq.n	8001802 <HAL_GPIO_EXTI_Callback+0xb6>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET1, receiveSocket1data, &sizeOfReceiveSocket1data);
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x184>)
 80017e0:	4a3c      	ldr	r2, [pc, #240]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x188>)
 80017e2:	2128      	movs	r1, #40	; 0x28
 80017e4:	4835      	ldr	r0, [pc, #212]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 80017e6:	f7fe ff60 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket1dataReady = true;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x18c>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
					needsTransmitTCP = true;
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <HAL_GPIO_EXTI_Callback+0x190>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_RECV, W5500_Sn_IR);
 80017f6:	2302      	movs	r3, #2
 80017f8:	2204      	movs	r2, #4
 80017fa:	2128      	movs	r1, #40	; 0x28
 80017fc:	482f      	ldr	r0, [pc, #188]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 80017fe:	f7fe fdf0 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				if (valueSn_IR & W5500_Sn_IR_CON) // �?оединение �? пиром у�?пешно у�?тановлено
				{

				}

				if (valueSn_IR & W5500_Sn_IR_DISCON) // от пира получен пакет FIN или FIN/ACK
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00e      	beq.n	800182a <HAL_GPIO_EXTI_Callback+0xde>
				{
					// отправл�?ем команду DISCONNECT
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 800180c:	2301      	movs	r3, #1
 800180e:	2208      	movs	r2, #8
 8001810:	2128      	movs	r1, #40	; 0x28
 8001812:	482a      	ldr	r0, [pc, #168]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 8001814:	f7fe fde5 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
					// у�?танавливаем флаг
					needsOpenTCP = true;
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_GPIO_EXTI_Callback+0x194>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET1, W5500_Sn_IR_DISCON, W5500_Sn_IR);
 800181e:	2302      	movs	r3, #2
 8001820:	2202      	movs	r2, #2
 8001822:	2128      	movs	r1, #40	; 0x28
 8001824:	4825      	ldr	r0, [pc, #148]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 8001826:	f7fe fddc 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				{

				}
			}

			if (valueSIR & W5500_S2_INT)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d03e      	beq.n	80018b2 <HAL_GPIO_EXTI_Callback+0x166>
			{
				// читаем флаги прерываний �?окета 2
				valueSn_IR = ethernetA1.readByteFromSRB(SOCKET2, W5500_Sn_IR);
 8001834:	2202      	movs	r2, #2
 8001836:	2148      	movs	r1, #72	; 0x48
 8001838:	4820      	ldr	r0, [pc, #128]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 800183a:	f7fe fd60 	bl	80002fe <_ZN5W550015readByteFromSRBEhh>
 800183e:	4603      	mov	r3, r0
 8001840:	73bb      	strb	r3, [r7, #14]

				if (valueSn_IR & W5500_Sn_IR_RECV) // получен пакет
 8001842:	7bbb      	ldrb	r3, [r7, #14]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00e      	beq.n	800186a <HAL_GPIO_EXTI_Callback+0x11e>
				{
					// принимаем полученные данные
					ethernetA1.receivePacket(SOCKET2, receiveSocket2data, &sizeOfReceiveSocket2data);
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_GPIO_EXTI_Callback+0x198>)
 800184e:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001850:	2148      	movs	r1, #72	; 0x48
 8001852:	481a      	ldr	r0, [pc, #104]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 8001854:	f7fe ff29 	bl	80006aa <_ZN5W550013receivePacketEhPhPt>
					// у�?танавливаем флаги
					socket2dataReady = true;
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_GPIO_EXTI_Callback+0x1a0>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
					//needsTransmitTCP = true;
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_RECV, W5500_Sn_IR);
 800185e:	2302      	movs	r3, #2
 8001860:	2204      	movs	r2, #4
 8001862:	2148      	movs	r1, #72	; 0x48
 8001864:	4815      	ldr	r0, [pc, #84]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 8001866:	f7fe fdbc 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				if (valueSn_IR & W5500_Sn_IR_SEND_OK) // команда SEND выполнена
				{

				}

				if (valueSn_IR & W5500_Sn_IR_CON) // �?оединение �? пиром у�?пешно у�?тановлено
 800186a:	7bbb      	ldrb	r3, [r7, #14]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00a      	beq.n	800188a <HAL_GPIO_EXTI_Callback+0x13e>
				{
					ethernetA1.sendString(SOCKET2, textConnected);
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001876:	2148      	movs	r1, #72	; 0x48
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 800187a:	f7fe ffa5 	bl	80007c8 <_ZN5W550010sendStringEhPc>
					// �?бра�?ываем флаг прерывани�? CON в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_CON, W5500_Sn_IR);
 800187e:	2302      	movs	r3, #2
 8001880:	2201      	movs	r2, #1
 8001882:	2148      	movs	r1, #72	; 0x48
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 8001886:	f7fe fdac 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
				}

				if (valueSn_IR & W5500_Sn_IR_DISCON) // от пира получен пакет FIN или FIN/ACK
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00e      	beq.n	80018b2 <HAL_GPIO_EXTI_Callback+0x166>
				{
					// отправл�?ем команду DISCONNECT
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_CR_DISCON, W5500_Sn_CR);
 8001894:	2301      	movs	r3, #1
 8001896:	2208      	movs	r2, #8
 8001898:	2148      	movs	r1, #72	; 0x48
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 800189c:	f7fe fda1 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
					// у�?танавливаем флаг
					needsOpenTelnet = true;
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
					// �?бра�?ываем флаг прерывани�? RECV в реги�?тре S1_IR
					ethernetA1.writeByteToSRB(SOCKET2, W5500_Sn_IR_DISCON, W5500_Sn_IR);
 80018a6:	2302      	movs	r3, #2
 80018a8:	2202      	movs	r2, #2
 80018aa:	2148      	movs	r1, #72	; 0x48
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <HAL_GPIO_EXTI_Callback+0x170>)
 80018ae:	f7fe fd98 	bl	80003e2 <_ZN5W550014writeByteToSRBEhhh>
			}


		}
	}
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20002148 	.word	0x20002148
 80018c0:	20000fe6 	.word	0x20000fe6
 80018c4:	200007e0 	.word	0x200007e0
 80018c8:	200007dd 	.word	0x200007dd
 80018cc:	200007d9 	.word	0x200007d9
 80018d0:	200017f2 	.word	0x200017f2
 80018d4:	20000fec 	.word	0x20000fec
 80018d8:	20000fe8 	.word	0x20000fe8
 80018dc:	200007da 	.word	0x200007da
 80018e0:	200007db 	.word	0x200007db
 80018e4:	20001ffe 	.word	0x20001ffe
 80018e8:	200017f8 	.word	0x200017f8
 80018ec:	200017f4 	.word	0x200017f4
 80018f0:	200000c0 	.word	0x200000c0
 80018f4:	200007dc 	.word	0x200007dc

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	e7fe      	b.n	8001900 <Error_Handler+0x8>
	...

08001904 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af02      	add	r7, sp, #8
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10e      	bne.n	8001932 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191a:	4293      	cmp	r3, r2
 800191c:	d109      	bne.n	8001932 <_Z41__static_initialization_and_destruction_0ii+0x2e>
W5500 ethernetA1(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);
 800191e:	2310      	movs	r3, #16
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2320      	movs	r3, #32
 8001928:	4a09      	ldr	r2, [pc, #36]	; (8001950 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800192c:	480a      	ldr	r0, [pc, #40]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800192e:	f7fe fc15 	bl	800015c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193e:	4293      	cmp	r3, r2
 8001940:	d102      	bne.n	8001948 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001944:	f7fe fc36 	bl	80001b4 <_ZN5W5500D1Ev>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40011000 	.word	0x40011000
 8001954:	2000045c 	.word	0x2000045c
 8001958:	20002148 	.word	0x20002148

0800195c <_GLOBAL__sub_I_hspi1>:
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
 8001960:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff ffcd 	bl	8001904 <_Z41__static_initialization_and_destruction_0ii>
 800196a:	bd80      	pop	{r7, pc}

0800196c <_GLOBAL__sub_D_hspi1>:
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
 8001970:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff ffc5 	bl	8001904 <_Z41__static_initialization_and_destruction_0ii>
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_MspInit+0x5c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_MspInit+0x5c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_MspInit+0x5c>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_MspInit+0x5c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_MspInit+0x60>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_MspInit+0x60>)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000

080019e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <HAL_SPI_MspInit+0x98>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d137      	bne.n	8001a70 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_SPI_MspInit+0x9c>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_SPI_MspInit+0x9c>)
 8001a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_SPI_MspInit+0x9c>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_SPI_MspInit+0x9c>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_SPI_MspInit+0x9c>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_SPI_MspInit+0x9c>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a30:	23a0      	movs	r3, #160	; 0xa0
 8001a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	4619      	mov	r1, r3
 8001a42:	480f      	ldr	r0, [pc, #60]	; (8001a80 <HAL_SPI_MspInit+0xa0>)
 8001a44:	f000 fb9e 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a48:	2340      	movs	r3, #64	; 0x40
 8001a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <HAL_SPI_MspInit+0xa0>)
 8001a5c:	f000 fb92 	bl	8002184 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2023      	movs	r0, #35	; 0x23
 8001a66:	f000 faa6 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a6a:	2023      	movs	r0, #35	; 0x23
 8001a6c:	f000 fabf 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40013000 	.word	0x40013000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010800 	.word	0x40010800

08001a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a94:	d114      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f000 fa7f 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab8:	201c      	movs	r0, #28
 8001aba:	f000 fa98 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001abe:	e032      	b.n	8001b26 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_TIM_Base_MspInit+0xb0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d114      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	201d      	movs	r0, #29
 8001ae8:	f000 fa65 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aec:	201d      	movs	r0, #29
 8001aee:	f000 fa7e 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 8001af2:	e018      	b.n	8001b26 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_TIM_Base_MspInit+0xb4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d113      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_TIM_Base_MspInit+0xac>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201e      	movs	r0, #30
 8001b1c:	f000 fa4b 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b20:	201e      	movs	r0, #30
 8001b22:	f000 fa64 	bl	8001fee <HAL_NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40000800 	.word	0x40000800

08001b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_UART_MspInit+0x9c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d139      	bne.n	8001bd0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_UART_MspInit+0xa0>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_UART_MspInit+0xa0>)
 8001b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_UART_MspInit+0xa0>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_UART_MspInit+0xa0>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_UART_MspInit+0xa0>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_UART_MspInit+0xa0>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480f      	ldr	r0, [pc, #60]	; (8001be0 <HAL_UART_MspInit+0xa4>)
 8001ba2:	f000 faef 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <HAL_UART_MspInit+0xa4>)
 8001bbc:	f000 fae2 	bl	8002184 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2025      	movs	r0, #37	; 0x25
 8001bc6:	f000 f9f6 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bca:	2025      	movs	r0, #37	; 0x25
 8001bcc:	f000 fa0f 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010800 	.word	0x40010800

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2a:	f000 f8ad 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 8001c36:	2010      	movs	r0, #16
 8001c38:	f000 fc40 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <TIM2_IRQHandler+0x10>)
 8001c46:	f001 fe41 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200004b4 	.word	0x200004b4

08001c54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <TIM3_IRQHandler+0x10>)
 8001c5a:	f001 fe37 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200004fc 	.word	0x200004fc

08001c68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <TIM4_IRQHandler+0x10>)
 8001c6e:	f001 fe2d 	bl	80038cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000544 	.word	0x20000544

08001c7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <SPI1_IRQHandler+0x10>)
 8001c82:	f001 fbb1 	bl	80033e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000045c 	.word	0x2000045c

08001c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <USART1_IRQHandler+0x10>)
 8001c96:	f002 fa33 	bl	8004100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000058c 	.word	0x2000058c

08001ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cd6:	f7ff ffe5 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cda:	f002 fe0d 	bl	80048f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cde:	f7ff f815 	bl	8000d0c <main>
  bx lr
 8001ce2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	20000440 	.word	0x20000440
  ldr r2, =_sidata
 8001cec:	08004bb0 	.word	0x08004bb0
  ldr r2, =_sbss
 8001cf0:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8001cf4:	2000235c 	.word	0x2000235c

08001cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC1_2_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_Init+0x28>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_Init+0x28>)
 8001d06:	f043 0310 	orr.w	r3, r3, #16
 8001d0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f000 f947 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d12:	200f      	movs	r0, #15
 8001d14:	f000 f808 	bl	8001d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d18:	f7ff fe30 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x54>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_InitTick+0x58>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f95f 	bl	800200a <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00e      	b.n	8001d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d80a      	bhi.n	8001d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f000 f927 	bl	8001fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_InitTick+0x5c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200003d0 	.word	0x200003d0
 8001d80:	200003d8 	.word	0x200003d8
 8001d84:	200003d4 	.word	0x200003d4

08001d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_IncTick+0x1c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_IncTick+0x20>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <HAL_IncTick+0x20>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	200003d8 	.word	0x200003d8
 8001da8:	20002358 	.word	0x20002358

08001dac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <HAL_GetTick+0x10>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20002358 	.word	0x20002358

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d005      	beq.n	8001de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_Delay+0x44>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffe0 	bl	8001dac <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8f7      	bhi.n	8001de8 <HAL_Delay+0x28>
  {
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200003d8 	.word	0x200003d8

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4906      	ldr	r1, [pc, #24]	; (8001ea0 <__NVIC_EnableIRQ+0x34>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6c:	d301      	bcc.n	8001f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00f      	b.n	8001f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <SysTick_Config+0x40>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7ff ff90 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SysTick_Config+0x40>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SysTick_Config+0x40>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff2d 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff42 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff90 	bl	8001ef8 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5f 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff35 	bl	8001e6c <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffa2 	bl	8001f5c <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002034:	2b02      	cmp	r3, #2
 8002036:	d008      	beq.n	800204a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2204      	movs	r2, #4
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e020      	b.n	800208c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 020e 	bic.w	r2, r2, #14
 8002058:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
	...

08002098 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d005      	beq.n	80020ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2204      	movs	r2, #4
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e051      	b.n	800215e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 020e 	bic.w	r2, r2, #14
 80020c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0201 	bic.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_DMA_Abort_IT+0xd0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d029      	beq.n	8002138 <HAL_DMA_Abort_IT+0xa0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a20      	ldr	r2, [pc, #128]	; (800216c <HAL_DMA_Abort_IT+0xd4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d022      	beq.n	8002134 <HAL_DMA_Abort_IT+0x9c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_DMA_Abort_IT+0xd8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d01a      	beq.n	800212e <HAL_DMA_Abort_IT+0x96>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_DMA_Abort_IT+0xdc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d012      	beq.n	8002128 <HAL_DMA_Abort_IT+0x90>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_DMA_Abort_IT+0xe0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00a      	beq.n	8002122 <HAL_DMA_Abort_IT+0x8a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1a      	ldr	r2, [pc, #104]	; (800217c <HAL_DMA_Abort_IT+0xe4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d102      	bne.n	800211c <HAL_DMA_Abort_IT+0x84>
 8002116:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800211a:	e00e      	b.n	800213a <HAL_DMA_Abort_IT+0xa2>
 800211c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002120:	e00b      	b.n	800213a <HAL_DMA_Abort_IT+0xa2>
 8002122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002126:	e008      	b.n	800213a <HAL_DMA_Abort_IT+0xa2>
 8002128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212c:	e005      	b.n	800213a <HAL_DMA_Abort_IT+0xa2>
 800212e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002132:	e002      	b.n	800213a <HAL_DMA_Abort_IT+0xa2>
 8002134:	2310      	movs	r3, #16
 8002136:	e000      	b.n	800213a <HAL_DMA_Abort_IT+0xa2>
 8002138:	2301      	movs	r3, #1
 800213a:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_DMA_Abort_IT+0xe8>)
 800213c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
    } 
  }
  return status;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40020008 	.word	0x40020008
 800216c:	4002001c 	.word	0x4002001c
 8002170:	40020030 	.word	0x40020030
 8002174:	40020044 	.word	0x40020044
 8002178:	40020058 	.word	0x40020058
 800217c:	4002006c 	.word	0x4002006c
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b08b      	sub	sp, #44	; 0x2c
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	e169      	b.n	800246c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002198:	2201      	movs	r2, #1
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8158 	bne.w	8002466 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a9a      	ldr	r2, [pc, #616]	; (8002424 <HAL_GPIO_Init+0x2a0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d05e      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021c0:	4a98      	ldr	r2, [pc, #608]	; (8002424 <HAL_GPIO_Init+0x2a0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d875      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021c6:	4a98      	ldr	r2, [pc, #608]	; (8002428 <HAL_GPIO_Init+0x2a4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d058      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021cc:	4a96      	ldr	r2, [pc, #600]	; (8002428 <HAL_GPIO_Init+0x2a4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d86f      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021d2:	4a96      	ldr	r2, [pc, #600]	; (800242c <HAL_GPIO_Init+0x2a8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d052      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021d8:	4a94      	ldr	r2, [pc, #592]	; (800242c <HAL_GPIO_Init+0x2a8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d869      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021de:	4a94      	ldr	r2, [pc, #592]	; (8002430 <HAL_GPIO_Init+0x2ac>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04c      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021e4:	4a92      	ldr	r2, [pc, #584]	; (8002430 <HAL_GPIO_Init+0x2ac>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d863      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021ea:	4a92      	ldr	r2, [pc, #584]	; (8002434 <HAL_GPIO_Init+0x2b0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d046      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021f0:	4a90      	ldr	r2, [pc, #576]	; (8002434 <HAL_GPIO_Init+0x2b0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d85d      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d82a      	bhi.n	8002250 <HAL_GPIO_Init+0xcc>
 80021fa:	2b12      	cmp	r3, #18
 80021fc:	d859      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021fe:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <HAL_GPIO_Init+0x80>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	0800227f 	.word	0x0800227f
 8002208:	08002259 	.word	0x08002259
 800220c:	0800226b 	.word	0x0800226b
 8002210:	080022ad 	.word	0x080022ad
 8002214:	080022b3 	.word	0x080022b3
 8002218:	080022b3 	.word	0x080022b3
 800221c:	080022b3 	.word	0x080022b3
 8002220:	080022b3 	.word	0x080022b3
 8002224:	080022b3 	.word	0x080022b3
 8002228:	080022b3 	.word	0x080022b3
 800222c:	080022b3 	.word	0x080022b3
 8002230:	080022b3 	.word	0x080022b3
 8002234:	080022b3 	.word	0x080022b3
 8002238:	080022b3 	.word	0x080022b3
 800223c:	080022b3 	.word	0x080022b3
 8002240:	080022b3 	.word	0x080022b3
 8002244:	080022b3 	.word	0x080022b3
 8002248:	08002261 	.word	0x08002261
 800224c:	08002275 	.word	0x08002275
 8002250:	4a79      	ldr	r2, [pc, #484]	; (8002438 <HAL_GPIO_Init+0x2b4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002256:	e02c      	b.n	80022b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e029      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	3304      	adds	r3, #4
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e024      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	3308      	adds	r3, #8
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e01f      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	330c      	adds	r3, #12
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e01a      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002286:	2304      	movs	r3, #4
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e013      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002294:	2308      	movs	r3, #8
 8002296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	611a      	str	r2, [r3, #16]
          break;
 800229e:	e009      	b.n	80022b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a0:	2308      	movs	r3, #8
 80022a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	615a      	str	r2, [r3, #20]
          break;
 80022aa:	e003      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
          break;
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          break;
 80022b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2bff      	cmp	r3, #255	; 0xff
 80022b8:	d801      	bhi.n	80022be <HAL_GPIO_Init+0x13a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_Init+0x13e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d802      	bhi.n	80022d0 <HAL_GPIO_Init+0x14c>
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	e002      	b.n	80022d6 <HAL_GPIO_Init+0x152>
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3b08      	subs	r3, #8
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	210f      	movs	r1, #15
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	431a      	orrs	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80b1 	beq.w	8002466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002304:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_GPIO_Init+0x2b8>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x2b8>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_GPIO_Init+0x2b8>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800231c:	4a48      	ldr	r2, [pc, #288]	; (8002440 <HAL_GPIO_Init+0x2bc>)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <HAL_GPIO_Init+0x2c0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <HAL_GPIO_Init+0x1ec>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <HAL_GPIO_Init+0x2c4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00d      	beq.n	800236c <HAL_GPIO_Init+0x1e8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3e      	ldr	r2, [pc, #248]	; (800244c <HAL_GPIO_Init+0x2c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <HAL_GPIO_Init+0x1e4>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <HAL_GPIO_Init+0x2cc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_GPIO_Init+0x1e0>
 8002360:	2303      	movs	r3, #3
 8002362:	e006      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002364:	2304      	movs	r3, #4
 8002366:	e004      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002368:	2302      	movs	r3, #2
 800236a:	e002      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_GPIO_Init+0x1ee>
 8002370:	2300      	movs	r3, #0
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002382:	492f      	ldr	r1, [pc, #188]	; (8002440 <HAL_GPIO_Init+0x2bc>)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	492c      	ldr	r1, [pc, #176]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4928      	ldr	r1, [pc, #160]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023c4:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4922      	ldr	r1, [pc, #136]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	491e      	ldr	r1, [pc, #120]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4918      	ldr	r1, [pc, #96]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	43db      	mvns	r3, r3
 8002402:	4914      	ldr	r1, [pc, #80]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 8002404:	4013      	ands	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d021      	beq.n	8002458 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	60cb      	str	r3, [r1, #12]
 8002420:	e021      	b.n	8002466 <HAL_GPIO_Init+0x2e2>
 8002422:	bf00      	nop
 8002424:	10320000 	.word	0x10320000
 8002428:	10310000 	.word	0x10310000
 800242c:	10220000 	.word	0x10220000
 8002430:	10210000 	.word	0x10210000
 8002434:	10120000 	.word	0x10120000
 8002438:	10110000 	.word	0x10110000
 800243c:	40021000 	.word	0x40021000
 8002440:	40010000 	.word	0x40010000
 8002444:	40010800 	.word	0x40010800
 8002448:	40010c00 	.word	0x40010c00
 800244c:	40011000 	.word	0x40011000
 8002450:	40011400 	.word	0x40011400
 8002454:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_GPIO_Init+0x304>)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	43db      	mvns	r3, r3
 8002460:	4909      	ldr	r1, [pc, #36]	; (8002488 <HAL_GPIO_Init+0x304>)
 8002462:	4013      	ands	r3, r2
 8002464:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	3301      	adds	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f47f ae8e 	bne.w	8002198 <HAL_GPIO_Init+0x14>
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	372c      	adds	r7, #44	; 0x2c
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024a8:	e003      	b.n	80024b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	041a      	lsls	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f936 	bl	800174c <HAL_GPIO_EXTI_Callback>
  }
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40010400 	.word	0x40010400

080024ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e272      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8087 	beq.w	800261a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00c      	beq.n	8002532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002518:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d112      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	4b89      	ldr	r3, [pc, #548]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06c      	beq.n	8002618 <HAL_RCC_OscConfig+0x12c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d168      	bne.n	8002618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e24c      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x76>
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7f      	ldr	r2, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e02e      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x98>
 800256a:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b78      	ldr	r3, [pc, #480]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a77      	ldr	r2, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0xbc>
 800258e:	4b72      	ldr	r3, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a71      	ldr	r2, [pc, #452]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 80025a8:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a67      	ldr	r2, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fbf0 	bl	8001dac <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff fbec 	bl	8001dac <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e200      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe4>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff fbdc 	bl	8001dac <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7ff fbd8 	bl	8001dac <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1ec      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x10c>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
 800263e:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1c0      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4939      	ldr	r1, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e03a      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff fb91 	bl	8001dac <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7ff fb8d 	bl	8001dac <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1a1      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4927      	ldr	r1, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff fb70 	bl	8001dac <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7ff fb6c 	bl	8001dac <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e180      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d03a      	beq.n	8002770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7ff fb50 	bl	8001dac <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7ff fb4c 	bl	8001dac <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e160      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272e:	2001      	movs	r0, #1
 8002730:	f000 fada 	bl	8002ce8 <RCC_Delay>
 8002734:	e01c      	b.n	8002770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7ff fb36 	bl	8001dac <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002742:	e00f      	b.n	8002764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff fb32 	bl	8001dac <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d908      	bls.n	8002764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e146      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	42420000 	.word	0x42420000
 8002760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e9      	bne.n	8002744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a6 	beq.w	80028ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a87      	ldr	r2, [pc, #540]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4b7f      	ldr	r3, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7e      	ldr	r2, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7ff faf3 	bl	8001dac <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7ff faef 	bl	8001dac <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e103      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x312>
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	e02d      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x334>
 8002806:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a66      	ldr	r2, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	e01c      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_OscConfig+0x356>
 8002828:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a60      	ldr	r2, [pc, #384]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	e00b      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a5a      	ldr	r2, [pc, #360]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a57      	ldr	r2, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d015      	beq.n	800288e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff faa3 	bl	8001dac <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7ff fa9f 	bl	8001dac <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0b1      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ee      	beq.n	800286a <HAL_RCC_OscConfig+0x37e>
 800288c:	e014      	b.n	80028b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff fa8d 	bl	8001dac <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7ff fa89 	bl	8001dac <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e09b      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ee      	bne.n	8002896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4b3c      	ldr	r3, [pc, #240]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8087 	beq.w	80029e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d061      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d146      	bne.n	8002976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7ff fa5d 	bl	8001dac <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7ff fa59 	bl	8001dac <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e06d      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d108      	bne.n	8002930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4921      	ldr	r1, [pc, #132]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a19      	ldr	r1, [r3, #32]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	430b      	orrs	r3, r1
 8002942:	491b      	ldr	r1, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7ff fa2d 	bl	8001dac <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7ff fa29 	bl	8001dac <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e03d      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x46a>
 8002974:	e035      	b.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff fa16 	bl	8001dac <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7ff fa12 	bl	8001dac <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e026      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x498>
 80029a2:	e01e      	b.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e019      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_OscConfig+0x500>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0d0      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d910      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4965      	ldr	r1, [pc, #404]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d040      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d115      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e073      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06b      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4936      	ldr	r1, [pc, #216]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7ff f964 	bl	8001dac <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7ff f960 	bl	8001dac <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e053      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d210      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0207 	bic.w	r2, r3, #7
 8002b26:	4922      	ldr	r1, [pc, #136]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490a      	ldr	r1, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1cc>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f8c2 	bl	8001d28 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08004a84 	.word	0x08004a84
 8002bbc:	200003d0 	.word	0x200003d0
 8002bc0:	200003d4 	.word	0x200003d4

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b490      	push	{r4, r7}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bcc:	1d3c      	adds	r4, r7, #4
 8002bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bd4:	f240 2301 	movw	r3, #513	; 0x201
 8002bd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x46>
 8002c02:	e02b      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c06:	623b      	str	r3, [r7, #32]
      break;
 8002c08:	e02b      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	0c9b      	lsrs	r3, r3, #18
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3328      	adds	r3, #40	; 0x28
 8002c14:	443b      	add	r3, r7
 8002c16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c1a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d012      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	0c5b      	lsrs	r3, r3, #17
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	3328      	adds	r3, #40	; 0x28
 8002c32:	443b      	add	r3, r7
 8002c34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c3e:	fb03 f202 	mul.w	r2, r3, r2
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e004      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	623b      	str	r3, [r7, #32]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c5e:	623b      	str	r3, [r7, #32]
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc90      	pop	{r4, r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	08004a74 	.word	0x08004a74
 8002c74:	40021000 	.word	0x40021000
 8002c78:	00b71b00 	.word	0x00b71b00
 8002c7c:	003d0900 	.word	0x003d0900
 8002c80:	007a1200 	.word	0x007a1200

08002c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	200003d0 	.word	0x200003d0

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c9c:	f7ff fff2 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4903      	ldr	r1, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	08004a94 	.word	0x08004a94

08002cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc4:	f7ff ffde 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0adb      	lsrs	r3, r3, #11
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08004a94 	.word	0x08004a94

08002ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <RCC_Delay+0x34>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <RCC_Delay+0x38>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0a5b      	lsrs	r3, r3, #9
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d04:	bf00      	nop
  }
  while (Delay --);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1e5a      	subs	r2, r3, #1
 8002d0a:	60fa      	str	r2, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f9      	bne.n	8002d04 <RCC_Delay+0x1c>
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	200003d0 	.word	0x200003d0
 8002d20:	10624dd3 	.word	0x10624dd3

08002d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e076      	b.n	8002e24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d46:	d009      	beq.n	8002d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
 8002d4e:	e005      	b.n	8002d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe fe32 	bl	80019e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	ea42 0103 	orr.w	r1, r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	0c1a      	lsrs	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f002 0204 	and.w	r2, r2, #4
 8002e02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_Transmit+0x22>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e126      	b.n	800309c <HAL_SPI_Transmit+0x270>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e56:	f7fe ffa9 	bl	8001dac <HAL_GetTick>
 8002e5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d002      	beq.n	8002e72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e70:	e10b      	b.n	800308a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_SPI_Transmit+0x52>
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e82:	e102      	b.n	800308a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2203      	movs	r2, #3
 8002e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	88fa      	ldrh	r2, [r7, #6]
 8002e9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eca:	d10f      	bne.n	8002eec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d007      	beq.n	8002f0a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f12:	d14b      	bne.n	8002fac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_SPI_Transmit+0xf6>
 8002f1c:	8afb      	ldrh	r3, [r7, #22]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d13e      	bne.n	8002fa0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	881a      	ldrh	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	1c9a      	adds	r2, r3, #2
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f46:	e02b      	b.n	8002fa0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d112      	bne.n	8002f7c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	1c9a      	adds	r2, r3, #2
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f7a:	e011      	b.n	8002fa0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7c:	f7fe ff16 	bl	8001dac <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d803      	bhi.n	8002f94 <HAL_SPI_Transmit+0x168>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d102      	bne.n	8002f9a <HAL_SPI_Transmit+0x16e>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f9e:	e074      	b.n	800308a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ce      	bne.n	8002f48 <HAL_SPI_Transmit+0x11c>
 8002faa:	e04c      	b.n	8003046 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_SPI_Transmit+0x18e>
 8002fb4:	8afb      	ldrh	r3, [r7, #22]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d140      	bne.n	800303c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	7812      	ldrb	r2, [r2, #0]
 8002fc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fe0:	e02c      	b.n	800303c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d113      	bne.n	8003018 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	86da      	strh	r2, [r3, #54]	; 0x36
 8003016:	e011      	b.n	800303c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003018:	f7fe fec8 	bl	8001dac <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d803      	bhi.n	8003030 <HAL_SPI_Transmit+0x204>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d102      	bne.n	8003036 <HAL_SPI_Transmit+0x20a>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	77fb      	strb	r3, [r7, #31]
          goto error;
 800303a:	e026      	b.n	800308a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1cd      	bne.n	8002fe2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	6839      	ldr	r1, [r7, #0]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fb58 	bl	8003700 <SPI_EndRxTxTransaction>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e000      	b.n	800308a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003088:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800309a:	7ffb      	ldrb	r3, [r7, #31]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030b2:	2301      	movs	r3, #1
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_SPI_TransmitReceive+0x26>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e18a      	b.n	80033e0 <HAL_SPI_TransmitReceive+0x33c>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030d2:	f7fe fe6b 	bl	8001dac <HAL_GetTick>
 80030d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d00f      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x70>
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030fa:	d107      	bne.n	800310c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <HAL_SPI_TransmitReceive+0x68>
 8003104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003108:	2b04      	cmp	r3, #4
 800310a:	d003      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800310c:	2302      	movs	r3, #2
 800310e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003112:	e15b      	b.n	80033cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x82>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x82>
 8003120:	887b      	ldrh	r3, [r7, #2]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800312c:	e14e      	b.n	80033cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b04      	cmp	r3, #4
 8003138:	d003      	beq.n	8003142 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2205      	movs	r2, #5
 800313e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	887a      	ldrh	r2, [r7, #2]
 8003152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	887a      	ldrh	r2, [r7, #2]
 8003158:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	887a      	ldrh	r2, [r7, #2]
 800316a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d007      	beq.n	8003196 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319e:	d178      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_SPI_TransmitReceive+0x10a>
 80031a8:	8b7b      	ldrh	r3, [r7, #26]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d166      	bne.n	800327c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d2:	e053      	b.n	800327c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d11b      	bne.n	800321a <HAL_SPI_TransmitReceive+0x176>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d016      	beq.n	800321a <HAL_SPI_TransmitReceive+0x176>
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d113      	bne.n	800321a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d119      	bne.n	800325c <HAL_SPI_TransmitReceive+0x1b8>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d014      	beq.n	800325c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	b292      	uxth	r2, r2
 800323e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	1c9a      	adds	r2, r3, #2
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003258:	2301      	movs	r3, #1
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800325c:	f7fe fda6 	bl	8001dac <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003268:	429a      	cmp	r2, r3
 800326a:	d807      	bhi.n	800327c <HAL_SPI_TransmitReceive+0x1d8>
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d003      	beq.n	800327c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800327a:	e0a7      	b.n	80033cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1a6      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x130>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1a1      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x130>
 8003290:	e07c      	b.n	800338c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x1fc>
 800329a:	8b7b      	ldrh	r3, [r7, #26]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d16b      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	7812      	ldrb	r2, [r2, #0]
 80032ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c6:	e057      	b.n	8003378 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d11c      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x26c>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d017      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x26c>
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d114      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d119      	bne.n	8003352 <HAL_SPI_TransmitReceive+0x2ae>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d014      	beq.n	8003352 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800334e:	2301      	movs	r3, #1
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003352:	f7fe fd2b 	bl	8001dac <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800335e:	429a      	cmp	r2, r3
 8003360:	d803      	bhi.n	800336a <HAL_SPI_TransmitReceive+0x2c6>
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d102      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x2cc>
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003376:	e029      	b.n	80033cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1a2      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x224>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d19d      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f9b5 	bl	8003700 <SPI_EndRxTxTransaction>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033a8:	e010      	b.n	80033cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	e000      	b.n	80033cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3730      	adds	r7, #48	; 0x30
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	099b      	lsrs	r3, r3, #6
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
    return;
 800342a:	e0be      	b.n	80035aa <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_SPI_IRQHandler+0x66>
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	09db      	lsrs	r3, r3, #7
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
    return;
 800344c:	e0ad      	b.n	80035aa <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_SPI_IRQHandler+0x80>
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80a1 	beq.w	80035aa <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 809a 	beq.w	80035aa <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d023      	beq.n	80034ca <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b03      	cmp	r3, #3
 800348c:	d011      	beq.n	80034b2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	e00b      	b.n	80034ca <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
        return;
 80034c8:	e06f      	b.n	80035aa <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d014      	beq.n	8003500 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	2b00      	cmp	r3, #0
 8003506:	d04f      	beq.n	80035a8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003516:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <HAL_SPI_IRQHandler+0x14c>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d034      	beq.n	800359e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0203 	bic.w	r2, r2, #3
 8003542:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d011      	beq.n	8003570 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003550:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <HAL_SPI_IRQHandler+0x1c8>)
 8003552:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fd9d 	bl	8002098 <HAL_DMA_Abort_IT>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	2b00      	cmp	r3, #0
 8003576:	d016      	beq.n	80035a6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357c:	4a0c      	ldr	r2, [pc, #48]	; (80035b0 <HAL_SPI_IRQHandler+0x1c8>)
 800357e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fd87 	bl	8002098 <HAL_DMA_Abort_IT>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003594:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800359c:	e003      	b.n	80035a6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f808 	bl	80035b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80035a4:	e000      	b.n	80035a8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80035a6:	bf00      	nop
    return;
 80035a8:	bf00      	nop
  }
}
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	080035c7 	.word	0x080035c7

080035b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ffe7 	bl	80035b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003600:	f7fe fbd4 	bl	8001dac <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	4413      	add	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003610:	f7fe fbcc 	bl	8001dac <HAL_GetTick>
 8003614:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003616:	4b39      	ldr	r3, [pc, #228]	; (80036fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	015b      	lsls	r3, r3, #5
 800361c:	0d1b      	lsrs	r3, r3, #20
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003626:	e054      	b.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d050      	beq.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003630:	f7fe fbbc 	bl	8001dac <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	d902      	bls.n	8003646 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d13d      	bne.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365e:	d111      	bne.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003668:	d004      	beq.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003672:	d107      	bne.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368c:	d10f      	bne.n	80036ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e017      	b.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	bf0c      	ite	eq
 80036e2:	2301      	moveq	r3, #1
 80036e4:	2300      	movne	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d19b      	bne.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200003d0 	.word	0x200003d0

08003700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	2180      	movs	r1, #128	; 0x80
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff6a 	bl	80035f0 <SPI_WaitFlagStateUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e000      	b.n	8003734 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e041      	b.n	80037d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe f98e 	bl	8001a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 fa96 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <HAL_TIM_Base_Stop+0x38>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	f240 4344 	movw	r3, #1092	; 0x444
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d107      	bne.n	8003812 <HAL_TIM_Base_Stop+0x38>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
	...

08003828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d001      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e03a      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_TIM_Base_Start_IT+0x98>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x58>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d009      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x58>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x58>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d111      	bne.n	80038a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d010      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e007      	b.n	80038b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800

080038cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d122      	bne.n	8003928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0202 	mvn.w	r2, #2
 80038f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9b1 	bl	8003c76 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f9a4 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f9b3 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d122      	bne.n	800397c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d11b      	bne.n	800397c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0204 	mvn.w	r2, #4
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f987 	bl	8003c76 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f97a 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f989 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b08      	cmp	r3, #8
 8003988:	d122      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d11b      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0208 	mvn.w	r2, #8
 80039a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f95d 	bl	8003c76 <HAL_TIM_IC_CaptureCallback>
 80039bc:	e005      	b.n	80039ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f950 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f95f 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d122      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d11b      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0210 	mvn.w	r2, #16
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2208      	movs	r2, #8
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f933 	bl	8003c76 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f926 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f935 	bl	8003c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0201 	mvn.w	r2, #1
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd fe2c 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d10e      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d107      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa77 	bl	8003f6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8f9 	bl	8003c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0220 	mvn.w	r2, #32
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa42 	bl	8003f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_TIM_ConfigClockSource+0x18>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e0b3      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x180>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2c:	d03e      	beq.n	8003bac <HAL_TIM_ConfigClockSource+0xd0>
 8003b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b32:	f200 8087 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x168>
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3a:	f000 8085 	beq.w	8003c48 <HAL_TIM_ConfigClockSource+0x16c>
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b42:	d87f      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x168>
 8003b44:	2b70      	cmp	r3, #112	; 0x70
 8003b46:	d01a      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0xa2>
 8003b48:	2b70      	cmp	r3, #112	; 0x70
 8003b4a:	d87b      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x168>
 8003b4c:	2b60      	cmp	r3, #96	; 0x60
 8003b4e:	d050      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x116>
 8003b50:	2b60      	cmp	r3, #96	; 0x60
 8003b52:	d877      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x168>
 8003b54:	2b50      	cmp	r3, #80	; 0x50
 8003b56:	d03c      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0xf6>
 8003b58:	2b50      	cmp	r3, #80	; 0x50
 8003b5a:	d873      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x168>
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d058      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0x136>
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d86f      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x168>
 8003b64:	2b30      	cmp	r3, #48	; 0x30
 8003b66:	d064      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x156>
 8003b68:	2b30      	cmp	r3, #48	; 0x30
 8003b6a:	d86b      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x168>
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d060      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x156>
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d867      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x168>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d05c      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x156>
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d05a      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b7c:	e062      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6899      	ldr	r1, [r3, #8]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f000 f966 	bl	8003e5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ba0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	609a      	str	r2, [r3, #8]
      break;
 8003baa:	e04e      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f000 f94f 	bl	8003e5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bce:	609a      	str	r2, [r3, #8]
      break;
 8003bd0:	e03b      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 f8c6 	bl	8003d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2150      	movs	r1, #80	; 0x50
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f91d 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e02b      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f000 f8e4 	bl	8003dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2160      	movs	r1, #96	; 0x60
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f90d 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003c10:	e01b      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f000 f8a6 	bl	8003d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2140      	movs	r1, #64	; 0x40
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f8fd 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003c30:	e00b      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	f000 f8f4 	bl	8003e2a <TIM_ITRx_SetConfig>
        break;
 8003c42:	e002      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c44:	bf00      	nop
 8003c46:	e000      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <TIM_Base_SetConfig+0xb8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00b      	beq.n	8003cdc <TIM_Base_SetConfig+0x30>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cca:	d007      	beq.n	8003cdc <TIM_Base_SetConfig+0x30>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <TIM_Base_SetConfig+0xbc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_Base_SetConfig+0x30>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <TIM_Base_SetConfig+0xc0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d108      	bne.n	8003cee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <TIM_Base_SetConfig+0xb8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <TIM_Base_SetConfig+0x62>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfc:	d007      	beq.n	8003d0e <TIM_Base_SetConfig+0x62>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <TIM_Base_SetConfig+0xbc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_Base_SetConfig+0x62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <TIM_Base_SetConfig+0xc0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d108      	bne.n	8003d20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <TIM_Base_SetConfig+0xb8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	615a      	str	r2, [r3, #20]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800

08003d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 030a 	bic.w	r3, r3, #10
 8003dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f023 0210 	bic.w	r2, r3, #16
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	031b      	lsls	r3, r3, #12
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f043 0307 	orr.w	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b087      	sub	sp, #28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	021a      	lsls	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e046      	b.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f00:	d009      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10c      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40000400 	.word	0x40000400
 8003f54:	40000800 	.word	0x40000800

08003f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e03f      	b.n	800400e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fdca 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fc01 	bl	80047c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	4613      	mov	r3, r2
 8004022:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d130      	bne.n	8004092 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_UART_Transmit_IT+0x26>
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e029      	b.n	8004094 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_UART_Transmit_IT+0x38>
 800404a:	2302      	movs	r3, #2
 800404c:	e022      	b.n	8004094 <HAL_UART_Transmit_IT+0x7e>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	88fa      	ldrh	r2, [r7, #6]
 8004066:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2221      	movs	r2, #33	; 0x21
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800408c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	4613      	mov	r3, r2
 80040aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d11d      	bne.n	80040f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_UART_Receive_IT+0x26>
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e016      	b.n	80040f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Receive_IT+0x38>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e00f      	b.n	80040f6 <HAL_UART_Receive_IT+0x58>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	461a      	mov	r2, r3
 80040e8:	68b9      	ldr	r1, [r7, #8]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f9e3 	bl	80044b6 <UART_Start_Receive_IT>
 80040f0:	4603      	mov	r3, r0
 80040f2:	e000      	b.n	80040f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10d      	bne.n	8004152 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_UART_IRQHandler+0x52>
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa93 	bl	8004676 <UART_Receive_IT>
      return;
 8004150:	e17b      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80b1 	beq.w	80042bc <HAL_UART_IRQHandler+0x1bc>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_UART_IRQHandler+0x70>
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80a6 	beq.w	80042bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_UART_IRQHandler+0x90>
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_UART_IRQHandler+0xb0>
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f043 0202 	orr.w	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_UART_IRQHandler+0xd0>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00f      	beq.n	80041fa <HAL_UART_IRQHandler+0xfa>
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <HAL_UART_IRQHandler+0xee>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0208 	orr.w	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 811e 	beq.w	8004440 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_UART_IRQHandler+0x11e>
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa2c 	bl	8004676 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_UART_IRQHandler+0x146>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d031      	beq.n	80042aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f96e 	bl	8004528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d023      	beq.n	80042a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004268:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	2b00      	cmp	r3, #0
 8004270:	d013      	beq.n	800429a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	4a76      	ldr	r2, [pc, #472]	; (8004450 <HAL_UART_IRQHandler+0x350>)
 8004278:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd ff0a 	bl	8002098 <HAL_DMA_Abort_IT>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004294:	4610      	mov	r0, r2
 8004296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004298:	e00e      	b.n	80042b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8da 	bl	8004454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	e00a      	b.n	80042b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8d6 	bl	8004454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	e006      	b.n	80042b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8d2 	bl	8004454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042b6:	e0c3      	b.n	8004440 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b8:	bf00      	nop
    return;
 80042ba:	e0c1      	b.n	8004440 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 80a1 	bne.w	8004408 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 809b 	beq.w	8004408 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8095 	beq.w	8004408 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d04e      	beq.n	80043a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800430c:	8a3b      	ldrh	r3, [r7, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8098 	beq.w	8004444 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004318:	8a3a      	ldrh	r2, [r7, #16]
 800431a:	429a      	cmp	r2, r3
 800431c:	f080 8092 	bcs.w	8004444 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8a3a      	ldrh	r2, [r7, #16]
 8004324:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b20      	cmp	r3, #32
 800432e:	d02b      	beq.n	8004388 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800433e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0210 	bic.w	r2, r2, #16
 800437c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd fe4d 	bl	8002022 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004390:	b29b      	uxth	r3, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	b29b      	uxth	r3, r3
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f864 	bl	8004466 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800439e:	e051      	b.n	8004444 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d047      	beq.n	8004448 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80043b8:	8a7b      	ldrh	r3, [r7, #18]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d044      	beq.n	8004448 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0210 	bic.w	r2, r2, #16
 80043fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043fc:	8a7b      	ldrh	r3, [r7, #18]
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f830 	bl	8004466 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004406:	e01f      	b.n	8004448 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_UART_IRQHandler+0x324>
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8c3 	bl	80045a8 <UART_Transmit_IT>
    return;
 8004422:	e012      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <HAL_UART_IRQHandler+0x34a>
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f904 	bl	8004646 <UART_EndTransmit_IT>
    return;
 800443e:	e004      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
    return;
 8004440:	bf00      	nop
 8004442:	e002      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
      return;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HAL_UART_IRQHandler+0x34a>
      return;
 8004448:	bf00      	nop
  }
}
 800444a:	3728      	adds	r7, #40	; 0x28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	08004581 	.word	0x08004581

08004454 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449c:	b2db      	uxtb	r3, r3
 800449e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	4313      	orrs	r3, r2
 80044aa:	b2db      	uxtb	r3, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2222      	movs	r2, #34	; 0x22
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0220 	orr.w	r2, r2, #32
 800451a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800453e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	2b01      	cmp	r3, #1
 8004556:	d107      	bne.n	8004568 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0210 	bic.w	r2, r2, #16
 8004566:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff ff5a 	bl	8004454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b21      	cmp	r3, #33	; 0x21
 80045ba:	d13e      	bne.n	800463a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c4:	d114      	bne.n	80045f0 <UART_Transmit_IT+0x48>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d110      	bne.n	80045f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	1c9a      	adds	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]
 80045ee:	e008      	b.n	8004602 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	1c59      	adds	r1, r3, #1
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6211      	str	r1, [r2, #32]
 80045fa:	781a      	ldrb	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29b      	uxth	r3, r3
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4619      	mov	r1, r3
 8004610:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004624:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004634:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800463a:	2302      	movs	r3, #2
  }
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd f808 	bl	800167c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b22      	cmp	r3, #34	; 0x22
 8004688:	f040 8099 	bne.w	80047be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d117      	bne.n	80046c6 <UART_Receive_IT+0x50>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d113      	bne.n	80046c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	1c9a      	adds	r2, r3, #2
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
 80046c4:	e026      	b.n	8004714 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d8:	d007      	beq.n	80046ea <UART_Receive_IT+0x74>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <UART_Receive_IT+0x82>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e008      	b.n	800470a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004704:	b2da      	uxtb	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29b      	uxth	r3, r3
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004724:	2b00      	cmp	r3, #0
 8004726:	d148      	bne.n	80047ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0220 	bic.w	r2, r2, #32
 8004736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004746:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0201 	bic.w	r2, r2, #1
 8004756:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	2b01      	cmp	r3, #1
 8004766:	d123      	bne.n	80047b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0210 	bic.w	r2, r2, #16
 800477c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b10      	cmp	r3, #16
 800478a:	d10a      	bne.n	80047a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff fe5c 	bl	8004466 <HAL_UARTEx_RxEventCallback>
 80047ae:	e002      	b.n	80047b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fc ff27 	bl	8001604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e002      	b.n	80047c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e000      	b.n	80047c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
  }
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004802:	f023 030c 	bic.w	r3, r3, #12
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	430b      	orrs	r3, r1
 800480e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <UART_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d103      	bne.n	8004838 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7fe fa46 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	e002      	b.n	800483e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7fe fa2e 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 800483c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009a      	lsls	r2, r3, #2
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <UART_SetConfig+0x118>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	0119      	lsls	r1, r3, #4
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009a      	lsls	r2, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	fbb2 f2f3 	udiv	r2, r2, r3
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <UART_SetConfig+0x118>)
 8004876:	fba3 0302 	umull	r0, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	fb00 f303 	mul.w	r3, r0, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	3332      	adds	r3, #50	; 0x32
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <UART_SetConfig+0x118>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004894:	4419      	add	r1, r3
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009a      	lsls	r2, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <UART_SetConfig+0x118>)
 80048ae:	fba3 0302 	umull	r0, r3, r3, r2
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2064      	movs	r0, #100	; 0x64
 80048b6:	fb00 f303 	mul.w	r3, r0, r3
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	3332      	adds	r3, #50	; 0x32
 80048c0:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <UART_SetConfig+0x118>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	f003 020f 	and.w	r2, r3, #15
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	440a      	add	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40013800 	.word	0x40013800
 80048e0:	51eb851f 	.word	0x51eb851f

080048e4 <atoi>:
 80048e4:	220a      	movs	r2, #10
 80048e6:	2100      	movs	r1, #0
 80048e8:	f000 b8ae 	b.w	8004a48 <strtol>

080048ec <__errno>:
 80048ec:	4b01      	ldr	r3, [pc, #4]	; (80048f4 <__errno+0x8>)
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	200003dc 	.word	0x200003dc

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	2600      	movs	r6, #0
 80048fc:	4d0c      	ldr	r5, [pc, #48]	; (8004930 <__libc_init_array+0x38>)
 80048fe:	4c0d      	ldr	r4, [pc, #52]	; (8004934 <__libc_init_array+0x3c>)
 8004900:	1b64      	subs	r4, r4, r5
 8004902:	10a4      	asrs	r4, r4, #2
 8004904:	42a6      	cmp	r6, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	f000 f8a8 	bl	8004a5c <_init>
 800490c:	2600      	movs	r6, #0
 800490e:	4d0a      	ldr	r5, [pc, #40]	; (8004938 <__libc_init_array+0x40>)
 8004910:	4c0a      	ldr	r4, [pc, #40]	; (800493c <__libc_init_array+0x44>)
 8004912:	1b64      	subs	r4, r4, r5
 8004914:	10a4      	asrs	r4, r4, #2
 8004916:	42a6      	cmp	r6, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004920:	4798      	blx	r3
 8004922:	3601      	adds	r6, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f855 3b04 	ldr.w	r3, [r5], #4
 800492a:	4798      	blx	r3
 800492c:	3601      	adds	r6, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	08004ba0 	.word	0x08004ba0
 8004934:	08004ba0 	.word	0x08004ba0
 8004938:	08004ba0 	.word	0x08004ba0
 800493c:	08004ba8 	.word	0x08004ba8

08004940 <memset>:
 8004940:	4603      	mov	r3, r0
 8004942:	4402      	add	r2, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	d100      	bne.n	800494a <memset+0xa>
 8004948:	4770      	bx	lr
 800494a:	f803 1b01 	strb.w	r1, [r3], #1
 800494e:	e7f9      	b.n	8004944 <memset+0x4>

08004950 <_strtol_l.constprop.0>:
 8004950:	2b01      	cmp	r3, #1
 8004952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004956:	4680      	mov	r8, r0
 8004958:	d001      	beq.n	800495e <_strtol_l.constprop.0+0xe>
 800495a:	2b24      	cmp	r3, #36	; 0x24
 800495c:	d906      	bls.n	800496c <_strtol_l.constprop.0+0x1c>
 800495e:	f7ff ffc5 	bl	80048ec <__errno>
 8004962:	2316      	movs	r3, #22
 8004964:	6003      	str	r3, [r0, #0]
 8004966:	2000      	movs	r0, #0
 8004968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496c:	460d      	mov	r5, r1
 800496e:	4f35      	ldr	r7, [pc, #212]	; (8004a44 <_strtol_l.constprop.0+0xf4>)
 8004970:	4628      	mov	r0, r5
 8004972:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004976:	5de6      	ldrb	r6, [r4, r7]
 8004978:	f016 0608 	ands.w	r6, r6, #8
 800497c:	d1f8      	bne.n	8004970 <_strtol_l.constprop.0+0x20>
 800497e:	2c2d      	cmp	r4, #45	; 0x2d
 8004980:	d12f      	bne.n	80049e2 <_strtol_l.constprop.0+0x92>
 8004982:	2601      	movs	r6, #1
 8004984:	782c      	ldrb	r4, [r5, #0]
 8004986:	1c85      	adds	r5, r0, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d057      	beq.n	8004a3c <_strtol_l.constprop.0+0xec>
 800498c:	2b10      	cmp	r3, #16
 800498e:	d109      	bne.n	80049a4 <_strtol_l.constprop.0+0x54>
 8004990:	2c30      	cmp	r4, #48	; 0x30
 8004992:	d107      	bne.n	80049a4 <_strtol_l.constprop.0+0x54>
 8004994:	7828      	ldrb	r0, [r5, #0]
 8004996:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800499a:	2858      	cmp	r0, #88	; 0x58
 800499c:	d149      	bne.n	8004a32 <_strtol_l.constprop.0+0xe2>
 800499e:	2310      	movs	r3, #16
 80049a0:	786c      	ldrb	r4, [r5, #1]
 80049a2:	3502      	adds	r5, #2
 80049a4:	2700      	movs	r7, #0
 80049a6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80049aa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80049ae:	fbbe f9f3 	udiv	r9, lr, r3
 80049b2:	4638      	mov	r0, r7
 80049b4:	fb03 ea19 	mls	sl, r3, r9, lr
 80049b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80049bc:	f1bc 0f09 	cmp.w	ip, #9
 80049c0:	d814      	bhi.n	80049ec <_strtol_l.constprop.0+0x9c>
 80049c2:	4664      	mov	r4, ip
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	dd22      	ble.n	8004a0e <_strtol_l.constprop.0+0xbe>
 80049c8:	2f00      	cmp	r7, #0
 80049ca:	db1d      	blt.n	8004a08 <_strtol_l.constprop.0+0xb8>
 80049cc:	4581      	cmp	r9, r0
 80049ce:	d31b      	bcc.n	8004a08 <_strtol_l.constprop.0+0xb8>
 80049d0:	d101      	bne.n	80049d6 <_strtol_l.constprop.0+0x86>
 80049d2:	45a2      	cmp	sl, r4
 80049d4:	db18      	blt.n	8004a08 <_strtol_l.constprop.0+0xb8>
 80049d6:	2701      	movs	r7, #1
 80049d8:	fb00 4003 	mla	r0, r0, r3, r4
 80049dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049e0:	e7ea      	b.n	80049b8 <_strtol_l.constprop.0+0x68>
 80049e2:	2c2b      	cmp	r4, #43	; 0x2b
 80049e4:	bf04      	itt	eq
 80049e6:	782c      	ldrbeq	r4, [r5, #0]
 80049e8:	1c85      	addeq	r5, r0, #2
 80049ea:	e7cd      	b.n	8004988 <_strtol_l.constprop.0+0x38>
 80049ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80049f0:	f1bc 0f19 	cmp.w	ip, #25
 80049f4:	d801      	bhi.n	80049fa <_strtol_l.constprop.0+0xaa>
 80049f6:	3c37      	subs	r4, #55	; 0x37
 80049f8:	e7e4      	b.n	80049c4 <_strtol_l.constprop.0+0x74>
 80049fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80049fe:	f1bc 0f19 	cmp.w	ip, #25
 8004a02:	d804      	bhi.n	8004a0e <_strtol_l.constprop.0+0xbe>
 8004a04:	3c57      	subs	r4, #87	; 0x57
 8004a06:	e7dd      	b.n	80049c4 <_strtol_l.constprop.0+0x74>
 8004a08:	f04f 37ff 	mov.w	r7, #4294967295
 8004a0c:	e7e6      	b.n	80049dc <_strtol_l.constprop.0+0x8c>
 8004a0e:	2f00      	cmp	r7, #0
 8004a10:	da07      	bge.n	8004a22 <_strtol_l.constprop.0+0xd2>
 8004a12:	2322      	movs	r3, #34	; 0x22
 8004a14:	4670      	mov	r0, lr
 8004a16:	f8c8 3000 	str.w	r3, [r8]
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	d0a4      	beq.n	8004968 <_strtol_l.constprop.0+0x18>
 8004a1e:	1e69      	subs	r1, r5, #1
 8004a20:	e005      	b.n	8004a2e <_strtol_l.constprop.0+0xde>
 8004a22:	b106      	cbz	r6, 8004a26 <_strtol_l.constprop.0+0xd6>
 8004a24:	4240      	negs	r0, r0
 8004a26:	2a00      	cmp	r2, #0
 8004a28:	d09e      	beq.n	8004968 <_strtol_l.constprop.0+0x18>
 8004a2a:	2f00      	cmp	r7, #0
 8004a2c:	d1f7      	bne.n	8004a1e <_strtol_l.constprop.0+0xce>
 8004a2e:	6011      	str	r1, [r2, #0]
 8004a30:	e79a      	b.n	8004968 <_strtol_l.constprop.0+0x18>
 8004a32:	2430      	movs	r4, #48	; 0x30
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1b5      	bne.n	80049a4 <_strtol_l.constprop.0+0x54>
 8004a38:	2308      	movs	r3, #8
 8004a3a:	e7b3      	b.n	80049a4 <_strtol_l.constprop.0+0x54>
 8004a3c:	2c30      	cmp	r4, #48	; 0x30
 8004a3e:	d0a9      	beq.n	8004994 <_strtol_l.constprop.0+0x44>
 8004a40:	230a      	movs	r3, #10
 8004a42:	e7af      	b.n	80049a4 <_strtol_l.constprop.0+0x54>
 8004a44:	08004a9d 	.word	0x08004a9d

08004a48 <strtol>:
 8004a48:	4613      	mov	r3, r2
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	4802      	ldr	r0, [pc, #8]	; (8004a58 <strtol+0x10>)
 8004a50:	6800      	ldr	r0, [r0, #0]
 8004a52:	f7ff bf7d 	b.w	8004950 <_strtol_l.constprop.0>
 8004a56:	bf00      	nop
 8004a58:	200003dc 	.word	0x200003dc

08004a5c <_init>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr

08004a68 <_fini>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr


W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080038d8  080038d8  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d8  080038d8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080038e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000003c  0800391c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  0800391c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ded2  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002004  00000000  00000000  0002df37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  0002ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e4b  00000000  00000000  00031b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e553  00000000  00000000  0004a9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893c9  00000000  00000000  00058f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e22ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d3c  00000000  00000000  000e2350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003898 	.word	0x08003898

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08003898 	.word	0x08003898

0800014c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
//#pragma once
#include "W5500.h"

W5500::W5500(
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	807b      	strh	r3, [r7, #2]
		SPI_HandleTypeDef* hspi_m,
		GPIO_TypeDef* W5500_CS_GPIO_Port_m,
		uint16_t W5500_CS_Pin_m,
		GPIO_TypeDef* W5500_RST_GPIO_Port_m,
		uint16_t W5500_RST_Pin_m
		)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	3310      	adds	r3, #16
 800015e:	2240      	movs	r2, #64	; 0x40
 8000160:	2100      	movs	r1, #0
 8000162:	4618      	mov	r0, r3
 8000164:	f003 fb90 	bl	8003888 <memset>
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	3350      	adds	r3, #80	; 0x50
 800016c:	2240      	movs	r2, #64	; 0x40
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f003 fb89 	bl	8003888 <memset>
{
	hspi_w = hspi_m;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	601a      	str	r2, [r3, #0]
	W5500_CS_GPIO_Port_w = W5500_CS_GPIO_Port_m;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	687a      	ldr	r2, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]
	W5500_CS_Pin_w = W5500_CS_Pin_m;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	887a      	ldrh	r2, [r7, #2]
 8000186:	819a      	strh	r2, [r3, #12]
	W5500_RST_GPIO_Port_w = W5500_RST_GPIO_Port_m;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	69ba      	ldr	r2, [r7, #24]
 800018c:	609a      	str	r2, [r3, #8]
	W5500_RST_Pin_w = W5500_RST_Pin_m;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	8bba      	ldrh	r2, [r7, #28]
 8000192:	81da      	strh	r2, [r3, #14]
}
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	4618      	mov	r0, r3
 8000198:	3710      	adds	r7, #16
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}

0800019e <_ZN5W55008switchOnEv>:
	return;
}

// включение чипа
void W5500::switchOn()
{
 800019e:	b580      	push	{r7, lr}
 80001a0:	b082      	sub	sp, #8
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	6898      	ldr	r0, [r3, #8]
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	89db      	ldrh	r3, [r3, #14]
 80001ae:	2201      	movs	r2, #1
 80001b0:	4619      	mov	r1, r3
 80001b2:	f001 fa67 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001b6:	2001      	movs	r0, #1
 80001b8:	f000 fefe 	bl	8000fb8 <HAL_Delay>
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}

080001c4 <_ZN5W55008writeSHAEv>:
	regSHA[5] = misoBytes_w[8];
	return;
}

void W5500::writeSHA()
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af02      	add	r7, sp, #8
 80001ca:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2200      	movs	r2, #0
 80001d0:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_SHAR;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2209      	movs	r2, #9
 80001d6:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2204      	movs	r2, #4
 80001dc:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = 0x08;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2208      	movs	r2, #8
 80001e8:	751a      	strb	r2, [r3, #20]
	mosiBytes_w[5] = 0xDC;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	22dc      	movs	r2, #220	; 0xdc
 80001ee:	755a      	strb	r2, [r3, #21]
	mosiBytes_w[6] = 0xAB;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	22ab      	movs	r2, #171	; 0xab
 80001f4:	759a      	strb	r2, [r3, #22]
	mosiBytes_w[7] = 0xCD;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	22cd      	movs	r2, #205	; 0xcd
 80001fa:	75da      	strb	r2, [r3, #23]
	mosiBytes_w[8] = 0x01;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2201      	movs	r2, #1
 8000200:	761a      	strb	r2, [r3, #24]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	6858      	ldr	r0, [r3, #4]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	899b      	ldrh	r3, [r3, #12]
 800020a:	2200      	movs	r2, #0
 800020c:	4619      	mov	r1, r3
 800020e:	f001 fa39 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 9, 100);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	6818      	ldr	r0, [r3, #0]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f103 0110 	add.w	r1, r3, #16
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000222:	2364      	movs	r3, #100	; 0x64
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2309      	movs	r3, #9
 8000228:	f001 ff06 	bl	8002038 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	6858      	ldr	r0, [r3, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	899b      	ldrh	r3, [r3, #12]
 8000234:	2201      	movs	r2, #1
 8000236:	4619      	mov	r1, r3
 8000238:	f001 fa24 	bl	8001684 <HAL_GPIO_WritePin>
	return;
 800023c:	bf00      	nop
}
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <_ZN5W55008writeCRBEPh>:
	}
	return;
}

void W5500::writeCRB(uint8_t* regCRB)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
	mosiBytes_w[0] = 0;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_MR;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2204      	movs	r2, #4
 800025e:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < 47; ++i)
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2b2e      	cmp	r3, #46	; 0x2e
 8000268:	dc0d      	bgt.n	8000286 <_ZN5W55008writeCRBEPh+0x42>
	{
		mosiBytes_w[i+3] = regCRB[i];
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	683a      	ldr	r2, [r7, #0]
 800026e:	441a      	add	r2, r3
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	3303      	adds	r3, #3
 8000274:	7811      	ldrb	r1, [r2, #0]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	460a      	mov	r2, r1
 800027c:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < 47; ++i)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	3301      	adds	r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	e7ee      	b.n	8000264 <_ZN5W55008writeCRBEPh+0x20>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6858      	ldr	r0, [r3, #4]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	899b      	ldrh	r3, [r3, #12]
 800028e:	2200      	movs	r2, #0
 8000290:	4619      	mov	r1, r3
 8000292:	f001 f9f7 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 50, 100);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	6818      	ldr	r0, [r3, #0]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f103 0110 	add.w	r1, r3, #16
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80002a6:	2364      	movs	r3, #100	; 0x64
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2332      	movs	r3, #50	; 0x32
 80002ac:	f001 fec4 	bl	8002038 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6858      	ldr	r0, [r3, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	899b      	ldrh	r3, [r3, #12]
 80002b8:	2201      	movs	r2, #1
 80002ba:	4619      	mov	r1, r3
 80002bc:	f001 f9e2 	bl	8001684 <HAL_GPIO_WritePin>
	return;
 80002c0:	bf00      	nop
}
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <_ZN5W550011initSocket0Ev>:

void W5500::initSocket0()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af02      	add	r7, sp, #8
 80002ce:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_PORT;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2204      	movs	r2, #4
 80002da:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001100;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	220c      	movs	r2, #12
 80002e0:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0x1D; // port 7500
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	221d      	movs	r2, #29
 80002e6:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = 0x4C;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	224c      	movs	r2, #76	; 0x4c
 80002ec:	751a      	strb	r2, [r3, #20]
	mosiBytes_w[5] = 0x50; // 50-EB-F6-4D-BA-12
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2250      	movs	r2, #80	; 0x50
 80002f2:	755a      	strb	r2, [r3, #21]
	mosiBytes_w[6] = 0xEB;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	22eb      	movs	r2, #235	; 0xeb
 80002f8:	759a      	strb	r2, [r3, #22]
	mosiBytes_w[7] = 0xF6;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	22f6      	movs	r2, #246	; 0xf6
 80002fe:	75da      	strb	r2, [r3, #23]
	mosiBytes_w[8] = 0x4D;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	224d      	movs	r2, #77	; 0x4d
 8000304:	761a      	strb	r2, [r3, #24]
	mosiBytes_w[9] = 0xBA;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	22ba      	movs	r2, #186	; 0xba
 800030a:	765a      	strb	r2, [r3, #25]
	mosiBytes_w[10] = 0x12;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2212      	movs	r2, #18
 8000310:	769a      	strb	r2, [r3, #26]
	mosiBytes_w[11] = 0xC0; // 192.168.1.7
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	22c0      	movs	r2, #192	; 0xc0
 8000316:	76da      	strb	r2, [r3, #27]
	mosiBytes_w[12] = 0xA8;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	22a8      	movs	r2, #168	; 0xa8
 800031c:	771a      	strb	r2, [r3, #28]
	mosiBytes_w[13] = 0x01;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2201      	movs	r2, #1
 8000322:	775a      	strb	r2, [r3, #29]
	mosiBytes_w[14] = 0x07;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2207      	movs	r2, #7
 8000328:	779a      	strb	r2, [r3, #30]
	mosiBytes_w[15] = 0x19; // port 6500
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2219      	movs	r2, #25
 800032e:	77da      	strb	r2, [r3, #31]
	mosiBytes_w[16] = 0x64;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2264      	movs	r2, #100	; 0x64
 8000334:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6858      	ldr	r0, [r3, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	899b      	ldrh	r3, [r3, #12]
 8000340:	2200      	movs	r2, #0
 8000342:	4619      	mov	r1, r3
 8000344:	f001 f99e 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 17, 100);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6818      	ldr	r0, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f103 0110 	add.w	r1, r3, #16
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000358:	2364      	movs	r3, #100	; 0x64
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2311      	movs	r3, #17
 800035e:	f001 fe6b 	bl	8002038 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6858      	ldr	r0, [r3, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	899b      	ldrh	r3, [r3, #12]
 800036a:	2201      	movs	r2, #1
 800036c:	4619      	mov	r1, r3
 800036e:	f001 f989 	bl	8001684 <HAL_GPIO_WritePin>
	return;
 8000372:	bf00      	nop
}
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <_ZN5W550017setUDPmodeSocket0Ev>:

void W5500::setUDPmodeSocket0()
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b084      	sub	sp, #16
 800037e:	af02      	add	r7, sp, #8
 8000380:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2200      	movs	r2, #0
 8000386:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_MR;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2200      	movs	r2, #0
 800038c:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001100;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	220c      	movs	r2, #12
 8000392:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0b00000010; // UDP mode
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2202      	movs	r2, #2
 8000398:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6858      	ldr	r0, [r3, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	899b      	ldrh	r3, [r3, #12]
 80003a2:	2200      	movs	r2, #0
 80003a4:	4619      	mov	r1, r3
 80003a6:	f001 f96d 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	6818      	ldr	r0, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f103 0110 	add.w	r1, r3, #16
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80003ba:	2364      	movs	r3, #100	; 0x64
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2304      	movs	r3, #4
 80003c0:	f001 fe3a 	bl	8002038 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6858      	ldr	r0, [r3, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	899b      	ldrh	r3, [r3, #12]
 80003cc:	2201      	movs	r2, #1
 80003ce:	4619      	mov	r1, r3
 80003d0:	f001 f958 	bl	8001684 <HAL_GPIO_WritePin>
	return;
 80003d4:	bf00      	nop
}
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <_ZN5W550011openSocket0Ev>:

void W5500::openSocket0()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af02      	add	r7, sp, #8
 80003e2:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2200      	movs	r2, #0
 80003e8:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_CR;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2201      	movs	r2, #1
 80003ee:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001100;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	220c      	movs	r2, #12
 80003f4:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0b00000001; // open
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2201      	movs	r2, #1
 80003fa:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	6858      	ldr	r0, [r3, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	899b      	ldrh	r3, [r3, #12]
 8000404:	2200      	movs	r2, #0
 8000406:	4619      	mov	r1, r3
 8000408:	f001 f93c 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6818      	ldr	r0, [r3, #0]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f103 0110 	add.w	r1, r3, #16
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800041c:	2364      	movs	r3, #100	; 0x64
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2304      	movs	r3, #4
 8000422:	f001 fe09 	bl	8002038 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6858      	ldr	r0, [r3, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	899b      	ldrh	r3, [r3, #12]
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	f001 f927 	bl	8001684 <HAL_GPIO_WritePin>
	return;
 8000436:	bf00      	nop
}
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_ZN5W550016getStatusSocket0Ev>:

uint8_t W5500::getStatusSocket0()
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b084      	sub	sp, #16
 8000442:	af02      	add	r7, sp, #8
 8000444:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2200      	movs	r2, #0
 800044a:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_SR;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2203      	movs	r2, #3
 8000450:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001000;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2208      	movs	r2, #8
 8000456:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2200      	movs	r2, #0
 800045c:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6858      	ldr	r0, [r3, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	899b      	ldrh	r3, [r3, #12]
 8000466:	2200      	movs	r2, #0
 8000468:	4619      	mov	r1, r3
 800046a:	f001 f90b 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f103 0110 	add.w	r1, r3, #16
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800047e:	2364      	movs	r3, #100	; 0x64
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2304      	movs	r3, #4
 8000484:	f001 fdd8 	bl	8002038 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6858      	ldr	r0, [r3, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	899b      	ldrh	r3, [r3, #12]
 8000490:	2201      	movs	r2, #1
 8000492:	4619      	mov	r1, r3
 8000494:	f001 f8f6 	bl	8001684 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <_ZN5W550019readRXbufferSocket0Ev>:

uint8_t W5500::readRXbufferSocket0()
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b084      	sub	sp, #16
 80004aa:	af02      	add	r7, sp, #8
 80004ac:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2200      	movs	r2, #0
 80004b2:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = 0;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00010000;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2210      	movs	r2, #16
 80004be:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6858      	ldr	r0, [r3, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	899b      	ldrh	r3, [r3, #12]
 80004ce:	2200      	movs	r2, #0
 80004d0:	4619      	mov	r1, r3
 80004d2:	f001 f8d7 	bl	8001684 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6818      	ldr	r0, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f103 0110 	add.w	r1, r3, #16
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80004e6:	2364      	movs	r3, #100	; 0x64
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2304      	movs	r3, #4
 80004ec:	f001 fda4 	bl	8002038 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6858      	ldr	r0, [r3, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	899b      	ldrh	r3, [r3, #12]
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	f001 f8c2 	bl	8001684 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b0b2      	sub	sp, #200	; 0xc8
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fced 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f89b 	bl	8000654 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fa0b 	bl	8000938 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000522:	f000 f8e7 	bl	80006f4 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000526:	f000 f9d9 	bl	80008dc <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 800052a:	f000 f97b 	bl	8000824 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 800052e:	f000 f91d 	bl	800076c <_ZL12MX_TIM3_Initv>
  srb2.sNdipr2 = 2;
  */
  //readFLASH();

  // Cоздаем интерфейc c чипом W5500
  W5500 port1(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);
 8000532:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000536:	2310      	movs	r3, #16
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	4b3d      	ldr	r3, [pc, #244]	; (8000630 <main+0x120>)
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2320      	movs	r3, #32
 8000540:	4a3b      	ldr	r2, [pc, #236]	; (8000630 <main+0x120>)
 8000542:	493c      	ldr	r1, [pc, #240]	; (8000634 <main+0x124>)
 8000544:	f7ff fe02 	bl	800014c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>

  // Включаем чип W5500
  port1.switchOn();
 8000548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe26 	bl	800019e <_ZN5W55008switchOnEv>
  port1.writeCRB(&crb.mr);
 8000552:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000556:	4938      	ldr	r1, [pc, #224]	; (8000638 <main+0x128>)
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe73 	bl	8000244 <_ZN5W55008writeCRBEPh>
  port1.initSocket0();
 800055e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff feb0 	bl	80002c8 <_ZN5W550011initSocket0Ev>
  port1.setUDPmodeSocket0();
 8000568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff04 	bl	800037a <_ZN5W550017setUDPmodeSocket0Ev>
  HAL_Delay(10);
 8000572:	200a      	movs	r0, #10
 8000574:	f000 fd20 	bl	8000fb8 <HAL_Delay>
  port1.openSocket0();
 8000578:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff2d 	bl	80003dc <_ZN5W550011openSocket0Ev>
  HAL_Delay(10);
 8000582:	200a      	movs	r0, #10
 8000584:	f000 fd18 	bl	8000fb8 <HAL_Delay>

  txByte = port1.getStatusSocket0();
 8000588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff56 	bl	800043e <_ZN5W550016getStatusSocket0Ev>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <main+0x12c>)
 8000598:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	4827      	ldr	r0, [pc, #156]	; (8000640 <main+0x130>)
 80005a2:	f001 f86f 	bl	8001684 <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart1, &txByte, 1 );
 80005a6:	2201      	movs	r2, #1
 80005a8:	4924      	ldr	r1, [pc, #144]	; (800063c <main+0x12c>)
 80005aa:	4826      	ldr	r0, [pc, #152]	; (8000644 <main+0x134>)
 80005ac:	f002 fcfd 	bl	8002faa <HAL_UART_Transmit_IT>




  // Разрешаем прием по UART
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	4925      	ldr	r1, [pc, #148]	; (8000648 <main+0x138>)
 80005b4:	4823      	ldr	r0, [pc, #140]	; (8000644 <main+0x134>)
 80005b6:	f002 fd3c 	bl	8003032 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (rxDataIsReadyToParse)
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <main+0x13c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d01d      	beq.n	80005fe <main+0xee>
	  {
		  if(rxBytesToParse[0] == 'A' && rxBytesToParse[1] == 'T')
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <main+0x140>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b41      	cmp	r3, #65	; 0x41
 80005c8:	d116      	bne.n	80005f8 <main+0xe8>
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <main+0x140>)
 80005cc:	785b      	ldrb	r3, [r3, #1]
 80005ce:	2b54      	cmp	r3, #84	; 0x54
 80005d0:	d112      	bne.n	80005f8 <main+0xe8>
		  {
			  switch(rxBytesToParse[2])
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <main+0x140>)
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	2b30      	cmp	r3, #48	; 0x30
 80005d8:	d002      	beq.n	80005e0 <main+0xd0>
 80005da:	2b31      	cmp	r3, #49	; 0x31
 80005dc:	d006      	beq.n	80005ec <main+0xdc>
				  break;
			  case '1':
				  port1.switchOn();
				  break;
			  default:
				  break;
 80005de:	e00b      	b.n	80005f8 <main+0xe8>
				  port1.writeSHA();
 80005e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fded 	bl	80001c4 <_ZN5W55008writeSHAEv>
				  break;
 80005ea:	e005      	b.n	80005f8 <main+0xe8>
				  port1.switchOn();
 80005ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fdd4 	bl	800019e <_ZN5W55008switchOnEv>
				  break;
 80005f6:	bf00      	nop
			  }


		  }
		  rxDataIsReadyToParse = false;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <main+0x13c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f000 fcd9 	bl	8000fb8 <HAL_Delay>
	  //port1.writeSHA();
	  //port1.readSHA(rxHello);
	  //HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
	  //HAL_UART_Transmit_IT(&huart1, rxHello, 6 );

	  txByte = port1.readRXbufferSocket0();
 8000606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff4b 	bl	80004a6 <_ZN5W550019readRXbufferSocket0Ev>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <main+0x12c>)
 8000616:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <main+0x130>)
 8000620:	f001 f830 	bl	8001684 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit_IT(&huart1, &txByte, 1 );
 8000624:	2201      	movs	r2, #1
 8000626:	4905      	ldr	r1, [pc, #20]	; (800063c <main+0x12c>)
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <main+0x134>)
 800062a:	f002 fcbe 	bl	8002faa <HAL_UART_Transmit_IT>
	  if (rxDataIsReadyToParse)
 800062e:	e7c4      	b.n	80005ba <main+0xaa>
 8000630:	40011000 	.word	0x40011000
 8000634:	20000058 	.word	0x20000058
 8000638:	20000000 	.word	0x20000000
 800063c:	20000185 	.word	0x20000185
 8000640:	40010c00 	.word	0x40010c00
 8000644:	20000140 	.word	0x20000140
 8000648:	20000184 	.word	0x20000184
 800064c:	2000028d 	.word	0x2000028d
 8000650:	2000020c 	.word	0x2000020c

08000654 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b090      	sub	sp, #64	; 0x40
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2228      	movs	r2, #40	; 0x28
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f910 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000692:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f82b 	bl	80016f8 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80006b2:	f000 fa7d 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fa93 	bl	8001bfc <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf14      	ite	ne
 80006dc:	2301      	movne	r3, #1
 80006de:	2300      	moveq	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80006e6:	f000 fa63 	bl	8000bb0 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3740      	adds	r7, #64	; 0x40
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <_ZL12MX_SPI1_Initv+0x74>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 8000700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 8000728:	2208      	movs	r2, #8
 800072a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 8000740:	220a      	movs	r2, #10
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <_ZL12MX_SPI1_Initv+0x70>)
 8000746:	f001 fbf3 	bl	8001f30 <HAL_SPI_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800075a:	f000 fa29 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000058 	.word	0x20000058
 8000768:	40013000 	.word	0x40013000

0800076c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 800078a:	4a25      	ldr	r2, [pc, #148]	; (8000820 <_ZL12MX_TIM3_Initv+0xb4>)
 800078c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 8000790:	220b      	movs	r2, #11
 8000792:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 800079c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80007a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ae:	481b      	ldr	r0, [pc, #108]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 80007b0:	f001 ff8e 	bl	80026d0 <HAL_TIM_Base_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	bf14      	ite	ne
 80007ba:	2301      	movne	r3, #1
 80007bc:	2300      	moveq	r3, #0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 80007c4:	f000 f9f4 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	4619      	mov	r1, r3
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 80007d6:	f002 f94b 	bl	8002a70 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 80007ea:	f000 f9e1 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <_ZL12MX_TIM3_Initv+0xb0>)
 80007fc:	f002 fb18 	bl	8002e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8000810:	f000 f9ce 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000b0 	.word	0x200000b0
 8000820:	40000400 	.word	0x40000400

08000824 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	463b      	mov	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <_ZL12MX_TIM4_Initv+0xb4>)
 8000844:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000848:	2203      	movs	r2, #3
 800084a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000854:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000858:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 8000868:	f001 ff32 	bl	80026d0 <HAL_TIM_Base_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf14      	ite	ne
 8000872:	2301      	movne	r3, #1
 8000874:	2300      	moveq	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 800087c:	f000 f998 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4619      	mov	r1, r3
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 800088e:	f002 f8ef 	bl	8002a70 <HAL_TIM_ConfigClockSource>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf14      	ite	ne
 8000898:	2301      	movne	r3, #1
 800089a:	2300      	moveq	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 80008a2:	f000 f985 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <_ZL12MX_TIM4_Initv+0xb0>)
 80008b4:	f002 fabc 	bl	8002e30 <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf14      	ite	ne
 80008be:	2301      	movne	r3, #1
 80008c0:	2300      	moveq	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 80008c8:	f000 f972 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000f8 	.word	0x200000f8
 80008d8:	40000800 	.word	0x40000800

080008dc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <_ZL19MX_USART1_UART_Initv+0x58>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000914:	f002 fafc 	bl	8002f10 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000928:	f000 f942 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000140 	.word	0x20000140
 8000934:	40013800 	.word	0x40013800

08000938 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 8000952:	f043 0320 	orr.w	r3, r3, #32
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0320 	and.w	r3, r3, #32
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a2e      	ldr	r2, [pc, #184]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <_ZL12MX_GPIO_Initv+0x11c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0308 	and.w	r3, r3, #8
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2110      	movs	r1, #16
 80009b0:	4829      	ldr	r0, [pc, #164]	; (8000a58 <_ZL12MX_GPIO_Initv+0x120>)
 80009b2:	f000 fe67 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2120      	movs	r1, #32
 80009ba:	4827      	ldr	r0, [pc, #156]	; (8000a58 <_ZL12MX_GPIO_Initv+0x120>)
 80009bc:	f000 fe62 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80009c6:	4825      	ldr	r0, [pc, #148]	; (8000a5c <_ZL12MX_GPIO_Initv+0x124>)
 80009c8:	f000 fe5c 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 80009cc:	2310      	movs	r3, #16
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <_ZL12MX_GPIO_Initv+0x128>)
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4821      	ldr	r0, [pc, #132]	; (8000a64 <_ZL12MX_GPIO_Initv+0x12c>)
 80009e0:	f000 fccc 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 80009e4:	2330      	movs	r3, #48	; 0x30
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	4817      	ldr	r0, [pc, #92]	; (8000a58 <_ZL12MX_GPIO_Initv+0x120>)
 80009fc:	f000 fcbe 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8000a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a06:	2311      	movs	r3, #17
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	4810      	ldr	r0, [pc, #64]	; (8000a5c <_ZL12MX_GPIO_Initv+0x124>)
 8000a1a:	f000 fcaf 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 8000a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <_ZL12MX_GPIO_Initv+0x124>)
 8000a38:	f000 fca0 	bl	800137c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	200a      	movs	r0, #10
 8000a42:	f000 fbb4 	bl	80011ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f000 fbcd 	bl	80011e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010c00 	.word	0x40010c00
 8000a60:	10210000 	.word	0x10210000
 8000a64:	40010800 	.word	0x40010800

08000a68 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <HAL_UART_RxCpltCallback+0x5c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d121      	bne.n	8000abc <HAL_UART_RxCpltCallback+0x54>
  {
	  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <HAL_UART_RxCpltCallback+0x60>)
 8000a80:	f000 fe00 	bl	8001684 <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Start_IT(&htim4);
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <HAL_UART_RxCpltCallback+0x64>)
 8000a86:	f001 fe99 	bl	80027bc <HAL_TIM_Base_Start_IT>
	  //HAL_TIM_Base_Stop(&htim3);
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_RxCpltCallback+0x68>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Start_IT(&htim3);
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <HAL_UART_RxCpltCallback+0x68>)
 8000a94:	f001 fe92 	bl	80027bc <HAL_TIM_Base_Start_IT>
	  rxBytes[rxCounter] = rxByte;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_RxCpltCallback+0x6c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_UART_RxCpltCallback+0x70>)
 8000aa0:	7819      	ldrb	r1, [r3, #0]
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_UART_RxCpltCallback+0x74>)
 8000aa4:	5499      	strb	r1, [r3, r2]
	  //buf1.put(rxByte);
	  rxCounter++;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_UART_RxCpltCallback+0x6c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_UART_RxCpltCallback+0x6c>)
 8000ab0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <HAL_UART_RxCpltCallback+0x70>)
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <HAL_UART_RxCpltCallback+0x5c>)
 8000ab8:	f002 fabb 	bl	8003032 <HAL_UART_Receive_IT>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000140 	.word	0x20000140
 8000ac8:	40010c00 	.word	0x40010c00
 8000acc:	200000f8 	.word	0x200000f8
 8000ad0:	200000b0 	.word	0x200000b0
 8000ad4:	20000208 	.word	0x20000208
 8000ad8:	20000184 	.word	0x20000184
 8000adc:	20000188 	.word	0x20000188

08000ae0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_UART_TxCpltCallback+0x24>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d105      	bne.n	8000afc <HAL_UART_TxCpltCallback+0x1c>
  {
	  // гаcим cветодиод "TX"
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <HAL_UART_TxCpltCallback+0x28>)
 8000af8:	f000 fdc4 	bl	8001684 <HAL_GPIO_WritePin>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000140 	.word	0x20000140
 8000b08:	40010c00 	.word	0x40010c00

08000b0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from TIM4
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d121      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		HAL_TIM_Base_Stop(&htim3);
 8000b1e:	481b      	ldr	r0, [pc, #108]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b20:	f001 fe25 	bl	800276e <HAL_TIM_Base_Stop>
		//HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
		//HAL_UART_Transmit_IT(&huart1, rxBytes, rxCounter);
		for (int i = 0; i < rxCounter; ++i)
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4293      	cmp	r3, r2
 8000b32:	da0c      	bge.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			rxBytesToParse[i] = rxBytes[i];
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4413      	add	r3, r2
 8000b3a:	7819      	ldrb	r1, [r3, #0]
 8000b3c:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	460a      	mov	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < rxCounter; ++i)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e7ec      	b.n	8000b28 <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
		rxCounterToParse = rxCounter;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b54:	701a      	strb	r2, [r3, #0]
		rxDataIsReadyToParse = true;
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
		rxCounter = 0;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]

		//HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
	}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM4
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d108      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		HAL_TIM_Base_Stop(&htim4);
 8000b6c:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b6e:	f001 fdfe 	bl	800276e <HAL_TIM_Base_Stop>
		HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b7a:	f000 fd83 	bl	8001684 <HAL_GPIO_WritePin>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40000400 	.word	0x40000400
 8000b8c:	200000b0 	.word	0x200000b0
 8000b90:	20000208 	.word	0x20000208
 8000b94:	20000188 	.word	0x20000188
 8000b98:	2000020c 	.word	0x2000020c
 8000b9c:	2000028c 	.word	0x2000028c
 8000ba0:	2000028d 	.word	0x2000028d
 8000ba4:	40000800 	.word	0x40000800
 8000ba8:	200000f8 	.word	0x200000f8
 8000bac:	40010c00 	.word	0x40010c00

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x5c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x5c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_MspInit+0x60>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_MspInit+0x60>)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000

08000c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <HAL_SPI_MspInit+0x98>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d137      	bne.n	8000cb0 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <HAL_SPI_MspInit+0x9c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <HAL_SPI_MspInit+0x9c>)
 8000c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_SPI_MspInit+0x9c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_SPI_MspInit+0x9c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_SPI_MspInit+0x9c>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_SPI_MspInit+0x9c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4619      	mov	r1, r3
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <HAL_SPI_MspInit+0xa0>)
 8000c84:	f000 fb7a 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c88:	2340      	movs	r3, #64	; 0x40
 8000c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <HAL_SPI_MspInit+0xa0>)
 8000c9c:	f000 fb6e 	bl	800137c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2023      	movs	r0, #35	; 0x23
 8000ca6:	f000 fa82 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000caa:	2023      	movs	r0, #35	; 0x23
 8000cac:	f000 fa9b 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40013000 	.word	0x40013000
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800

08000cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_TIM_Base_MspInit+0x78>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d114      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_TIM_Base_MspInit+0x7c>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_TIM_Base_MspInit+0x7c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	201d      	movs	r0, #29
 8000cf4:	f000 fa5b 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cf8:	201d      	movs	r0, #29
 8000cfa:	f000 fa74 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cfe:	e018      	b.n	8000d32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_TIM_Base_MspInit+0x80>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d113      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_TIM_Base_MspInit+0x7c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <HAL_TIM_Base_MspInit+0x7c>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_TIM_Base_MspInit+0x7c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	201e      	movs	r0, #30
 8000d28:	f000 fa41 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d2c:	201e      	movs	r0, #30
 8000d2e:	f000 fa5a 	bl	80011e6 <HAL_NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40000800 	.word	0x40000800

08000d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <HAL_UART_MspInit+0x9c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d139      	bne.n	8000ddc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <HAL_UART_MspInit+0xa0>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_UART_MspInit+0xa0>)
 8000d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_UART_MspInit+0xa0>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0xa0>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <HAL_UART_MspInit+0xa0>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_UART_MspInit+0xa0>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <HAL_UART_MspInit+0xa4>)
 8000dae:	f000 fae5 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_UART_MspInit+0xa4>)
 8000dc8:	f000 fad8 	bl	800137c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2025      	movs	r0, #37	; 0x25
 8000dd2:	f000 f9ec 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dd6:	2025      	movs	r0, #37	; 0x25
 8000dd8:	f000 fa05 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013800 	.word	0x40013800
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e36:	f000 f8a3 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 8000e42:	2010      	movs	r0, #16
 8000e44:	f000 fc36 	bl	80016b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM3_IRQHandler+0x10>)
 8000e52:	f001 fd05 	bl	8002860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000b0 	.word	0x200000b0

08000e60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM4_IRQHandler+0x10>)
 8000e66:	f001 fcfb 	bl	8002860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000f8 	.word	0x200000f8

08000e74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <SPI1_IRQHandler+0x10>)
 8000e7a:	f001 fa7f 	bl	800237c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000058 	.word	0x20000058

08000e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <USART1_IRQHandler+0x10>)
 8000e8e:	f002 f901 	bl	8003094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000140 	.word	0x20000140

08000e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	; (8000eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ece:	f7ff ffe5 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f002 fcb5 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fb1b 	bl	8000510 <main>
  bx lr
 8000eda:	4770      	bx	lr
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000ee4:	080038e0 	.word	0x080038e0
  ldr r2, =_sbss
 8000ee8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000eec:	20000294 	.word	0x20000294

08000ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x28>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f947 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fe54 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f95f 	bl	8001202 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f927 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000030 	.word	0x20000030
 8000f78:	20000038 	.word	0x20000038
 8000f7c:	20000034 	.word	0x20000034

08000f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x1c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000038 	.word	0x20000038
 8000fa0:	20000290 	.word	0x20000290

08000fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <HAL_GetTick+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000290 	.word	0x20000290

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff fff0 	bl	8000fa4 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffe0 	bl	8000fa4 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000038 	.word	0x20000038

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4906      	ldr	r1, [pc, #24]	; (8001098 <__NVIC_EnableIRQ+0x34>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff90 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff2d 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff42 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff90 	bl	80010f0 <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5f 	bl	800109c <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff35 	bl	8001064 <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffa2 	bl	8001154 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800122c:	2b02      	cmp	r3, #2
 800122e:	d008      	beq.n	8001242 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2204      	movs	r2, #4
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e020      	b.n	8001284 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 020e 	bic.w	r2, r2, #14
 8001250:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
	...

08001290 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d005      	beq.n	80012b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2204      	movs	r2, #4
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e051      	b.n	8001356 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 020e 	bic.w	r2, r2, #14
 80012c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0201 	bic.w	r2, r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_DMA_Abort_IT+0xd0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d029      	beq.n	8001330 <HAL_DMA_Abort_IT+0xa0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a20      	ldr	r2, [pc, #128]	; (8001364 <HAL_DMA_Abort_IT+0xd4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d022      	beq.n	800132c <HAL_DMA_Abort_IT+0x9c>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <HAL_DMA_Abort_IT+0xd8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d01a      	beq.n	8001326 <HAL_DMA_Abort_IT+0x96>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_DMA_Abort_IT+0xdc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d012      	beq.n	8001320 <HAL_DMA_Abort_IT+0x90>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_DMA_Abort_IT+0xe0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00a      	beq.n	800131a <HAL_DMA_Abort_IT+0x8a>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <HAL_DMA_Abort_IT+0xe4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d102      	bne.n	8001314 <HAL_DMA_Abort_IT+0x84>
 800130e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001312:	e00e      	b.n	8001332 <HAL_DMA_Abort_IT+0xa2>
 8001314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001318:	e00b      	b.n	8001332 <HAL_DMA_Abort_IT+0xa2>
 800131a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131e:	e008      	b.n	8001332 <HAL_DMA_Abort_IT+0xa2>
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	e005      	b.n	8001332 <HAL_DMA_Abort_IT+0xa2>
 8001326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132a:	e002      	b.n	8001332 <HAL_DMA_Abort_IT+0xa2>
 800132c:	2310      	movs	r3, #16
 800132e:	e000      	b.n	8001332 <HAL_DMA_Abort_IT+0xa2>
 8001330:	2301      	movs	r3, #1
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_DMA_Abort_IT+0xe8>)
 8001334:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
    } 
  }
  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020008 	.word	0x40020008
 8001364:	4002001c 	.word	0x4002001c
 8001368:	40020030 	.word	0x40020030
 800136c:	40020044 	.word	0x40020044
 8001370:	40020058 	.word	0x40020058
 8001374:	4002006c 	.word	0x4002006c
 8001378:	40020000 	.word	0x40020000

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b08b      	sub	sp, #44	; 0x2c
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e169      	b.n	8001664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001390:	2201      	movs	r2, #1
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	f040 8158 	bne.w	800165e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a9a      	ldr	r2, [pc, #616]	; (800161c <HAL_GPIO_Init+0x2a0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d05e      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013b8:	4a98      	ldr	r2, [pc, #608]	; (800161c <HAL_GPIO_Init+0x2a0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d875      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013be:	4a98      	ldr	r2, [pc, #608]	; (8001620 <HAL_GPIO_Init+0x2a4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d058      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013c4:	4a96      	ldr	r2, [pc, #600]	; (8001620 <HAL_GPIO_Init+0x2a4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d86f      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013ca:	4a96      	ldr	r2, [pc, #600]	; (8001624 <HAL_GPIO_Init+0x2a8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d052      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013d0:	4a94      	ldr	r2, [pc, #592]	; (8001624 <HAL_GPIO_Init+0x2a8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d869      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013d6:	4a94      	ldr	r2, [pc, #592]	; (8001628 <HAL_GPIO_Init+0x2ac>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d04c      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013dc:	4a92      	ldr	r2, [pc, #584]	; (8001628 <HAL_GPIO_Init+0x2ac>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d863      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013e2:	4a92      	ldr	r2, [pc, #584]	; (800162c <HAL_GPIO_Init+0x2b0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d046      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
 80013e8:	4a90      	ldr	r2, [pc, #576]	; (800162c <HAL_GPIO_Init+0x2b0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d85d      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013ee:	2b12      	cmp	r3, #18
 80013f0:	d82a      	bhi.n	8001448 <HAL_GPIO_Init+0xcc>
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d859      	bhi.n	80014aa <HAL_GPIO_Init+0x12e>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <HAL_GPIO_Init+0x80>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001451 	.word	0x08001451
 8001404:	08001463 	.word	0x08001463
 8001408:	080014a5 	.word	0x080014a5
 800140c:	080014ab 	.word	0x080014ab
 8001410:	080014ab 	.word	0x080014ab
 8001414:	080014ab 	.word	0x080014ab
 8001418:	080014ab 	.word	0x080014ab
 800141c:	080014ab 	.word	0x080014ab
 8001420:	080014ab 	.word	0x080014ab
 8001424:	080014ab 	.word	0x080014ab
 8001428:	080014ab 	.word	0x080014ab
 800142c:	080014ab 	.word	0x080014ab
 8001430:	080014ab 	.word	0x080014ab
 8001434:	080014ab 	.word	0x080014ab
 8001438:	080014ab 	.word	0x080014ab
 800143c:	080014ab 	.word	0x080014ab
 8001440:	08001459 	.word	0x08001459
 8001444:	0800146d 	.word	0x0800146d
 8001448:	4a79      	ldr	r2, [pc, #484]	; (8001630 <HAL_GPIO_Init+0x2b4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800144e:	e02c      	b.n	80014aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e029      	b.n	80014ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	3304      	adds	r3, #4
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e024      	b.n	80014ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	3308      	adds	r3, #8
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e01f      	b.n	80014ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	330c      	adds	r3, #12
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e01a      	b.n	80014ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800147e:	2304      	movs	r3, #4
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e013      	b.n	80014ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	611a      	str	r2, [r3, #16]
          break;
 8001496:	e009      	b.n	80014ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001498:	2308      	movs	r3, #8
 800149a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	615a      	str	r2, [r3, #20]
          break;
 80014a2:	e003      	b.n	80014ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
          break;
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x130>
          break;
 80014aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2bff      	cmp	r3, #255	; 0xff
 80014b0:	d801      	bhi.n	80014b6 <HAL_GPIO_Init+0x13a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	e001      	b.n	80014ba <HAL_GPIO_Init+0x13e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3304      	adds	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2bff      	cmp	r3, #255	; 0xff
 80014c0:	d802      	bhi.n	80014c8 <HAL_GPIO_Init+0x14c>
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0x152>
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	3b08      	subs	r3, #8
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	210f      	movs	r1, #15
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	6a39      	ldr	r1, [r7, #32]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	431a      	orrs	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80b1 	beq.w	800165e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014fc:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <HAL_GPIO_Init+0x2b8>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a4c      	ldr	r2, [pc, #304]	; (8001634 <HAL_GPIO_Init+0x2b8>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_GPIO_Init+0x2b8>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001514:	4a48      	ldr	r2, [pc, #288]	; (8001638 <HAL_GPIO_Init+0x2bc>)
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a40      	ldr	r2, [pc, #256]	; (800163c <HAL_GPIO_Init+0x2c0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d013      	beq.n	8001568 <HAL_GPIO_Init+0x1ec>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3f      	ldr	r2, [pc, #252]	; (8001640 <HAL_GPIO_Init+0x2c4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00d      	beq.n	8001564 <HAL_GPIO_Init+0x1e8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a3e      	ldr	r2, [pc, #248]	; (8001644 <HAL_GPIO_Init+0x2c8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x1e4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a3d      	ldr	r2, [pc, #244]	; (8001648 <HAL_GPIO_Init+0x2cc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_GPIO_Init+0x1e0>
 8001558:	2303      	movs	r3, #3
 800155a:	e006      	b.n	800156a <HAL_GPIO_Init+0x1ee>
 800155c:	2304      	movs	r3, #4
 800155e:	e004      	b.n	800156a <HAL_GPIO_Init+0x1ee>
 8001560:	2302      	movs	r3, #2
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0x1ee>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_GPIO_Init+0x1ee>
 8001568:	2300      	movs	r3, #0
 800156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156c:	f002 0203 	and.w	r2, r2, #3
 8001570:	0092      	lsls	r2, r2, #2
 8001572:	4093      	lsls	r3, r2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800157a:	492f      	ldr	r1, [pc, #188]	; (8001638 <HAL_GPIO_Init+0x2bc>)
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_GPIO_Init+0x2d0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	492c      	ldr	r1, [pc, #176]	; (800164c <HAL_GPIO_Init+0x2d0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4928      	ldr	r1, [pc, #160]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4922      	ldr	r1, [pc, #136]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	491e      	ldr	r1, [pc, #120]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	4918      	ldr	r1, [pc, #96]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4914      	ldr	r1, [pc, #80]	; (800164c <HAL_GPIO_Init+0x2d0>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d021      	beq.n	8001650 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_GPIO_Init+0x2d0>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	490e      	ldr	r1, [pc, #56]	; (800164c <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	60cb      	str	r3, [r1, #12]
 8001618:	e021      	b.n	800165e <HAL_GPIO_Init+0x2e2>
 800161a:	bf00      	nop
 800161c:	10320000 	.word	0x10320000
 8001620:	10310000 	.word	0x10310000
 8001624:	10220000 	.word	0x10220000
 8001628:	10210000 	.word	0x10210000
 800162c:	10120000 	.word	0x10120000
 8001630:	10110000 	.word	0x10110000
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000
 800163c:	40010800 	.word	0x40010800
 8001640:	40010c00 	.word	0x40010c00
 8001644:	40011000 	.word	0x40011000
 8001648:	40011400 	.word	0x40011400
 800164c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_GPIO_Init+0x304>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	43db      	mvns	r3, r3
 8001658:	4909      	ldr	r1, [pc, #36]	; (8001680 <HAL_GPIO_Init+0x304>)
 800165a:	4013      	ands	r3, r2
 800165c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	f47f ae8e 	bne.w	8001390 <HAL_GPIO_Init+0x14>
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	372c      	adds	r7, #44	; 0x2c
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016a0:	e003      	b.n	80016aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	041a      	lsls	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	611a      	str	r2, [r3, #16]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f806 	bl	80016e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e272      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8087 	beq.w	8001826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001718:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b04      	cmp	r3, #4
 8001722:	d00c      	beq.n	800173e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001724:	4b8f      	ldr	r3, [pc, #572]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d112      	bne.n	8001756 <HAL_RCC_OscConfig+0x5e>
 8001730:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d10b      	bne.n	8001756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173e:	4b89      	ldr	r3, [pc, #548]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d06c      	beq.n	8001824 <HAL_RCC_OscConfig+0x12c>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d168      	bne.n	8001824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e24c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x76>
 8001760:	4b80      	ldr	r3, [pc, #512]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a7f      	ldr	r2, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e02e      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x98>
 8001776:	4b7b      	ldr	r3, [pc, #492]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7a      	ldr	r2, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b78      	ldr	r3, [pc, #480]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a77      	ldr	r2, [pc, #476]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0xbc>
 800179a:	4b72      	ldr	r3, [pc, #456]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a71      	ldr	r2, [pc, #452]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 80017b4:	4b6b      	ldr	r3, [pc, #428]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a6a      	ldr	r2, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a67      	ldr	r2, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fbe6 	bl	8000fa4 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fbe2 	bl	8000fa4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e200      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xe4>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fbd2 	bl	8000fa4 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fbce 	bl	8000fa4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1ec      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x10c>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d063      	beq.n	80018fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001832:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800183e:	4b49      	ldr	r3, [pc, #292]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d11c      	bne.n	8001884 <HAL_RCC_OscConfig+0x18c>
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x176>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e1c0      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4939      	ldr	r1, [pc, #228]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	e03a      	b.n	80018fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff fb87 	bl	8000fa4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff fb83 	bl	8000fa4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1a1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4927      	ldr	r1, [pc, #156]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fb66 	bl	8000fa4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff fb62 	bl	8000fa4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e180      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d03a      	beq.n	800197c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_RCC_OscConfig+0x274>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7ff fb46 	bl	8000fa4 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff fb42 	bl	8000fa4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e160      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800193a:	2001      	movs	r0, #1
 800193c:	f000 fada 	bl	8001ef4 <RCC_Delay>
 8001940:	e01c      	b.n	800197c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_RCC_OscConfig+0x274>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff fb2c 	bl	8000fa4 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194e:	e00f      	b.n	8001970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001950:	f7ff fb28 	bl	8000fa4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d908      	bls.n	8001970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e146      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	42420000 	.word	0x42420000
 800196c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b92      	ldr	r3, [pc, #584]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e9      	bne.n	8001950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a6 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b8b      	ldr	r3, [pc, #556]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a87      	ldr	r2, [pc, #540]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7e      	ldr	r2, [pc, #504]	; (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fae9 	bl	8000fa4 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff fae5 	bl	8000fa4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	; 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e103      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b75      	ldr	r3, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x312>
 80019fc:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a6e      	ldr	r2, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e02d      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x334>
 8001a12:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a69      	ldr	r2, [pc, #420]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a66      	ldr	r2, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	e01c      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x356>
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a5a      	ldr	r2, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d015      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fa99 	bl	8000fa4 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff fa95 	bl	8000fa4 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0b1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ee      	beq.n	8001a76 <HAL_RCC_OscConfig+0x37e>
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa83 	bl	8000fa4 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fa7f 	bl	8000fa4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e09b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a3b      	ldr	r2, [pc, #236]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8087 	beq.w	8001bee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d061      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d146      	bne.n	8001b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fa53 	bl	8000fa4 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff fa4f 	bl	8000fa4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e06d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b28:	d108      	bne.n	8001b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4921      	ldr	r1, [pc, #132]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a19      	ldr	r1, [r3, #32]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	491b      	ldr	r1, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fa23 	bl	8000fa4 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff fa1f 	bl	8000fa4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e03d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x46a>
 8001b80:	e035      	b.n	8001bee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fa0c 	bl	8000fa4 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff fa08 	bl	8000fa4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e026      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x498>
 8001bae:	e01e      	b.n	8001bee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e019      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_OscConfig+0x500>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4965      	ldr	r1, [pc, #404]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e073      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4936      	ldr	r1, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f95a 	bl	8000fa4 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff f956 	bl	8000fa4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e053      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d210      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f821 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f8b8 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	080038c0 	.word	0x080038c0
 8001dc8:	20000030 	.word	0x20000030
 8001dcc:	20000034 	.word	0x20000034

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b490      	push	{r4, r7}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dd6:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xac>)
 8001dd8:	1d3c      	adds	r4, r7, #4
 8001dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de0:	f240 2301 	movw	r3, #513	; 0x201
 8001de4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x46>
 8001e0e:	e02b      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e12:	623b      	str	r3, [r7, #32]
      break;
 8001e14:	e02b      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3328      	adds	r3, #40	; 0x28
 8001e20:	443b      	add	r3, r7
 8001e22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e26:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	0c5b      	lsrs	r3, r3, #17
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	3328      	adds	r3, #40	; 0x28
 8001e3e:	443b      	add	r3, r7
 8001e40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4a:	fb03 f202 	mul.w	r2, r3, r2
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	e004      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	623b      	str	r3, [r7, #32]
      break;
 8001e66:	e002      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e6a:	623b      	str	r3, [r7, #32]
      break;
 8001e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc90      	pop	{r4, r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	080038b0 	.word	0x080038b0
 8001e80:	40021000 	.word	0x40021000
 8001e84:	00b71b00 	.word	0x00b71b00
 8001e88:	003d0900 	.word	0x003d0900
 8001e8c:	007a1200 	.word	0x007a1200

08001e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000030 	.word	0x20000030

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea8:	f7ff fff2 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	080038d0 	.word	0x080038d0

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0adb      	lsrs	r3, r3, #11
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	080038d0 	.word	0x080038d0

08001ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <RCC_Delay+0x34>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <RCC_Delay+0x38>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	0a5b      	lsrs	r3, r3, #9
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f10:	bf00      	nop
  }
  while (Delay --);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	60fa      	str	r2, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f9      	bne.n	8001f10 <RCC_Delay+0x1c>
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	20000030 	.word	0x20000030
 8001f2c:	10624dd3 	.word	0x10624dd3

08001f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e076      	b.n	8002030 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d108      	bne.n	8001f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f52:	d009      	beq.n	8001f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
 8001f5a:	e005      	b.n	8001f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe fe4c 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fec:	ea42 0103 	orr.w	r1, r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	0c1a      	lsrs	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f002 0204 	and.w	r2, r2, #4
 800200e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800201e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002046:	2301      	movs	r3, #1
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_SPI_TransmitReceive+0x26>
 800205a:	2302      	movs	r3, #2
 800205c:	e18a      	b.n	8002374 <HAL_SPI_TransmitReceive+0x33c>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002066:	f7fe ff9d 	bl	8000fa4 <HAL_GetTick>
 800206a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002084:	2b01      	cmp	r3, #1
 8002086:	d00f      	beq.n	80020a8 <HAL_SPI_TransmitReceive+0x70>
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800208e:	d107      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x68>
 8002098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800209c:	2b04      	cmp	r3, #4
 800209e:	d003      	beq.n	80020a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020a6:	e15b      	b.n	8002360 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_SPI_TransmitReceive+0x82>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_SPI_TransmitReceive+0x82>
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020c0:	e14e      	b.n	8002360 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d003      	beq.n	80020d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2205      	movs	r2, #5
 80020d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d007      	beq.n	800212a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002132:	d178      	bne.n	8002226 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_SPI_TransmitReceive+0x10a>
 800213c:	8b7b      	ldrh	r3, [r7, #26]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d166      	bne.n	8002210 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	1c9a      	adds	r2, r3, #2
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002166:	e053      	b.n	8002210 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b02      	cmp	r3, #2
 8002174:	d11b      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x176>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d016      	beq.n	80021ae <HAL_SPI_TransmitReceive+0x176>
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002182:	2b01      	cmp	r3, #1
 8002184:	d113      	bne.n	80021ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	1c9a      	adds	r2, r3, #2
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d119      	bne.n	80021f0 <HAL_SPI_TransmitReceive+0x1b8>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d014      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	b292      	uxth	r2, r2
 80021d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	1c9a      	adds	r2, r3, #2
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021ec:	2301      	movs	r3, #1
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021f0:	f7fe fed8 	bl	8000fa4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d807      	bhi.n	8002210 <HAL_SPI_TransmitReceive+0x1d8>
 8002200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002206:	d003      	beq.n	8002210 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800220e:	e0a7      	b.n	8002360 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1a6      	bne.n	8002168 <HAL_SPI_TransmitReceive+0x130>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1a1      	bne.n	8002168 <HAL_SPI_TransmitReceive+0x130>
 8002224:	e07c      	b.n	8002320 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_SPI_TransmitReceive+0x1fc>
 800222e:	8b7b      	ldrh	r3, [r7, #26]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d16b      	bne.n	800230c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800225a:	e057      	b.n	800230c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b02      	cmp	r3, #2
 8002268:	d11c      	bne.n	80022a4 <HAL_SPI_TransmitReceive+0x26c>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d017      	beq.n	80022a4 <HAL_SPI_TransmitReceive+0x26c>
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	2b01      	cmp	r3, #1
 8002278:	d114      	bne.n	80022a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	330c      	adds	r3, #12
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d119      	bne.n	80022e6 <HAL_SPI_TransmitReceive+0x2ae>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d014      	beq.n	80022e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022e2:	2301      	movs	r3, #1
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022e6:	f7fe fe5d 	bl	8000fa4 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d803      	bhi.n	80022fe <HAL_SPI_TransmitReceive+0x2c6>
 80022f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d102      	bne.n	8002304 <HAL_SPI_TransmitReceive+0x2cc>
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800230a:	e029      	b.n	8002360 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1a2      	bne.n	800225c <HAL_SPI_TransmitReceive+0x224>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d19d      	bne.n	800225c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f9b5 	bl	8002694 <SPI_EndRxTxTransaction>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800233c:	e010      	b.n	8002360 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10b      	bne.n	800235e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	e000      	b.n	8002360 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800235e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002370:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002374:	4618      	mov	r0, r3
 8002376:	3730      	adds	r7, #48	; 0x30
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	099b      	lsrs	r3, r3, #6
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10f      	bne.n	80023c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
    return;
 80023be:	e0be      	b.n	800253e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_SPI_IRQHandler+0x66>
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	09db      	lsrs	r3, r3, #7
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
    return;
 80023e0:	e0ad      	b.n	800253e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_SPI_IRQHandler+0x80>
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80a1 	beq.w	800253e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 809a 	beq.w	800253e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d023      	beq.n	800245e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b03      	cmp	r3, #3
 8002420:	d011      	beq.n	8002446 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f043 0204 	orr.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	e00b      	b.n	800245e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]
        return;
 800245c:	e06f      	b.n	800253e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d014      	beq.n	8002494 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d04f      	beq.n	800253c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <HAL_SPI_IRQHandler+0x14c>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d034      	beq.n	8002532 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0203 	bic.w	r2, r2, #3
 80024d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d011      	beq.n	8002504 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e4:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_SPI_IRQHandler+0x1c8>)
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fecf 	bl	8001290 <HAL_DMA_Abort_IT>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002508:	2b00      	cmp	r3, #0
 800250a:	d016      	beq.n	800253a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_SPI_IRQHandler+0x1c8>)
 8002512:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe feb9 	bl	8001290 <HAL_DMA_Abort_IT>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002530:	e003      	b.n	800253a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f808 	bl	8002548 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002538:	e000      	b.n	800253c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800253a:	bf00      	nop
    return;
 800253c:	bf00      	nop
  }
}
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	0800255b 	.word	0x0800255b

08002548 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7ff ffe7 	bl	8002548 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002594:	f7fe fd06 	bl	8000fa4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025a4:	f7fe fcfe 	bl	8000fa4 <HAL_GetTick>
 80025a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	015b      	lsls	r3, r3, #5
 80025b0:	0d1b      	lsrs	r3, r3, #20
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ba:	e054      	b.n	8002666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c2:	d050      	beq.n	8002666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025c4:	f7fe fcee 	bl	8000fa4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d902      	bls.n	80025da <SPI_WaitFlagStateUntilTimeout+0x56>
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d13d      	bne.n	8002656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f2:	d111      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fc:	d004      	beq.n	8002608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002606:	d107      	bne.n	8002618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002620:	d10f      	bne.n	8002642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e017      	b.n	8002686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3b01      	subs	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	429a      	cmp	r2, r3
 8002682:	d19b      	bne.n	80025bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000030 	.word	0x20000030

08002694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7ff ff6a 	bl	8002584 <SPI_WaitFlagStateUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f043 0220 	orr.w	r2, r3, #32
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e000      	b.n	80026c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e041      	b.n	8002766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fae4 	bl	8000cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f000 fa96 	bl	8002c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <HAL_TIM_Base_Stop+0x38>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	f240 4344 	movw	r3, #1092	; 0x444
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_Base_Stop+0x38>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d001      	beq.n	80027d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e03a      	b.n	800284a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_TIM_Base_Start_IT+0x98>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x58>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fe:	d009      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x58>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <HAL_TIM_Base_Start_IT+0x9c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x58>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_TIM_Base_Start_IT+0xa0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d111      	bne.n	8002838 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b06      	cmp	r3, #6
 8002824:	d010      	beq.n	8002848 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002836:	e007      	b.n	8002848 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400
 800285c:	40000800 	.word	0x40000800

08002860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d122      	bne.n	80028bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b02      	cmp	r3, #2
 8002882:	d11b      	bne.n	80028bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0202 	mvn.w	r2, #2
 800288c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9b1 	bl	8002c0a <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f9a4 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f9b3 	bl	8002c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d122      	bne.n	8002910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0204 	mvn.w	r2, #4
 80028e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f987 	bl	8002c0a <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f97a 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f989 	bl	8002c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b08      	cmp	r3, #8
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b08      	cmp	r3, #8
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0208 	mvn.w	r2, #8
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2204      	movs	r2, #4
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f95d 	bl	8002c0a <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f950 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f95f 	bl	8002c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b10      	cmp	r3, #16
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b10      	cmp	r3, #16
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0210 	mvn.w	r2, #16
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2208      	movs	r2, #8
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f933 	bl	8002c0a <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f926 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f935 	bl	8002c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0201 	mvn.w	r2, #1
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe f894 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	2b80      	cmp	r3, #128	; 0x80
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d107      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fa77 	bl	8002efe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d10e      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d107      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f8f9 	bl	8002c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d107      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0220 	mvn.w	r2, #32
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa42 	bl	8002eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_TIM_ConfigClockSource+0x18>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e0b3      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x180>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac0:	d03e      	beq.n	8002b40 <HAL_TIM_ConfigClockSource+0xd0>
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac6:	f200 8087 	bhi.w	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	f000 8085 	beq.w	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad6:	d87f      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
 8002ad8:	2b70      	cmp	r3, #112	; 0x70
 8002ada:	d01a      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0xa2>
 8002adc:	2b70      	cmp	r3, #112	; 0x70
 8002ade:	d87b      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
 8002ae0:	2b60      	cmp	r3, #96	; 0x60
 8002ae2:	d050      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0x116>
 8002ae4:	2b60      	cmp	r3, #96	; 0x60
 8002ae6:	d877      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
 8002ae8:	2b50      	cmp	r3, #80	; 0x50
 8002aea:	d03c      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0xf6>
 8002aec:	2b50      	cmp	r3, #80	; 0x50
 8002aee:	d873      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d058      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x136>
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d86f      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
 8002af8:	2b30      	cmp	r3, #48	; 0x30
 8002afa:	d064      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x156>
 8002afc:	2b30      	cmp	r3, #48	; 0x30
 8002afe:	d86b      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d060      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x156>
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d867      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d05c      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x156>
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d05a      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b10:	e062      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f000 f966 	bl	8002df2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	609a      	str	r2, [r3, #8]
      break;
 8002b3e:	e04e      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f000 f94f 	bl	8002df2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b62:	609a      	str	r2, [r3, #8]
      break;
 8002b64:	e03b      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f000 f8c6 	bl	8002d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2150      	movs	r1, #80	; 0x50
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f91d 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 8002b84:	e02b      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f000 f8e4 	bl	8002d60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2160      	movs	r1, #96	; 0x60
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f90d 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 8002ba4:	e01b      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f000 f8a6 	bl	8002d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2140      	movs	r1, #64	; 0x40
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f8fd 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 8002bc4:	e00b      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f000 f8f4 	bl	8002dbe <TIM_ITRx_SetConfig>
        break;
 8002bd6:	e002      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002bdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a29      	ldr	r2, [pc, #164]	; (8002cf8 <TIM_Base_SetConfig+0xb8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00b      	beq.n	8002c70 <TIM_Base_SetConfig+0x30>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d007      	beq.n	8002c70 <TIM_Base_SetConfig+0x30>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <TIM_Base_SetConfig+0xbc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_Base_SetConfig+0x30>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <TIM_Base_SetConfig+0xc0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d108      	bne.n	8002c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <TIM_Base_SetConfig+0xb8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <TIM_Base_SetConfig+0x62>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c90:	d007      	beq.n	8002ca2 <TIM_Base_SetConfig+0x62>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <TIM_Base_SetConfig+0xbc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <TIM_Base_SetConfig+0x62>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <TIM_Base_SetConfig+0xc0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <TIM_Base_SetConfig+0xb8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d103      	bne.n	8002ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	615a      	str	r2, [r3, #20]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40000800 	.word	0x40000800

08002d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f023 030a 	bic.w	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f023 0210 	bic.w	r2, r3, #16
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	031b      	lsls	r3, r3, #12
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	621a      	str	r2, [r3, #32]
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f043 0307 	orr.w	r3, r3, #7
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b087      	sub	sp, #28
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	021a      	lsls	r2, r3, #8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	609a      	str	r2, [r3, #8]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e046      	b.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d009      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800

08002eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e03f      	b.n	8002fa2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd ff06 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2224      	movs	r2, #36	; 0x24
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fbe5 	bl	8003724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d130      	bne.n	8003026 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_UART_Transmit_IT+0x26>
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e029      	b.n	8003028 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Transmit_IT+0x38>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e022      	b.n	8003028 <HAL_UART_Transmit_IT+0x7e>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2221      	movs	r2, #33	; 0x21
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003020:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	4613      	mov	r3, r2
 800303e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	d11d      	bne.n	8003088 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Receive_IT+0x26>
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e016      	b.n	800308a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_UART_Receive_IT+0x38>
 8003066:	2302      	movs	r3, #2
 8003068:	e00f      	b.n	800308a <HAL_UART_Receive_IT+0x58>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	461a      	mov	r2, r3
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f9c6 	bl	8003410 <UART_Start_Receive_IT>
 8003084:	4603      	mov	r3, r0
 8003086:	e000      	b.n	800308a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_UART_IRQHandler+0x52>
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa76 	bl	80035d0 <UART_Receive_IT>
      return;
 80030e4:	e17b      	b.n	80033de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80b1 	beq.w	8003250 <HAL_UART_IRQHandler+0x1bc>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <HAL_UART_IRQHandler+0x70>
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80a6 	beq.w	8003250 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_UART_IRQHandler+0x90>
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_UART_IRQHandler+0xb0>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f043 0202 	orr.w	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_UART_IRQHandler+0xd0>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00f      	beq.n	800318e <HAL_UART_IRQHandler+0xfa>
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <HAL_UART_IRQHandler+0xee>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0208 	orr.w	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 811e 	beq.w	80033d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_UART_IRQHandler+0x11e>
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fa0f 	bl	80035d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_UART_IRQHandler+0x146>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d031      	beq.n	800323e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f951 	bl	8003482 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d023      	beq.n	8003236 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	2b00      	cmp	r3, #0
 8003204:	d013      	beq.n	800322e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	4a76      	ldr	r2, [pc, #472]	; (80033e4 <HAL_UART_IRQHandler+0x350>)
 800320c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe f83c 	bl	8001290 <HAL_DMA_Abort_IT>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d016      	beq.n	800324c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003228:	4610      	mov	r0, r2
 800322a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e00e      	b.n	800324c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8da 	bl	80033e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	e00a      	b.n	800324c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8d6 	bl	80033e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	e006      	b.n	800324c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f8d2 	bl	80033e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800324a:	e0c3      	b.n	80033d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	bf00      	nop
    return;
 800324e:	e0c1      	b.n	80033d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	2b01      	cmp	r3, #1
 8003256:	f040 80a1 	bne.w	800339c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 809b 	beq.w	800339c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8095 	beq.w	800339c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d04e      	beq.n	8003334 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032a0:	8a3b      	ldrh	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8098 	beq.w	80033d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032ac:	8a3a      	ldrh	r2, [r7, #16]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f080 8092 	bcs.w	80033d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8a3a      	ldrh	r2, [r7, #16]
 80032b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d02b      	beq.n	800331c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0210 	bic.w	r2, r2, #16
 8003310:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd ff7f 	bl	800121a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003324:	b29b      	uxth	r3, r3
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	b29b      	uxth	r3, r3
 800332a:	4619      	mov	r1, r3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f864 	bl	80033fa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003332:	e051      	b.n	80033d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333c:	b29b      	uxth	r3, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d047      	beq.n	80033dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800334c:	8a7b      	ldrh	r3, [r7, #18]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d044      	beq.n	80033dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003360:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0210 	bic.w	r2, r2, #16
 800338e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003390:	8a7b      	ldrh	r3, [r7, #18]
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f830 	bl	80033fa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800339a:	e01f      	b.n	80033dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_UART_IRQHandler+0x324>
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8a6 	bl	8003502 <UART_Transmit_IT>
    return;
 80033b6:	e012      	b.n	80033de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <HAL_UART_IRQHandler+0x34a>
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f8e7 	bl	80035a0 <UART_EndTransmit_IT>
    return;
 80033d2:	e004      	b.n	80033de <HAL_UART_IRQHandler+0x34a>
    return;
 80033d4:	bf00      	nop
 80033d6:	e002      	b.n	80033de <HAL_UART_IRQHandler+0x34a>
      return;
 80033d8:	bf00      	nop
 80033da:	e000      	b.n	80033de <HAL_UART_IRQHandler+0x34a>
      return;
 80033dc:	bf00      	nop
  }
}
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	080034db 	.word	0x080034db

080033e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2222      	movs	r2, #34	; 0x22
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003454:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0220 	orr.w	r2, r2, #32
 8003474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003498:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0210 	bic.w	r2, r2, #16
 80034c0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff ff77 	bl	80033e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b21      	cmp	r3, #33	; 0x21
 8003514:	d13e      	bne.n	8003594 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351e:	d114      	bne.n	800354a <UART_Transmit_IT+0x48>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d110      	bne.n	800354a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800353c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	1c9a      	adds	r2, r3, #2
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	621a      	str	r2, [r3, #32]
 8003548:	e008      	b.n	800355c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6211      	str	r1, [r2, #32]
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29b      	uxth	r3, r3
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4619      	mov	r1, r3
 800356a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800357e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800358e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7fd fa8d 	bl	8000ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b22      	cmp	r3, #34	; 0x22
 80035e2:	f040 8099 	bne.w	8003718 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ee:	d117      	bne.n	8003620 <UART_Receive_IT+0x50>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	b29b      	uxth	r3, r3
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	b29a      	uxth	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	1c9a      	adds	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28
 800361e:	e026      	b.n	800366e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003632:	d007      	beq.n	8003644 <UART_Receive_IT+0x74>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <UART_Receive_IT+0x82>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e008      	b.n	8003664 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800365e:	b2da      	uxtb	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29b      	uxth	r3, r3
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	4619      	mov	r1, r3
 800367c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800367e:	2b00      	cmp	r3, #0
 8003680:	d148      	bne.n	8003714 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0220 	bic.w	r2, r2, #32
 8003690:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d123      	bne.n	800370a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0210 	bic.w	r2, r2, #16
 80036d6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d10a      	bne.n	80036fc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fe79 	bl	80033fa <HAL_UARTEx_RxEventCallback>
 8003708:	e002      	b.n	8003710 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd f9ac 	bl	8000a68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e002      	b.n	800371a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800375e:	f023 030c 	bic.w	r3, r3, #12
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	430b      	orrs	r3, r1
 800376a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <UART_SetConfig+0x114>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d103      	bne.n	8003794 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800378c:	f7fe fb9e 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	e002      	b.n	800379a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fe fb86 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8003798:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	009a      	lsls	r2, r3, #2
 80037a4:	441a      	add	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	4a22      	ldr	r2, [pc, #136]	; (800383c <UART_SetConfig+0x118>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	0119      	lsls	r1, r3, #4
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009a      	lsls	r2, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <UART_SetConfig+0x118>)
 80037d2:	fba3 0302 	umull	r0, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2064      	movs	r0, #100	; 0x64
 80037da:	fb00 f303 	mul.w	r3, r0, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	3332      	adds	r3, #50	; 0x32
 80037e4:	4a15      	ldr	r2, [pc, #84]	; (800383c <UART_SetConfig+0x118>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f0:	4419      	add	r1, r3
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009a      	lsls	r2, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	fbb2 f2f3 	udiv	r2, r2, r3
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <UART_SetConfig+0x118>)
 800380a:	fba3 0302 	umull	r0, r3, r3, r2
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2064      	movs	r0, #100	; 0x64
 8003812:	fb00 f303 	mul.w	r3, r0, r3
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	3332      	adds	r3, #50	; 0x32
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <UART_SetConfig+0x118>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	f003 020f 	and.w	r2, r3, #15
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	440a      	add	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40013800 	.word	0x40013800
 800383c:	51eb851f 	.word	0x51eb851f

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	2600      	movs	r6, #0
 8003844:	4d0c      	ldr	r5, [pc, #48]	; (8003878 <__libc_init_array+0x38>)
 8003846:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003848:	1b64      	subs	r4, r4, r5
 800384a:	10a4      	asrs	r4, r4, #2
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	f000 f822 	bl	8003898 <_init>
 8003854:	2600      	movs	r6, #0
 8003856:	4d0a      	ldr	r5, [pc, #40]	; (8003880 <__libc_init_array+0x40>)
 8003858:	4c0a      	ldr	r4, [pc, #40]	; (8003884 <__libc_init_array+0x44>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080038d8 	.word	0x080038d8
 800387c:	080038d8 	.word	0x080038d8
 8003880:	080038d8 	.word	0x080038d8
 8003884:	080038dc 	.word	0x080038dc

08003888 <memset>:
 8003888:	4603      	mov	r3, r0
 800388a:	4402      	add	r2, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <_init>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr

080038a4 <_fini>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr


W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b80  08003b80  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b80  08003b80  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b80  08003b80  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000003c  08003bcc  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08003bcc  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e567  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002075  00000000  00000000  0002e5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00031548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e4b  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8b5  00000000  00000000  0004b1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008962c  00000000  00000000  00059a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e30bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f4c  00000000  00000000  000e310c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b40 	.word	0x08003b40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08003b40 	.word	0x08003b40

0800014c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>:
//#pragma once
#include "W5500.h"

W5500::W5500(
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	807b      	strh	r3, [r7, #2]
		SPI_HandleTypeDef* hspi_m,
		GPIO_TypeDef* W5500_CS_GPIO_Port_m,
		uint16_t W5500_CS_Pin_m,
		GPIO_TypeDef* W5500_RST_GPIO_Port_m,
		uint16_t W5500_RST_Pin_m
		)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	3310      	adds	r3, #16
 800015e:	2240      	movs	r2, #64	; 0x40
 8000160:	2100      	movs	r1, #0
 8000162:	4618      	mov	r0, r3
 8000164:	f003 fce4 	bl	8003b30 <memset>
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	3350      	adds	r3, #80	; 0x50
 800016c:	2240      	movs	r2, #64	; 0x40
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f003 fcdd 	bl	8003b30 <memset>
{
	hspi_w = hspi_m;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	68ba      	ldr	r2, [r7, #8]
 800017a:	601a      	str	r2, [r3, #0]
	W5500_CS_GPIO_Port_w = W5500_CS_GPIO_Port_m;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	687a      	ldr	r2, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]
	W5500_CS_Pin_w = W5500_CS_Pin_m;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	887a      	ldrh	r2, [r7, #2]
 8000186:	819a      	strh	r2, [r3, #12]
	W5500_RST_GPIO_Port_w = W5500_RST_GPIO_Port_m;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	69ba      	ldr	r2, [r7, #24]
 800018c:	609a      	str	r2, [r3, #8]
	W5500_RST_Pin_w = W5500_RST_Pin_m;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	8bba      	ldrh	r2, [r7, #28]
 8000192:	81da      	strh	r2, [r3, #14]
}
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	4618      	mov	r0, r3
 8000198:	3710      	adds	r7, #16
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}

0800019e <_ZN5W5500D1Ev>:

W5500::~W5500()
 800019e:	b480      	push	{r7}
 80001a0:	b083      	sub	sp, #12
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
{
}
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	4618      	mov	r0, r3
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr

080001b2 <_ZN5W55005resetEv>:

// аппаратный сброс чипа
void W5500::reset()
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	// для аппаратного сброса "тянем" вход RSTn к "0" на 1 мс
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_RESET);
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6898      	ldr	r0, [r3, #8]
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	89db      	ldrh	r3, [r3, #14]
 80001c2:	2200      	movs	r2, #0
 80001c4:	4619      	mov	r1, r3
 80001c6:	f001 fbbb 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001ca:	2001      	movs	r0, #1
 80001cc:	f001 f852 	bl	8001274 <HAL_Delay>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6898      	ldr	r0, [r3, #8]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	89db      	ldrh	r3, [r3, #14]
 80001d8:	2201      	movs	r2, #1
 80001da:	4619      	mov	r1, r3
 80001dc:	f001 fbb0 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80001e0:	2001      	movs	r0, #1
 80001e2:	f001 f847 	bl	8001274 <HAL_Delay>
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <_ZN5W55008switchOnEv>:
	return;
}

// включение чипа
void W5500::switchOn()
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b082      	sub	sp, #8
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port_w, W5500_RST_Pin_w, GPIO_PIN_SET);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	6898      	ldr	r0, [r3, #8]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	89db      	ldrh	r3, [r3, #14]
 80001fe:	2201      	movs	r2, #1
 8000200:	4619      	mov	r1, r3
 8000202:	f001 fb9d 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000206:	2001      	movs	r0, #1
 8000208:	f001 f834 	bl	8001274 <HAL_Delay>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <_ZN5W55008writeSHAEv>:
	regSHA[5] = misoBytes_w[8];
	return;
}

void W5500::writeSHA()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af02      	add	r7, sp, #8
 800021a:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_SHAR;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2209      	movs	r2, #9
 8000226:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2204      	movs	r2, #4
 800022c:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = 0x08;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2208      	movs	r2, #8
 8000238:	751a      	strb	r2, [r3, #20]
	mosiBytes_w[5] = 0xDC;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	22dc      	movs	r2, #220	; 0xdc
 800023e:	755a      	strb	r2, [r3, #21]
	mosiBytes_w[6] = 0xAB;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	22ab      	movs	r2, #171	; 0xab
 8000244:	759a      	strb	r2, [r3, #22]
	mosiBytes_w[7] = 0xCD;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	22cd      	movs	r2, #205	; 0xcd
 800024a:	75da      	strb	r2, [r3, #23]
	mosiBytes_w[8] = 0x01;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2201      	movs	r2, #1
 8000250:	761a      	strb	r2, [r3, #24]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	6858      	ldr	r0, [r3, #4]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	899b      	ldrh	r3, [r3, #12]
 800025a:	2200      	movs	r2, #0
 800025c:	4619      	mov	r1, r3
 800025e:	f001 fb6f 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 9, 100);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	6818      	ldr	r0, [r3, #0]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f103 0110 	add.w	r1, r3, #16
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000272:	2364      	movs	r3, #100	; 0x64
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2309      	movs	r3, #9
 8000278:	f002 f832 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6858      	ldr	r0, [r3, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	899b      	ldrh	r3, [r3, #12]
 8000284:	2201      	movs	r2, #1
 8000286:	4619      	mov	r1, r3
 8000288:	f001 fb5a 	bl	8001940 <HAL_GPIO_WritePin>
	return;
 800028c:	bf00      	nop
}
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <_ZN5W55008writeCRBEPh>:
	}
	return;
}

void W5500::writeCRB(uint8_t* regCRB)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af02      	add	r7, sp, #8
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
	mosiBytes_w[0] = 0;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2200      	movs	r2, #0
 80002a2:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_MR;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2200      	movs	r2, #0
 80002a8:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2204      	movs	r2, #4
 80002ae:	749a      	strb	r2, [r3, #18]
	for(int i = 0; i < 47; ++i)
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	2b2e      	cmp	r3, #46	; 0x2e
 80002b8:	dc0d      	bgt.n	80002d6 <_ZN5W55008writeCRBEPh+0x42>
	{
		mosiBytes_w[i+3] = regCRB[i];
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	683a      	ldr	r2, [r7, #0]
 80002be:	441a      	add	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3303      	adds	r3, #3
 80002c4:	7811      	ldrb	r1, [r2, #0]
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	4413      	add	r3, r2
 80002ca:	460a      	mov	r2, r1
 80002cc:	741a      	strb	r2, [r3, #16]
	for(int i = 0; i < 47; ++i)
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	3301      	adds	r3, #1
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e7ee      	b.n	80002b4 <_ZN5W55008writeCRBEPh+0x20>
	}
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6858      	ldr	r0, [r3, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	899b      	ldrh	r3, [r3, #12]
 80002de:	2200      	movs	r2, #0
 80002e0:	4619      	mov	r1, r3
 80002e2:	f001 fb2d 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 50, 100);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f103 0110 	add.w	r1, r3, #16
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2332      	movs	r3, #50	; 0x32
 80002fc:	f001 fff0 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	6858      	ldr	r0, [r3, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	899b      	ldrh	r3, [r3, #12]
 8000308:	2201      	movs	r2, #1
 800030a:	4619      	mov	r1, r3
 800030c:	f001 fb18 	bl	8001940 <HAL_GPIO_WritePin>
	return;
 8000310:	bf00      	nop
}
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <_ZN5W550011initSocket0Ev>:

void W5500::initSocket0()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8
 800031e:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2200      	movs	r2, #0
 8000324:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_PORT;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2204      	movs	r2, #4
 800032a:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001100;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	220c      	movs	r2, #12
 8000330:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0x1D; // port 7500
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	221d      	movs	r2, #29
 8000336:	74da      	strb	r2, [r3, #19]
	mosiBytes_w[4] = 0x4C;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	224c      	movs	r2, #76	; 0x4c
 800033c:	751a      	strb	r2, [r3, #20]
	mosiBytes_w[5] = 0x50; // 50-EB-F6-4D-BA-12
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2250      	movs	r2, #80	; 0x50
 8000342:	755a      	strb	r2, [r3, #21]
	mosiBytes_w[6] = 0xEB;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	22eb      	movs	r2, #235	; 0xeb
 8000348:	759a      	strb	r2, [r3, #22]
	mosiBytes_w[7] = 0xF6;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	22f6      	movs	r2, #246	; 0xf6
 800034e:	75da      	strb	r2, [r3, #23]
	mosiBytes_w[8] = 0x4D;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	224d      	movs	r2, #77	; 0x4d
 8000354:	761a      	strb	r2, [r3, #24]
	mosiBytes_w[9] = 0xBA;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	22ba      	movs	r2, #186	; 0xba
 800035a:	765a      	strb	r2, [r3, #25]
	mosiBytes_w[10] = 0x12;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2212      	movs	r2, #18
 8000360:	769a      	strb	r2, [r3, #26]
	mosiBytes_w[11] = 0xC0; // 192.168.1.7
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	22c0      	movs	r2, #192	; 0xc0
 8000366:	76da      	strb	r2, [r3, #27]
	mosiBytes_w[12] = 0xA8;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	22a8      	movs	r2, #168	; 0xa8
 800036c:	771a      	strb	r2, [r3, #28]
	mosiBytes_w[13] = 0x01;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2201      	movs	r2, #1
 8000372:	775a      	strb	r2, [r3, #29]
	mosiBytes_w[14] = 0x07;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2207      	movs	r2, #7
 8000378:	779a      	strb	r2, [r3, #30]
	mosiBytes_w[15] = 0x19; // port 6500
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2219      	movs	r2, #25
 800037e:	77da      	strb	r2, [r3, #31]
	mosiBytes_w[16] = 0x64;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2264      	movs	r2, #100	; 0x64
 8000384:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6858      	ldr	r0, [r3, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	899b      	ldrh	r3, [r3, #12]
 8000390:	2200      	movs	r2, #0
 8000392:	4619      	mov	r1, r3
 8000394:	f001 fad4 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 17, 100);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6818      	ldr	r0, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f103 0110 	add.w	r1, r3, #16
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80003a8:	2364      	movs	r3, #100	; 0x64
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2311      	movs	r3, #17
 80003ae:	f001 ff97 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6858      	ldr	r0, [r3, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	899b      	ldrh	r3, [r3, #12]
 80003ba:	2201      	movs	r2, #1
 80003bc:	4619      	mov	r1, r3
 80003be:	f001 fabf 	bl	8001940 <HAL_GPIO_WritePin>
	return;
 80003c2:	bf00      	nop
}
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <_ZN5W550017setUDPmodeSocket0Ev>:

void W5500::setUDPmodeSocket0()
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b084      	sub	sp, #16
 80003ce:	af02      	add	r7, sp, #8
 80003d0:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2200      	movs	r2, #0
 80003d6:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_MR;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2200      	movs	r2, #0
 80003dc:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001100;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	220c      	movs	r2, #12
 80003e2:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0b00000010; // UDP mode
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2202      	movs	r2, #2
 80003e8:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6858      	ldr	r0, [r3, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	899b      	ldrh	r3, [r3, #12]
 80003f2:	2200      	movs	r2, #0
 80003f4:	4619      	mov	r1, r3
 80003f6:	f001 faa3 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6818      	ldr	r0, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f103 0110 	add.w	r1, r3, #16
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800040a:	2364      	movs	r3, #100	; 0x64
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2304      	movs	r3, #4
 8000410:	f001 ff66 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6858      	ldr	r0, [r3, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	899b      	ldrh	r3, [r3, #12]
 800041c:	2201      	movs	r2, #1
 800041e:	4619      	mov	r1, r3
 8000420:	f001 fa8e 	bl	8001940 <HAL_GPIO_WritePin>
	return;
 8000424:	bf00      	nop
}
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <_ZN5W550011openSocket0Ev>:

void W5500::openSocket0()
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af02      	add	r7, sp, #8
 8000432:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2200      	movs	r2, #0
 8000438:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_CR;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2201      	movs	r2, #1
 800043e:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001100;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	220c      	movs	r2, #12
 8000444:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0b00000001; // open
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2201      	movs	r2, #1
 800044a:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	6858      	ldr	r0, [r3, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	899b      	ldrh	r3, [r3, #12]
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	f001 fa72 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 100);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6818      	ldr	r0, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f103 0110 	add.w	r1, r3, #16
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800046c:	2364      	movs	r3, #100	; 0x64
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2304      	movs	r3, #4
 8000472:	f001 ff35 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6858      	ldr	r0, [r3, #4]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	899b      	ldrh	r3, [r3, #12]
 800047e:	2201      	movs	r2, #1
 8000480:	4619      	mov	r1, r3
 8000482:	f001 fa5d 	bl	8001940 <HAL_GPIO_WritePin>
	return;
 8000486:	bf00      	nop
}
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <_ZN5W55006readIREv>:
	return misoBytes_w[3];
}

// читаем флаги прерываний, общих для чипа
uint8_t W5500::readIR()
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b084      	sub	sp, #16
 8000492:	af02      	add	r7, sp, #8
 8000494:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2200      	movs	r2, #0
 800049a:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_IR;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2215      	movs	r2, #21
 80004a0:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2200      	movs	r2, #0
 80004a6:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6858      	ldr	r0, [r3, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	899b      	ldrh	r3, [r3, #12]
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	f001 fa44 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f103 0110 	add.w	r1, r3, #16
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80004c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2304      	movs	r3, #4
 80004d0:	f001 ff06 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6858      	ldr	r0, [r3, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	899b      	ldrh	r3, [r3, #12]
 80004dc:	2201      	movs	r2, #1
 80004de:	4619      	mov	r1, r3
 80004e0:	f001 fa2e 	bl	8001940 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <_ZN5W55007clearIREv>:

// сбрасываем флаги прерываний, общих для чипа
void W5500::clearIR()
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b084      	sub	sp, #16
 80004f6:	af02      	add	r7, sp, #8
 80004f8:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_SIR;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2217      	movs	r2, #23
 8000504:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2204      	movs	r2, #4
 800050a:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0xFF;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	22ff      	movs	r2, #255	; 0xff
 8000510:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6858      	ldr	r0, [r3, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	899b      	ldrh	r3, [r3, #12]
 800051a:	2200      	movs	r2, #0
 800051c:	4619      	mov	r1, r3
 800051e:	f001 fa0f 	bl	8001940 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 1000);
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f103 0110 	add.w	r1, r3, #16
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2304      	movs	r3, #4
 800053a:	f001 fed1 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6858      	ldr	r0, [r3, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	899b      	ldrh	r3, [r3, #12]
 8000546:	2201      	movs	r2, #1
 8000548:	4619      	mov	r1, r3
 800054a:	f001 f9f9 	bl	8001940 <HAL_GPIO_WritePin>
	return;
 800054e:	bf00      	nop
}
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_ZN5W55007readSIREv>:

// читаем флаги прерываний от сокетов
uint8_t W5500::readSIR()
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b084      	sub	sp, #16
 800055a:	af02      	add	r7, sp, #8
 800055c:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_SIR;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2217      	movs	r2, #23
 8000568:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6858      	ldr	r0, [r3, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	899b      	ldrh	r3, [r3, #12]
 8000578:	2200      	movs	r2, #0
 800057a:	4619      	mov	r1, r3
 800057c:	f001 f9e0 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f103 0110 	add.w	r1, r3, #16
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2304      	movs	r3, #4
 8000598:	f001 fea2 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6858      	ldr	r0, [r3, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	899b      	ldrh	r3, [r3, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	4619      	mov	r1, r3
 80005a8:	f001 f9ca 	bl	8001940 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_ZN5W55008clearSIREv>:

// сбрасываем флаги прерываний от сокетов
void W5500::clearSIR()
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af02      	add	r7, sp, #8
 80005c0:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_SIR;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2217      	movs	r2, #23
 80005cc:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00000100;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2204      	movs	r2, #4
 80005d2:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6858      	ldr	r0, [r3, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	899b      	ldrh	r3, [r3, #12]
 80005e2:	2200      	movs	r2, #0
 80005e4:	4619      	mov	r1, r3
 80005e6:	f001 f9ab 	bl	8001940 <HAL_GPIO_WritePin>
	//HAL_SPI_Transmit(hspi_w, mosiBytes_w, 4, 1000);
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f103 0110 	add.w	r1, r3, #16
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	f001 fe6d 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6858      	ldr	r0, [r3, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	899b      	ldrh	r3, [r3, #12]
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	f001 f995 	bl	8001940 <HAL_GPIO_WritePin>
	return;
 8000616:	bf00      	nop
}
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_ZN5W55009readSn_IREv>:

uint8_t W5500::readSn_IR()
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af02      	add	r7, sp, #8
 8000624:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_IR;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2202      	movs	r2, #2
 8000630:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001000;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2208      	movs	r2, #8
 8000636:	749a      	strb	r2, [r3, #18]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6858      	ldr	r0, [r3, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	899b      	ldrh	r3, [r3, #12]
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	f001 f97c 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f103 0110 	add.w	r1, r3, #16
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2304      	movs	r3, #4
 8000660:	f001 fe3e 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6858      	ldr	r0, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	899b      	ldrh	r3, [r3, #12]
 800066c:	2201      	movs	r2, #1
 800066e:	4619      	mov	r1, r3
 8000670:	f001 f966 	bl	8001940 <HAL_GPIO_WritePin>
	return misoBytes_w[3];
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <_ZN5W550010clearSn_IREv>:

void W5500::clearSn_IR()
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b084      	sub	sp, #16
 8000686:	af02      	add	r7, sp, #8
 8000688:	6078      	str	r0, [r7, #4]
	mosiBytes_w[0] = 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	741a      	strb	r2, [r3, #16]
	mosiBytes_w[1] = W5500_Sn_IR;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2202      	movs	r2, #2
 8000694:	745a      	strb	r2, [r3, #17]
	mosiBytes_w[2] = 0b00001100;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	220c      	movs	r2, #12
 800069a:	749a      	strb	r2, [r3, #18]
	mosiBytes_w[3] = 0xFF;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	22ff      	movs	r2, #255	; 0xff
 80006a0:	74da      	strb	r2, [r3, #19]
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_RESET);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6858      	ldr	r0, [r3, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	899b      	ldrh	r3, [r3, #12]
 80006aa:	2200      	movs	r2, #0
 80006ac:	4619      	mov	r1, r3
 80006ae:	f001 f947 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi_w, mosiBytes_w, misoBytes_w, 4, 1000);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f103 0110 	add.w	r1, r3, #16
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2304      	movs	r3, #4
 80006ca:	f001 fe09 	bl	80022e0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(W5500_CS_GPIO_Port_w, W5500_CS_Pin_w, GPIO_PIN_SET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6858      	ldr	r0, [r3, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	899b      	ldrh	r3, [r3, #12]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	f001 f931 	bl	8001940 <HAL_GPIO_WritePin>
	return;
 80006de:	bf00      	nop
}
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fd5f 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f855 	bl	80007a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f9c5 	bl	8000a84 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80006fa:	f000 f8a1 	bl	8000840 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80006fe:	f000 f993 	bl	8000a28 <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 8000702:	f000 f935 	bl	8000970 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8000706:	f000 f8d7 	bl	80008b8 <_ZL12MX_TIM3_Initv>



  // Включаем чип W5500

  port1.reset();
 800070a:	481f      	ldr	r0, [pc, #124]	; (8000788 <main+0xa0>)
 800070c:	f7ff fd51 	bl	80001b2 <_ZN5W55005resetEv>
  port1.writeCRB(&crb.mr);
 8000710:	491e      	ldr	r1, [pc, #120]	; (800078c <main+0xa4>)
 8000712:	481d      	ldr	r0, [pc, #116]	; (8000788 <main+0xa0>)
 8000714:	f7ff fdbe 	bl	8000294 <_ZN5W55008writeCRBEPh>
  port1.initSocket0();
 8000718:	481b      	ldr	r0, [pc, #108]	; (8000788 <main+0xa0>)
 800071a:	f7ff fdfd 	bl	8000318 <_ZN5W550011initSocket0Ev>
  port1.setUDPmodeSocket0();
 800071e:	481a      	ldr	r0, [pc, #104]	; (8000788 <main+0xa0>)
 8000720:	f7ff fe53 	bl	80003ca <_ZN5W550017setUDPmodeSocket0Ev>
  HAL_Delay(10);
 8000724:	200a      	movs	r0, #10
 8000726:	f000 fda5 	bl	8001274 <HAL_Delay>
  port1.openSocket0();
 800072a:	4817      	ldr	r0, [pc, #92]	; (8000788 <main+0xa0>)
 800072c:	f7ff fe7e 	bl	800042c <_ZN5W550011openSocket0Ev>
  HAL_Delay(10);
 8000730:	200a      	movs	r0, #10
 8000732:	f000 fd9f 	bl	8001274 <HAL_Delay>




  // Разрешаем прием по UART
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	4915      	ldr	r1, [pc, #84]	; (8000790 <main+0xa8>)
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <main+0xac>)
 800073c:	f002 fdcd 	bl	80032da <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (rxDataIsReadyToParse)
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0xb0>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d019      	beq.n	800077c <main+0x94>
	  {
		  if(rxBytesToParse[0] == 'A' && rxBytesToParse[1] == 'T')
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <main+0xb4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b41      	cmp	r3, #65	; 0x41
 800074e:	d112      	bne.n	8000776 <main+0x8e>
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0xb4>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b54      	cmp	r3, #84	; 0x54
 8000756:	d10e      	bne.n	8000776 <main+0x8e>
		  {
			  switch(rxBytesToParse[2])
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <main+0xb4>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	2b30      	cmp	r3, #48	; 0x30
 800075e:	d002      	beq.n	8000766 <main+0x7e>
 8000760:	2b31      	cmp	r3, #49	; 0x31
 8000762:	d004      	beq.n	800076e <main+0x86>
				  break;
			  case '1':
				  port1.switchOn();
				  break;
			  default:
				  break;
 8000764:	e007      	b.n	8000776 <main+0x8e>
				  port1.writeSHA();
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <main+0xa0>)
 8000768:	f7ff fd54 	bl	8000214 <_ZN5W55008writeSHAEv>
				  break;
 800076c:	e003      	b.n	8000776 <main+0x8e>
				  port1.switchOn();
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <main+0xa0>)
 8000770:	f7ff fd3d 	bl	80001ee <_ZN5W55008switchOnEv>
				  break;
 8000774:	bf00      	nop
			  }


		  }
		  rxDataIsReadyToParse = false;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <main+0xb0>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000780:	f000 fd78 	bl	8001274 <HAL_Delay>
	  if (rxDataIsReadyToParse)
 8000784:	e7dc      	b.n	8000740 <main+0x58>
 8000786:	bf00      	nop
 8000788:	2000029c 	.word	0x2000029c
 800078c:	20000000 	.word	0x20000000
 8000790:	20000184 	.word	0x20000184
 8000794:	20000140 	.word	0x20000140
 8000798:	2000028d 	.word	0x2000028d
 800079c:	2000020c 	.word	0x2000020c

080007a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	; 0x40
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2228      	movs	r2, #40	; 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 f9be 	bl	8003b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80007de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0318 	add.w	r3, r7, #24
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 f8d9 	bl	80019a0 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80007fe:	f000 faf9 	bl	8000df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2101      	movs	r1, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fb41 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	bf14      	ite	ne
 8000828:	2301      	movne	r3, #1
 800082a:	2300      	moveq	r3, #0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000832:	f000 fadf 	bl	8000df4 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3740      	adds	r7, #64	; 0x40
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 8000846:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <_ZL12MX_SPI1_Initv+0x74>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 8000874:	2208      	movs	r2, #8
 8000876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 800088c:	220a      	movs	r2, #10
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <_ZL12MX_SPI1_Initv+0x70>)
 8000892:	f001 fca1 	bl	80021d8 <HAL_SPI_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf14      	ite	ne
 800089c:	2301      	movne	r3, #1
 800089e:	2300      	moveq	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80008a6:	f000 faa5 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000058 	.word	0x20000058
 80008b4:	40013000 	.word	0x40013000

080008b8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 80008d6:	4a25      	ldr	r2, [pc, #148]	; (800096c <_ZL12MX_TIM3_Initv+0xb4>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 80008dc:	220b      	movs	r2, #11
 80008de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 80008e8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80008ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fa:	481b      	ldr	r0, [pc, #108]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 80008fc:	f002 f83c 	bl	8002978 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8000910:	f000 fa70 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4619      	mov	r1, r3
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 8000922:	f002 f9f9 	bl	8002d18 <HAL_TIM_ConfigClockSource>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	bf14      	ite	ne
 800092c:	2301      	movne	r3, #1
 800092e:	2300      	moveq	r3, #0
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8000936:	f000 fa5d 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <_ZL12MX_TIM3_Initv+0xb0>)
 8000948:	f002 fbc6 	bl	80030d8 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf14      	ite	ne
 8000952:	2301      	movne	r3, #1
 8000954:	2300      	moveq	r3, #0
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 800095c:	f000 fa4a 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000b0 	.word	0x200000b0
 800096c:	40000400 	.word	0x40000400

08000970 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 800098e:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <_ZL12MX_TIM4_Initv+0xb4>)
 8000990:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 8000994:	2203      	movs	r2, #3
 8000996:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 80009a0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80009a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 80009b4:	f001 ffe0 	bl	8002978 <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf14      	ite	ne
 80009be:	2301      	movne	r3, #1
 80009c0:	2300      	moveq	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 80009c8:	f000 fa14 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4619      	mov	r1, r3
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 80009da:	f002 f99d 	bl	8002d18 <HAL_TIM_ConfigClockSource>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 80009ee:	f000 fa01 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <_ZL12MX_TIM4_Initv+0xb0>)
 8000a00:	f002 fb6a 	bl	80030d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2301      	movne	r3, #1
 8000a0c:	2300      	moveq	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8000a14:	f000 f9ee 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000f8 	.word	0x200000f8
 8000a24:	40000800 	.word	0x40000800

08000a28 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a2e:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a60:	f002 fbaa 	bl	80031b8 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf14      	ite	ne
 8000a6a:	2301      	movne	r3, #1
 8000a6c:	2300      	moveq	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000a74:	f000 f9be 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000140 	.word	0x20000140
 8000a80:	40013800 	.word	0x40013800

08000a84 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a98:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a40      	ldr	r2, [pc, #256]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000a9e:	f043 0320 	orr.w	r3, r3, #32
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0320 	and.w	r3, r3, #32
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a3a      	ldr	r2, [pc, #232]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a34      	ldr	r2, [pc, #208]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a2e      	ldr	r2, [pc, #184]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <_ZL12MX_GPIO_Initv+0x11c>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2110      	movs	r1, #16
 8000afc:	4829      	ldr	r0, [pc, #164]	; (8000ba4 <_ZL12MX_GPIO_Initv+0x120>)
 8000afe:	f000 ff1f 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	4827      	ldr	r0, [pc, #156]	; (8000ba4 <_ZL12MX_GPIO_Initv+0x120>)
 8000b08:	f000 ff1a 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_TX_Pin|LED_RX_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b12:	4825      	ldr	r0, [pc, #148]	; (8000ba8 <_ZL12MX_GPIO_Initv+0x124>)
 8000b14:	f000 ff14 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_INT_Pin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <_ZL12MX_GPIO_Initv+0x128>)
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4821      	ldr	r0, [pc, #132]	; (8000bb0 <_ZL12MX_GPIO_Initv+0x12c>)
 8000b2c:	f000 fd84 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : W5500_RST_Pin W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin|W5500_CS_Pin;
 8000b30:	2330      	movs	r3, #48	; 0x30
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4619      	mov	r1, r3
 8000b46:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <_ZL12MX_GPIO_Initv+0x120>)
 8000b48:	f000 fd76 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8000b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b52:	2311      	movs	r3, #17
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4619      	mov	r1, r3
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <_ZL12MX_GPIO_Initv+0x124>)
 8000b66:	f000 fd67 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RX_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin;
 8000b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RX_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <_ZL12MX_GPIO_Initv+0x124>)
 8000b84:	f000 fd58 	bl	8001638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f000 fc6c 	bl	800146a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b92:	200a      	movs	r0, #10
 8000b94:	f000 fc85 	bl	80014a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_UART_RxCpltCallback+0x5c>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d121      	bne.n	8000c08 <HAL_UART_RxCpltCallback+0x54>
  {
	  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <HAL_UART_RxCpltCallback+0x60>)
 8000bcc:	f000 feb8 	bl	8001940 <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Start_IT(&htim4);
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <HAL_UART_RxCpltCallback+0x64>)
 8000bd2:	f001 ff47 	bl	8002a64 <HAL_TIM_Base_Start_IT>
	  //HAL_TIM_Base_Stop(&htim3);
	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_RxCpltCallback+0x68>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Start_IT(&htim3);
 8000bde:	480f      	ldr	r0, [pc, #60]	; (8000c1c <HAL_UART_RxCpltCallback+0x68>)
 8000be0:	f001 ff40 	bl	8002a64 <HAL_TIM_Base_Start_IT>
	  rxBytes[rxCounter] = rxByte;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_UART_RxCpltCallback+0x6c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_UART_RxCpltCallback+0x70>)
 8000bec:	7819      	ldrb	r1, [r3, #0]
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_UART_RxCpltCallback+0x74>)
 8000bf0:	5499      	strb	r1, [r3, r2]
	  //buf1.put(rxByte);
	  rxCounter++;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_UART_RxCpltCallback+0x6c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_UART_RxCpltCallback+0x6c>)
 8000bfc:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4908      	ldr	r1, [pc, #32]	; (8000c24 <HAL_UART_RxCpltCallback+0x70>)
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <HAL_UART_RxCpltCallback+0x5c>)
 8000c04:	f002 fb69 	bl	80032da <HAL_UART_Receive_IT>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000140 	.word	0x20000140
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	200000f8 	.word	0x200000f8
 8000c1c:	200000b0 	.word	0x200000b0
 8000c20:	20000208 	.word	0x20000208
 8000c24:	20000184 	.word	0x20000184
 8000c28:	20000188 	.word	0x20000188

08000c2c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_UART_TxCpltCallback+0x24>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d105      	bne.n	8000c48 <HAL_UART_TxCpltCallback+0x1c>
  {
	  // гаcим cветодиод "TX"
	  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <HAL_UART_TxCpltCallback+0x28>)
 8000c44:	f000 fe7c 	bl	8001940 <HAL_GPIO_WritePin>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000140 	.word	0x20000140
 8000c54:	40010c00 	.word	0x40010c00

08000c58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from TIM4
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d121      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		HAL_TIM_Base_Stop(&htim3);
 8000c6a:	481b      	ldr	r0, [pc, #108]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c6c:	f001 fed3 	bl	8002a16 <HAL_TIM_Base_Stop>
		//HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
		//HAL_UART_Transmit_IT(&huart1, rxBytes, rxCounter);
		for (int i = 0; i < rxCounter; ++i)
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	da0c      	bge.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			rxBytesToParse[i] = rxBytes[i];
 8000c80:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	7819      	ldrb	r1, [r3, #0]
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	460a      	mov	r2, r1
 8000c90:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < rxCounter; ++i)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3301      	adds	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e7ec      	b.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x1c>
		}
		rxCounterToParse = rxCounter;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ca0:	701a      	strb	r2, [r3, #0]
		rxDataIsReadyToParse = true;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
		rxCounter = 0;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]

		//HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
	}
	if(htim->Instance == TIM4) //check if the interrupt comes from TIM4
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d108      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		HAL_TIM_Base_Stop(&htim4);
 8000cb8:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cba:	f001 feac 	bl	8002a16 <HAL_TIM_Base_Stop>
		HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cc6:	f000 fe3b 	bl	8001940 <HAL_GPIO_WritePin>
	}
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	200000b0 	.word	0x200000b0
 8000cdc:	20000208 	.word	0x20000208
 8000ce0:	20000188 	.word	0x20000188
 8000ce4:	2000020c 	.word	0x2000020c
 8000ce8:	2000028c 	.word	0x2000028c
 8000cec:	2000028d 	.word	0x2000028d
 8000cf0:	40000800 	.word	0x40000800
 8000cf4:	200000f8 	.word	0x200000f8
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == W5500_INT_Pin)
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	2b10      	cmp	r3, #16
 8000d0a:	d167      	bne.n	8000ddc <HAL_GPIO_EXTI_Callback+0xe0>
		//if(statusSIR)
		//{

		//}

		regTXRX[0] = port1.readIR();
 8000d0c:	4835      	ldr	r0, [pc, #212]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d0e:	f7ff fbbe 	bl	800048e <_ZN5W55006readIREv>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d18:	701a      	strb	r2, [r3, #0]
		regTXRX[1] = port1.readSIR();
 8000d1a:	4832      	ldr	r0, [pc, #200]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d1c:	f7ff fc1b 	bl	8000556 <_ZN5W55007readSIREv>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d26:	705a      	strb	r2, [r3, #1]
		regTXRX[2] = port1.readSn_IR();
 8000d28:	482e      	ldr	r0, [pc, #184]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d2a:	f7ff fc78 	bl	800061e <_ZN5W55009readSn_IREv>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d34:	709a      	strb	r2, [r3, #2]
		port1.clearIR();
 8000d36:	482b      	ldr	r0, [pc, #172]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d38:	f7ff fbdb 	bl	80004f2 <_ZN5W55007clearIREv>
		regTXRX[3] = port1.readIR();
 8000d3c:	4829      	ldr	r0, [pc, #164]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d3e:	f7ff fba6 	bl	800048e <_ZN5W55006readIREv>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d48:	70da      	strb	r2, [r3, #3]
		regTXRX[4] = port1.readSIR();
 8000d4a:	4826      	ldr	r0, [pc, #152]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d4c:	f7ff fc03 	bl	8000556 <_ZN5W55007readSIREv>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d56:	711a      	strb	r2, [r3, #4]
		regTXRX[5] = port1.readSn_IR();
 8000d58:	4822      	ldr	r0, [pc, #136]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d5a:	f7ff fc60 	bl	800061e <_ZN5W55009readSn_IREv>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d64:	715a      	strb	r2, [r3, #5]
		port1.clearSIR();
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d68:	f7ff fc27 	bl	80005ba <_ZN5W55008clearSIREv>
		regTXRX[6] = port1.readIR();
 8000d6c:	481d      	ldr	r0, [pc, #116]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d6e:	f7ff fb8e 	bl	800048e <_ZN5W55006readIREv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d78:	719a      	strb	r2, [r3, #6]
		regTXRX[7] = port1.readSIR();
 8000d7a:	481a      	ldr	r0, [pc, #104]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d7c:	f7ff fbeb 	bl	8000556 <_ZN5W55007readSIREv>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d86:	71da      	strb	r2, [r3, #7]
		regTXRX[8] = port1.readSn_IR();
 8000d88:	4816      	ldr	r0, [pc, #88]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d8a:	f7ff fc48 	bl	800061e <_ZN5W55009readSn_IREv>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d94:	721a      	strb	r2, [r3, #8]
		port1.clearSn_IR();
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d98:	f7ff fc73 	bl	8000682 <_ZN5W550010clearSn_IREv>
		regTXRX[9] = port1.readIR();
 8000d9c:	4811      	ldr	r0, [pc, #68]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d9e:	f7ff fb76 	bl	800048e <_ZN5W55006readIREv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000da8:	725a      	strb	r2, [r3, #9]
		regTXRX[10] = port1.readSIR();
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000dac:	f7ff fbd3 	bl	8000556 <_ZN5W55007readSIREv>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000db6:	729a      	strb	r2, [r3, #10]
		regTXRX[11] = port1.readSn_IR();
 8000db8:	480a      	ldr	r0, [pc, #40]	; (8000de4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000dba:	f7ff fc30 	bl	800061e <_ZN5W55009readSn_IREv>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000dc4:	72da      	strb	r2, [r3, #11]
		HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <HAL_GPIO_EXTI_Callback+0xf0>)
 8000dce:	f000 fdb7 	bl	8001940 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_IT(&huart1, regTXRX, 12);
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	4904      	ldr	r1, [pc, #16]	; (8000de8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000dd8:	f002 fa3b 	bl	8003252 <HAL_UART_Transmit_IT>
		//if(irq4[4]) port1.clearSIR();

		//port1.readSocketTXRX(regTXRX);

	}
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000029c 	.word	0x2000029c
 8000de8:	20000290 	.word	0x20000290
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	20000140 	.word	0x20000140

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d10e      	bne.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d109      	bne.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x2e>
W5500 port1(&hspi1, W5500_CS_GPIO_Port, W5500_CS_Pin, W5500_RST_GPIO_Port, W5500_RST_Pin);
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2320      	movs	r3, #32
 8000e24:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000e26:	490a      	ldr	r1, [pc, #40]	; (8000e50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000e2a:	f7ff f98f 	bl	800014c <_ZN5W5500C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_t>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d107      	bne.n	8000e44 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d102      	bne.n	8000e44 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000e40:	f7ff f9ad 	bl	800019e <_ZN5W5500D1Ev>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40011000 	.word	0x40011000
 8000e50:	20000058 	.word	0x20000058
 8000e54:	2000029c 	.word	0x2000029c

08000e58 <_GLOBAL__sub_I_hspi1>:
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff ffcd 	bl	8000e00 <_Z41__static_initialization_and_destruction_0ii>
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_GLOBAL__sub_D_hspi1>:
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff ffc5 	bl	8000e00 <_Z41__static_initialization_and_destruction_0ii>
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_MspInit+0x60>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_MspInit+0x60>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000

08000edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <HAL_SPI_MspInit+0x98>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d137      	bne.n	8000f6c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_SPI_MspInit+0x9c>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_SPI_MspInit+0x9c>)
 8000f02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_SPI_MspInit+0x9c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_SPI_MspInit+0x9c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_SPI_MspInit+0x9c>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_SPI_MspInit+0x9c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f2c:	23a0      	movs	r3, #160	; 0xa0
 8000f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480f      	ldr	r0, [pc, #60]	; (8000f7c <HAL_SPI_MspInit+0xa0>)
 8000f40:	f000 fb7a 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f44:	2340      	movs	r3, #64	; 0x40
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_SPI_MspInit+0xa0>)
 8000f58:	f000 fb6e 	bl	8001638 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2023      	movs	r0, #35	; 0x23
 8000f62:	f000 fa82 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f66:	2023      	movs	r0, #35	; 0x23
 8000f68:	f000 fa9b 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800

08000f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <HAL_TIM_Base_MspInit+0x78>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d114      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_TIM_Base_MspInit+0x7c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_TIM_Base_MspInit+0x7c>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_TIM_Base_MspInit+0x7c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	201d      	movs	r0, #29
 8000fb0:	f000 fa5b 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fb4:	201d      	movs	r0, #29
 8000fb6:	f000 fa74 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fba:	e018      	b.n	8000fee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <HAL_TIM_Base_MspInit+0x80>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d113      	bne.n	8000fee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_TIM_Base_MspInit+0x7c>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_TIM_Base_MspInit+0x7c>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_TIM_Base_MspInit+0x7c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	201e      	movs	r0, #30
 8000fe4:	f000 fa41 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fe8:	201e      	movs	r0, #30
 8000fea:	f000 fa5a 	bl	80014a2 <HAL_NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40000400 	.word	0x40000400
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40000800 	.word	0x40000800

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <HAL_UART_MspInit+0x9c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d139      	bne.n	8001098 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <HAL_UART_MspInit+0xa0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <HAL_UART_MspInit+0xa0>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_UART_MspInit+0xa0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_UART_MspInit+0xa0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_UART_MspInit+0xa0>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_UART_MspInit+0xa0>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4619      	mov	r1, r3
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <HAL_UART_MspInit+0xa4>)
 800106a:	f000 fae5 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_UART_MspInit+0xa4>)
 8001084:	f000 fad8 	bl	8001638 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2025      	movs	r0, #37	; 0x25
 800108e:	f000 f9ec 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001092:	2025      	movs	r0, #37	; 0x25
 8001094:	f000 fa05 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010800 	.word	0x40010800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f8a3 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}

080010fa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 80010fe:	2010      	movs	r0, #16
 8001100:	f000 fc36 	bl	8001970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <TIM3_IRQHandler+0x10>)
 800110e:	f001 fcfb 	bl	8002b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b0 	.word	0x200000b0

0800111c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <TIM4_IRQHandler+0x10>)
 8001122:	f001 fcf1 	bl	8002b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000f8 	.word	0x200000f8

08001130 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <SPI1_IRQHandler+0x10>)
 8001136:	f001 fa75 	bl	8002624 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000058 	.word	0x20000058

08001144 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <USART1_IRQHandler+0x10>)
 800114a:	f002 f8f7 	bl	800333c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000140 	.word	0x20000140

08001158 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	; (800119c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	; (80011a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800118a:	f7ff ffe5 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118e:	f002 fcab 	bl	8003ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001192:	f7ff faa9 	bl	80006e8 <main>
  bx lr
 8001196:	4770      	bx	lr
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80011a0:	08003b90 	.word	0x08003b90
  ldr r2, =_sbss
 80011a4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80011a8:	20000330 	.word	0x20000330

080011ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC1_2_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_Init+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_Init+0x28>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f947 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fe54 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f95f 	bl	80014be <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f927 	bl	800146a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000030 	.word	0x20000030
 8001234:	20000038 	.word	0x20000038
 8001238:	20000034 	.word	0x20000034

0800123c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x1c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x20>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a03      	ldr	r2, [pc, #12]	; (800125c <HAL_IncTick+0x20>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000038 	.word	0x20000038
 800125c:	2000032c 	.word	0x2000032c

08001260 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <HAL_GetTick+0x10>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	2000032c 	.word	0x2000032c

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff fff0 	bl	8001260 <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffe0 	bl	8001260 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000038 	.word	0x20000038

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4906      	ldr	r1, [pc, #24]	; (8001354 <__NVIC_EnableIRQ+0x34>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	; (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff90 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff2d 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff42 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff90 	bl	80013ac <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5f 	bl	8001358 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff35 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa2 	bl	8001410 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d008      	beq.n	80014fe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2204      	movs	r2, #4
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e020      	b.n	8001540 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 020e 	bic.w	r2, r2, #14
 800150c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
	...

0800154c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800155e:	2b02      	cmp	r3, #2
 8001560:	d005      	beq.n	800156e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2204      	movs	r2, #4
 8001566:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e051      	b.n	8001612 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 020e 	bic.w	r2, r2, #14
 800157c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0201 	bic.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a22      	ldr	r2, [pc, #136]	; (800161c <HAL_DMA_Abort_IT+0xd0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d029      	beq.n	80015ec <HAL_DMA_Abort_IT+0xa0>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a20      	ldr	r2, [pc, #128]	; (8001620 <HAL_DMA_Abort_IT+0xd4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d022      	beq.n	80015e8 <HAL_DMA_Abort_IT+0x9c>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_DMA_Abort_IT+0xd8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d01a      	beq.n	80015e2 <HAL_DMA_Abort_IT+0x96>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_DMA_Abort_IT+0xdc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d012      	beq.n	80015dc <HAL_DMA_Abort_IT+0x90>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1c      	ldr	r2, [pc, #112]	; (800162c <HAL_DMA_Abort_IT+0xe0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00a      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x8a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1a      	ldr	r2, [pc, #104]	; (8001630 <HAL_DMA_Abort_IT+0xe4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d102      	bne.n	80015d0 <HAL_DMA_Abort_IT+0x84>
 80015ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015ce:	e00e      	b.n	80015ee <HAL_DMA_Abort_IT+0xa2>
 80015d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d4:	e00b      	b.n	80015ee <HAL_DMA_Abort_IT+0xa2>
 80015d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015da:	e008      	b.n	80015ee <HAL_DMA_Abort_IT+0xa2>
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	e005      	b.n	80015ee <HAL_DMA_Abort_IT+0xa2>
 80015e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e6:	e002      	b.n	80015ee <HAL_DMA_Abort_IT+0xa2>
 80015e8:	2310      	movs	r3, #16
 80015ea:	e000      	b.n	80015ee <HAL_DMA_Abort_IT+0xa2>
 80015ec:	2301      	movs	r3, #1
 80015ee:	4a11      	ldr	r2, [pc, #68]	; (8001634 <HAL_DMA_Abort_IT+0xe8>)
 80015f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
    } 
  }
  return status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40020008 	.word	0x40020008
 8001620:	4002001c 	.word	0x4002001c
 8001624:	40020030 	.word	0x40020030
 8001628:	40020044 	.word	0x40020044
 800162c:	40020058 	.word	0x40020058
 8001630:	4002006c 	.word	0x4002006c
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b08b      	sub	sp, #44	; 0x2c
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	e169      	b.n	8001920 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800164c:	2201      	movs	r2, #1
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	429a      	cmp	r2, r3
 8001666:	f040 8158 	bne.w	800191a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a9a      	ldr	r2, [pc, #616]	; (80018d8 <HAL_GPIO_Init+0x2a0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d05e      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 8001674:	4a98      	ldr	r2, [pc, #608]	; (80018d8 <HAL_GPIO_Init+0x2a0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d875      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 800167a:	4a98      	ldr	r2, [pc, #608]	; (80018dc <HAL_GPIO_Init+0x2a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d058      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 8001680:	4a96      	ldr	r2, [pc, #600]	; (80018dc <HAL_GPIO_Init+0x2a4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d86f      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 8001686:	4a96      	ldr	r2, [pc, #600]	; (80018e0 <HAL_GPIO_Init+0x2a8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d052      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 800168c:	4a94      	ldr	r2, [pc, #592]	; (80018e0 <HAL_GPIO_Init+0x2a8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d869      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 8001692:	4a94      	ldr	r2, [pc, #592]	; (80018e4 <HAL_GPIO_Init+0x2ac>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d04c      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 8001698:	4a92      	ldr	r2, [pc, #584]	; (80018e4 <HAL_GPIO_Init+0x2ac>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d863      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 800169e:	4a92      	ldr	r2, [pc, #584]	; (80018e8 <HAL_GPIO_Init+0x2b0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d046      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 80016a4:	4a90      	ldr	r2, [pc, #576]	; (80018e8 <HAL_GPIO_Init+0x2b0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d85d      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 80016aa:	2b12      	cmp	r3, #18
 80016ac:	d82a      	bhi.n	8001704 <HAL_GPIO_Init+0xcc>
 80016ae:	2b12      	cmp	r3, #18
 80016b0:	d859      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <HAL_GPIO_Init+0x80>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	08001733 	.word	0x08001733
 80016bc:	0800170d 	.word	0x0800170d
 80016c0:	0800171f 	.word	0x0800171f
 80016c4:	08001761 	.word	0x08001761
 80016c8:	08001767 	.word	0x08001767
 80016cc:	08001767 	.word	0x08001767
 80016d0:	08001767 	.word	0x08001767
 80016d4:	08001767 	.word	0x08001767
 80016d8:	08001767 	.word	0x08001767
 80016dc:	08001767 	.word	0x08001767
 80016e0:	08001767 	.word	0x08001767
 80016e4:	08001767 	.word	0x08001767
 80016e8:	08001767 	.word	0x08001767
 80016ec:	08001767 	.word	0x08001767
 80016f0:	08001767 	.word	0x08001767
 80016f4:	08001767 	.word	0x08001767
 80016f8:	08001767 	.word	0x08001767
 80016fc:	08001715 	.word	0x08001715
 8001700:	08001729 	.word	0x08001729
 8001704:	4a79      	ldr	r2, [pc, #484]	; (80018ec <HAL_GPIO_Init+0x2b4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800170a:	e02c      	b.n	8001766 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	623b      	str	r3, [r7, #32]
          break;
 8001712:	e029      	b.n	8001768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	3304      	adds	r3, #4
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e024      	b.n	8001768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	3308      	adds	r3, #8
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e01f      	b.n	8001768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	330c      	adds	r3, #12
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e01a      	b.n	8001768 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800173a:	2304      	movs	r3, #4
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e013      	b.n	8001768 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	611a      	str	r2, [r3, #16]
          break;
 8001752:	e009      	b.n	8001768 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001754:	2308      	movs	r3, #8
 8001756:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	615a      	str	r2, [r3, #20]
          break;
 800175e:	e003      	b.n	8001768 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x130>
          break;
 8001766:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	d801      	bhi.n	8001772 <HAL_GPIO_Init+0x13a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	e001      	b.n	8001776 <HAL_GPIO_Init+0x13e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3304      	adds	r3, #4
 8001776:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d802      	bhi.n	8001784 <HAL_GPIO_Init+0x14c>
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	e002      	b.n	800178a <HAL_GPIO_Init+0x152>
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	3b08      	subs	r3, #8
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	210f      	movs	r1, #15
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	401a      	ands	r2, r3
 800179c:	6a39      	ldr	r1, [r7, #32]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	431a      	orrs	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80b1 	beq.w	800191a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017b8:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_GPIO_Init+0x2b8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <HAL_GPIO_Init+0x2b8>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <HAL_GPIO_Init+0x2b8>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d0:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_GPIO_Init+0x2bc>)
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a40      	ldr	r2, [pc, #256]	; (80018f8 <HAL_GPIO_Init+0x2c0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_GPIO_Init+0x1ec>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3f      	ldr	r2, [pc, #252]	; (80018fc <HAL_GPIO_Init+0x2c4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00d      	beq.n	8001820 <HAL_GPIO_Init+0x1e8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3e      	ldr	r2, [pc, #248]	; (8001900 <HAL_GPIO_Init+0x2c8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x1e4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3d      	ldr	r2, [pc, #244]	; (8001904 <HAL_GPIO_Init+0x2cc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_GPIO_Init+0x1e0>
 8001814:	2303      	movs	r3, #3
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x1ee>
 8001818:	2304      	movs	r3, #4
 800181a:	e004      	b.n	8001826 <HAL_GPIO_Init+0x1ee>
 800181c:	2302      	movs	r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x1ee>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_GPIO_Init+0x1ee>
 8001824:	2300      	movs	r3, #0
 8001826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001828:	f002 0203 	and.w	r2, r2, #3
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	4093      	lsls	r3, r2
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001836:	492f      	ldr	r1, [pc, #188]	; (80018f4 <HAL_GPIO_Init+0x2bc>)
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	492c      	ldr	r1, [pc, #176]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	43db      	mvns	r3, r3
 8001866:	4928      	ldr	r1, [pc, #160]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001868:	4013      	ands	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4922      	ldr	r1, [pc, #136]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	491e      	ldr	r1, [pc, #120]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001890:	4013      	ands	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	4918      	ldr	r1, [pc, #96]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4914      	ldr	r1, [pc, #80]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d021      	beq.n	800190c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
 80018d4:	e021      	b.n	800191a <HAL_GPIO_Init+0x2e2>
 80018d6:	bf00      	nop
 80018d8:	10320000 	.word	0x10320000
 80018dc:	10310000 	.word	0x10310000
 80018e0:	10220000 	.word	0x10220000
 80018e4:	10210000 	.word	0x10210000
 80018e8:	10120000 	.word	0x10120000
 80018ec:	10110000 	.word	0x10110000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	40010800 	.word	0x40010800
 80018fc:	40010c00 	.word	0x40010c00
 8001900:	40011000 	.word	0x40011000
 8001904:	40011400 	.word	0x40011400
 8001908:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_GPIO_Init+0x304>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	4909      	ldr	r1, [pc, #36]	; (800193c <HAL_GPIO_Init+0x304>)
 8001916:	4013      	ands	r3, r2
 8001918:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	f47f ae8e 	bne.w	800164c <HAL_GPIO_Init+0x14>
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	372c      	adds	r7, #44	; 0x2c
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9b4 	bl	8000cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e272      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8087 	beq.w	8001ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c0:	4b92      	ldr	r3, [pc, #584]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d00c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019cc:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d112      	bne.n	80019fe <HAL_RCC_OscConfig+0x5e>
 80019d8:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d10b      	bne.n	80019fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d06c      	beq.n	8001acc <HAL_RCC_OscConfig+0x12c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d168      	bne.n	8001acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e24c      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x76>
 8001a08:	4b80      	ldr	r3, [pc, #512]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a7f      	ldr	r2, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e02e      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x98>
 8001a1e:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7a      	ldr	r2, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b78      	ldr	r3, [pc, #480]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a77      	ldr	r2, [pc, #476]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0xbc>
 8001a42:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a71      	ldr	r2, [pc, #452]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6e      	ldr	r2, [pc, #440]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a5c:	4b6b      	ldr	r3, [pc, #428]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6a      	ldr	r2, [pc, #424]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a67      	ldr	r2, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fbf0 	bl	8001260 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff fbec 	bl	8001260 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e200      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b5d      	ldr	r3, [pc, #372]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xe4>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fbdc 	bl	8001260 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fbd8 	bl	8001260 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1ec      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x10c>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ae6:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x18c>
 8001af2:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x176>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1c0      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4939      	ldr	r1, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fb91 	bl	8001260 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fb8d 	bl	8001260 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1a1      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4927      	ldr	r1, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb70 	bl	8001260 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff fb6c 	bl	8001260 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e180      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03a      	beq.n	8001c24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d019      	beq.n	8001bea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fb50 	bl	8001260 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fb4c 	bl	8001260 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e160      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f000 fada 	bl	800219c <RCC_Delay>
 8001be8:	e01c      	b.n	8001c24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fb36 	bl	8001260 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf6:	e00f      	b.n	8001c18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fb32 	bl	8001260 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d908      	bls.n	8001c18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e146      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	42420000 	.word	0x42420000
 8001c14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b92      	ldr	r3, [pc, #584]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e9      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a6 	beq.w	8001d7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a87      	ldr	r2, [pc, #540]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	61d3      	str	r3, [r2, #28]
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b82      	ldr	r3, [pc, #520]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7ff faf3 	bl	8001260 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff faef 	bl	8001260 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e103      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x312>
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a6e      	ldr	r2, [pc, #440]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x334>
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a69      	ldr	r2, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	e01c      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x356>
 8001cdc:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a60      	ldr	r2, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a5d      	ldr	r2, [pc, #372]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a57      	ldr	r2, [pc, #348]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff faa3 	bl	8001260 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fa9f 	bl	8001260 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0b1      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RCC_OscConfig+0x37e>
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fa8d 	bl	8001260 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fa89 	bl	8001260 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e09b      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a3b      	ldr	r2, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8087 	beq.w	8001e96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d061      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d146      	bne.n	8001e2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fa5d 	bl	8001260 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff fa59 	bl	8001260 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e06d      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d108      	bne.n	8001de4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4921      	ldr	r1, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a19      	ldr	r1, [r3, #32]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	430b      	orrs	r3, r1
 8001df6:	491b      	ldr	r1, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fa2d 	bl	8001260 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fa29 	bl	8001260 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e03d      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46a>
 8001e28:	e035      	b.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa16 	bl	8001260 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fa12 	bl	8001260 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e026      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x498>
 8001e56:	e01e      	b.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e019      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x500>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0d0      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4965      	ldr	r1, [pc, #404]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b8      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d040      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e073      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4936      	ldr	r1, [pc, #216]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff f964 	bl	8001260 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7ff f960 	bl	8001260 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e053      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d210      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e032      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002032:	f000 f821 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002036:	4602      	mov	r2, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	490a      	ldr	r1, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	5ccb      	ldrb	r3, [r1, r3]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f8c2 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	08003b68 	.word	0x08003b68
 8002070:	20000030 	.word	0x20000030
 8002074:	20000034 	.word	0x20000034

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b490      	push	{r4, r7}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_RCC_GetSysClockFreq+0xac>)
 8002080:	1d3c      	adds	r4, r7, #4
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002088:	f240 2301 	movw	r3, #513	; 0x201
 800208c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x40>
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x46>
 80020b6:	e02b      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ba:	623b      	str	r3, [r7, #32]
      break;
 80020bc:	e02b      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3328      	adds	r3, #40	; 0x28
 80020c8:	443b      	add	r3, r7
 80020ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d012      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0c5b      	lsrs	r3, r3, #17
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	3328      	adds	r3, #40	; 0x28
 80020e6:	443b      	add	r3, r7
 80020e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f2:	fb03 f202 	mul.w	r2, r3, r2
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e004      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	623b      	str	r3, [r7, #32]
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002112:	623b      	str	r3, [r7, #32]
      break;
 8002114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002116:	6a3b      	ldr	r3, [r7, #32]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3728      	adds	r7, #40	; 0x28
 800211c:	46bd      	mov	sp, r7
 800211e:	bc90      	pop	{r4, r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	08003b58 	.word	0x08003b58
 8002128:	40021000 	.word	0x40021000
 800212c:	00b71b00 	.word	0x00b71b00
 8002130:	003d0900 	.word	0x003d0900
 8002134:	007a1200 	.word	0x007a1200

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_RCC_GetHCLKFreq+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000030 	.word	0x20000030

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002150:	f7ff fff2 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08003b78 	.word	0x08003b78

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002178:	f7ff ffde 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08003b78 	.word	0x08003b78

0800219c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <RCC_Delay+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <RCC_Delay+0x38>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a5b      	lsrs	r3, r3, #9
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b8:	bf00      	nop
  }
  while (Delay --);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <RCC_Delay+0x1c>
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000030 	.word	0x20000030
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e076      	b.n	80022d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d108      	bne.n	8002204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021fa:	d009      	beq.n	8002210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
 8002202:	e005      	b.n	8002210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fe56 	bl	8000edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002246:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	ea42 0103 	orr.w	r1, r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	0c1a      	lsrs	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f002 0204 	and.w	r2, r2, #4
 80022b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	; 0x30
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022ee:	2301      	movs	r3, #1
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x26>
 8002302:	2302      	movs	r3, #2
 8002304:	e18a      	b.n	800261c <HAL_SPI_TransmitReceive+0x33c>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800230e:	f7fe ffa7 	bl	8001260 <HAL_GetTick>
 8002312:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800231a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800232c:	2b01      	cmp	r3, #1
 800232e:	d00f      	beq.n	8002350 <HAL_SPI_TransmitReceive+0x70>
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002336:	d107      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d103      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x68>
 8002340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002344:	2b04      	cmp	r3, #4
 8002346:	d003      	beq.n	8002350 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002348:	2302      	movs	r3, #2
 800234a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800234e:	e15b      	b.n	8002608 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_SPI_TransmitReceive+0x82>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_SPI_TransmitReceive+0x82>
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002368:	e14e      	b.n	8002608 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b04      	cmp	r3, #4
 8002374:	d003      	beq.n	800237e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2205      	movs	r2, #5
 800237a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d007      	beq.n	80023d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023da:	d178      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_SPI_TransmitReceive+0x10a>
 80023e4:	8b7b      	ldrh	r3, [r7, #26]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d166      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	1c9a      	adds	r2, r3, #2
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800240e:	e053      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d11b      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x176>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d016      	beq.n	8002456 <HAL_SPI_TransmitReceive+0x176>
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d113      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	881a      	ldrh	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	1c9a      	adds	r2, r3, #2
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d119      	bne.n	8002498 <HAL_SPI_TransmitReceive+0x1b8>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d014      	beq.n	8002498 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	b292      	uxth	r2, r2
 800247a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	1c9a      	adds	r2, r3, #2
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002494:	2301      	movs	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002498:	f7fe fee2 	bl	8001260 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d807      	bhi.n	80024b8 <HAL_SPI_TransmitReceive+0x1d8>
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d003      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024b6:	e0a7      	b.n	8002608 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1a6      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x130>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1a1      	bne.n	8002410 <HAL_SPI_TransmitReceive+0x130>
 80024cc:	e07c      	b.n	80025c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_SPI_TransmitReceive+0x1fc>
 80024d6:	8b7b      	ldrh	r3, [r7, #26]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d16b      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002502:	e057      	b.n	80025b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d11c      	bne.n	800254c <HAL_SPI_TransmitReceive+0x26c>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <HAL_SPI_TransmitReceive+0x26c>
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d114      	bne.n	800254c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	330c      	adds	r3, #12
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d119      	bne.n	800258e <HAL_SPI_TransmitReceive+0x2ae>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d014      	beq.n	800258e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800258a:	2301      	movs	r3, #1
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800258e:	f7fe fe67 	bl	8001260 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800259a:	429a      	cmp	r2, r3
 800259c:	d803      	bhi.n	80025a6 <HAL_SPI_TransmitReceive+0x2c6>
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d102      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x2cc>
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025b2:	e029      	b.n	8002608 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1a2      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x224>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d19d      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f9b5 	bl	800293c <SPI_EndRxTxTransaction>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025e4:	e010      	b.n	8002608 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	e000      	b.n	8002608 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002606:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800261c:	4618      	mov	r0, r3
 800261e:	3730      	adds	r7, #48	; 0x30
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	099b      	lsrs	r3, r3, #6
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10f      	bne.n	8002668 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
    return;
 8002666:	e0be      	b.n	80027e6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_SPI_IRQHandler+0x66>
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	09db      	lsrs	r3, r3, #7
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
    return;
 8002688:	e0ad      	b.n	80027e6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_SPI_IRQHandler+0x80>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80a1 	beq.w	80027e6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 809a 	beq.w	80027e6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d023      	beq.n	8002706 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d011      	beq.n	80026ee <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f043 0204 	orr.w	r2, r3, #4
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	e00b      	b.n	8002706 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
        return;
 8002704:	e06f      	b.n	80027e6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d014      	beq.n	800273c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	2b00      	cmp	r3, #0
 8002742:	d04f      	beq.n	80027e4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002752:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <HAL_SPI_IRQHandler+0x14c>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d034      	beq.n	80027da <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0203 	bic.w	r2, r2, #3
 800277e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d011      	beq.n	80027ac <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <HAL_SPI_IRQHandler+0x1c8>)
 800278e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fed9 	bl	800154c <HAL_DMA_Abort_IT>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d016      	beq.n	80027e2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b8:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <HAL_SPI_IRQHandler+0x1c8>)
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fec3 	bl	800154c <HAL_DMA_Abort_IT>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80027d8:	e003      	b.n	80027e2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f808 	bl	80027f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027e0:	e000      	b.n	80027e4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80027e2:	bf00      	nop
    return;
 80027e4:	bf00      	nop
  }
}
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	08002803 	.word	0x08002803

080027f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff ffe7 	bl	80027f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800283c:	f7fe fd10 	bl	8001260 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4413      	add	r3, r2
 800284a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800284c:	f7fe fd08 	bl	8001260 <HAL_GetTick>
 8002850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002852:	4b39      	ldr	r3, [pc, #228]	; (8002938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	015b      	lsls	r3, r3, #5
 8002858:	0d1b      	lsrs	r3, r3, #20
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002862:	e054      	b.n	800290e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d050      	beq.n	800290e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800286c:	f7fe fcf8 	bl	8001260 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	429a      	cmp	r2, r3
 800287a:	d902      	bls.n	8002882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d13d      	bne.n	80028fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800289a:	d111      	bne.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a4:	d004      	beq.n	80028b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ae:	d107      	bne.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c8:	d10f      	bne.n	80028ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e017      	b.n	800292e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3b01      	subs	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4013      	ands	r3, r2
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	429a      	cmp	r2, r3
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	429a      	cmp	r2, r3
 800292a:	d19b      	bne.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000030 	.word	0x20000030

0800293c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2200      	movs	r2, #0
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff ff6a 	bl	800282c <SPI_WaitFlagStateUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f043 0220 	orr.w	r2, r3, #32
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e000      	b.n	8002970 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e041      	b.n	8002a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe faee 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f000 fa96 	bl	8002ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <HAL_TIM_Base_Stop+0x38>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	f240 4344 	movw	r3, #1092	; 0x444
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d107      	bne.n	8002a4e <HAL_TIM_Base_Stop+0x38>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e03a      	b.n	8002af2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_TIM_Base_Start_IT+0x98>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00e      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x58>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d009      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x58>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_TIM_Base_Start_IT+0x9c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x58>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d111      	bne.n	8002ae0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d010      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ade:	e007      	b.n	8002af0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800

08002b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0202 	mvn.w	r2, #2
 8002b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f9b1 	bl	8002eb2 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f9a4 	bl	8002ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f9b3 	bl	8002ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d122      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0204 	mvn.w	r2, #4
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f987 	bl	8002eb2 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f97a 	bl	8002ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f989 	bl	8002ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d122      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d11b      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0208 	mvn.w	r2, #8
 8002bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2204      	movs	r2, #4
 8002be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f95d 	bl	8002eb2 <HAL_TIM_IC_CaptureCallback>
 8002bf8:	e005      	b.n	8002c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f950 	bl	8002ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f95f 	bl	8002ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d122      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d11b      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0210 	mvn.w	r2, #16
 8002c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2208      	movs	r2, #8
 8002c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f933 	bl	8002eb2 <HAL_TIM_IC_CaptureCallback>
 8002c4c:	e005      	b.n	8002c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f926 	bl	8002ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f935 	bl	8002ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10e      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0201 	mvn.w	r2, #1
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd ffe6 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b80      	cmp	r3, #128	; 0x80
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca4:	2b80      	cmp	r3, #128	; 0x80
 8002ca6:	d107      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa77 	bl	80031a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8f9 	bl	8002ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0220 	mvn.w	r2, #32
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa42 	bl	8003194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_ConfigClockSource+0x18>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e0b3      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x180>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d68:	d03e      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0xd0>
 8002d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6e:	f200 8087 	bhi.w	8002e80 <HAL_TIM_ConfigClockSource+0x168>
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d76:	f000 8085 	beq.w	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	d87f      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x168>
 8002d80:	2b70      	cmp	r3, #112	; 0x70
 8002d82:	d01a      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0xa2>
 8002d84:	2b70      	cmp	r3, #112	; 0x70
 8002d86:	d87b      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x168>
 8002d88:	2b60      	cmp	r3, #96	; 0x60
 8002d8a:	d050      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x116>
 8002d8c:	2b60      	cmp	r3, #96	; 0x60
 8002d8e:	d877      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x168>
 8002d90:	2b50      	cmp	r3, #80	; 0x50
 8002d92:	d03c      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xf6>
 8002d94:	2b50      	cmp	r3, #80	; 0x50
 8002d96:	d873      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x168>
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d058      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x136>
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d86f      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x168>
 8002da0:	2b30      	cmp	r3, #48	; 0x30
 8002da2:	d064      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x156>
 8002da4:	2b30      	cmp	r3, #48	; 0x30
 8002da6:	d86b      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x168>
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d060      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x156>
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d867      	bhi.n	8002e80 <HAL_TIM_ConfigClockSource+0x168>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d05c      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x156>
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d05a      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002db8:	e062      	b.n	8002e80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6899      	ldr	r1, [r3, #8]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f000 f966 	bl	800309a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ddc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
      break;
 8002de6:	e04e      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f000 f94f 	bl	800309a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0a:	609a      	str	r2, [r3, #8]
      break;
 8002e0c:	e03b      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f000 f8c6 	bl	8002fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2150      	movs	r1, #80	; 0x50
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f91d 	bl	8003066 <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e02b      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 f8e4 	bl	8003008 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2160      	movs	r1, #96	; 0x60
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 f90d 	bl	8003066 <TIM_ITRx_SetConfig>
      break;
 8002e4c:	e01b      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f000 f8a6 	bl	8002fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2140      	movs	r1, #64	; 0x40
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f8fd 	bl	8003066 <TIM_ITRx_SetConfig>
      break;
 8002e6c:	e00b      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f000 f8f4 	bl	8003066 <TIM_ITRx_SetConfig>
        break;
 8002e7e:	e002      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e80:	bf00      	nop
 8002e82:	e000      	b.n	8002e86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a29      	ldr	r2, [pc, #164]	; (8002fa0 <TIM_Base_SetConfig+0xb8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <TIM_Base_SetConfig+0x30>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f06:	d007      	beq.n	8002f18 <TIM_Base_SetConfig+0x30>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <TIM_Base_SetConfig+0xbc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <TIM_Base_SetConfig+0x30>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <TIM_Base_SetConfig+0xc0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d108      	bne.n	8002f2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <TIM_Base_SetConfig+0xb8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_Base_SetConfig+0x62>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0x62>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <TIM_Base_SetConfig+0xbc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0x62>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <TIM_Base_SetConfig+0xc0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <TIM_Base_SetConfig+0xb8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d103      	bne.n	8002f90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	615a      	str	r2, [r3, #20]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800

08002fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f023 0201 	bic.w	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f023 030a 	bic.w	r3, r3, #10
 8002fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	621a      	str	r2, [r3, #32]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 0210 	bic.w	r2, r3, #16
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003032:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	031b      	lsls	r3, r3, #12
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	621a      	str	r2, [r3, #32]
}
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	f043 0307 	orr.w	r3, r3, #7
 8003088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800309a:	b480      	push	{r7}
 800309c:	b087      	sub	sp, #28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	021a      	lsls	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	431a      	orrs	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	609a      	str	r2, [r3, #8]
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e046      	b.n	800317e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313c:	d009      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a10      	ldr	r2, [pc, #64]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10c      	bne.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4313      	orrs	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800

08003194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e03f      	b.n	800324a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd ff10 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fbe5 	bl	80039cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b20      	cmp	r3, #32
 800326a:	d130      	bne.n	80032ce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_UART_Transmit_IT+0x26>
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e029      	b.n	80032d0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_UART_Transmit_IT+0x38>
 8003286:	2302      	movs	r3, #2
 8003288:	e022      	b.n	80032d0 <HAL_UART_Transmit_IT+0x7e>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2221      	movs	r2, #33	; 0x21
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	4613      	mov	r3, r2
 80032e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d11d      	bne.n	8003330 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UART_Receive_IT+0x26>
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e016      	b.n	8003332 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_UART_Receive_IT+0x38>
 800330e:	2302      	movs	r3, #2
 8003310:	e00f      	b.n	8003332 <HAL_UART_Receive_IT+0x58>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	461a      	mov	r2, r3
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f9c6 	bl	80036b8 <UART_Start_Receive_IT>
 800332c:	4603      	mov	r3, r0
 800332e:	e000      	b.n	8003332 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	; 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800335c:	2300      	movs	r3, #0
 800335e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_UART_IRQHandler+0x52>
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fa76 	bl	8003878 <UART_Receive_IT>
      return;
 800338c:	e17b      	b.n	8003686 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80b1 	beq.w	80034f8 <HAL_UART_IRQHandler+0x1bc>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <HAL_UART_IRQHandler+0x70>
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80a6 	beq.w	80034f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_UART_IRQHandler+0x90>
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_UART_IRQHandler+0xb0>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 0202 	orr.w	r2, r3, #2
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_UART_IRQHandler+0xd0>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00f      	beq.n	8003436 <HAL_UART_IRQHandler+0xfa>
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_UART_IRQHandler+0xee>
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f043 0208 	orr.w	r2, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 811e 	beq.w	800367c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <HAL_UART_IRQHandler+0x11e>
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa0f 	bl	8003878 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d102      	bne.n	8003482 <HAL_UART_IRQHandler+0x146>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d031      	beq.n	80034e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f951 	bl	800372a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d023      	beq.n	80034de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d013      	beq.n	80034d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	4a76      	ldr	r2, [pc, #472]	; (800368c <HAL_UART_IRQHandler+0x350>)
 80034b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f846 	bl	800154c <HAL_DMA_Abort_IT>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034d0:	4610      	mov	r0, r2
 80034d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d4:	e00e      	b.n	80034f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8da 	bl	8003690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	e00a      	b.n	80034f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8d6 	bl	8003690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	e006      	b.n	80034f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8d2 	bl	8003690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034f2:	e0c3      	b.n	800367c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	bf00      	nop
    return;
 80034f6:	e0c1      	b.n	800367c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	f040 80a1 	bne.w	8003644 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 809b 	beq.w	8003644 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8095 	beq.w	8003644 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d04e      	beq.n	80035dc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003548:	8a3b      	ldrh	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8098 	beq.w	8003680 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003554:	8a3a      	ldrh	r2, [r7, #16]
 8003556:	429a      	cmp	r2, r3
 8003558:	f080 8092 	bcs.w	8003680 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8a3a      	ldrh	r2, [r7, #16]
 8003560:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b20      	cmp	r3, #32
 800356a:	d02b      	beq.n	80035c4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800357a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0210 	bic.w	r2, r2, #16
 80035b8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd ff89 	bl	80014d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f864 	bl	80036a2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035da:	e051      	b.n	8003680 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d047      	beq.n	8003684 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80035f4:	8a7b      	ldrh	r3, [r7, #18]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d044      	beq.n	8003684 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003608:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0210 	bic.w	r2, r2, #16
 8003636:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003638:	8a7b      	ldrh	r3, [r7, #18]
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f830 	bl	80036a2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003642:	e01f      	b.n	8003684 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_UART_IRQHandler+0x324>
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f8a6 	bl	80037aa <UART_Transmit_IT>
    return;
 800365e:	e012      	b.n	8003686 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <HAL_UART_IRQHandler+0x34a>
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f8e7 	bl	8003848 <UART_EndTransmit_IT>
    return;
 800367a:	e004      	b.n	8003686 <HAL_UART_IRQHandler+0x34a>
    return;
 800367c:	bf00      	nop
 800367e:	e002      	b.n	8003686 <HAL_UART_IRQHandler+0x34a>
      return;
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <HAL_UART_IRQHandler+0x34a>
      return;
 8003684:	bf00      	nop
  }
}
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	08003783 	.word	0x08003783

08003690 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	4613      	mov	r3, r2
 80036c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2222      	movs	r2, #34	; 0x22
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0220 	orr.w	r2, r2, #32
 800371c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003740:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0210 	bic.w	r2, r2, #16
 8003768:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr

08003782 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff77 	bl	8003690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b21      	cmp	r3, #33	; 0x21
 80037bc:	d13e      	bne.n	800383c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c6:	d114      	bne.n	80037f2 <UART_Transmit_IT+0x48>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d110      	bne.n	80037f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	1c9a      	adds	r2, r3, #2
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]
 80037f0:	e008      	b.n	8003804 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	1c59      	adds	r1, r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6211      	str	r1, [r2, #32]
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29b      	uxth	r3, r3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4619      	mov	r1, r3
 8003812:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003826:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003836:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fd f9df 	bl	8000c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b22      	cmp	r3, #34	; 0x22
 800388a:	f040 8099 	bne.w	80039c0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003896:	d117      	bne.n	80038c8 <UART_Receive_IT+0x50>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
 80038c6:	e026      	b.n	8003916 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	d007      	beq.n	80038ec <UART_Receive_IT+0x74>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <UART_Receive_IT+0x82>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e008      	b.n	800390c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003906:	b2da      	uxtb	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29b      	uxth	r3, r3
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4619      	mov	r1, r3
 8003924:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003926:	2b00      	cmp	r3, #0
 8003928:	d148      	bne.n	80039bc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0220 	bic.w	r2, r2, #32
 8003938:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	2b01      	cmp	r3, #1
 8003968:	d123      	bne.n	80039b2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0210 	bic.w	r2, r2, #16
 800397e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d10a      	bne.n	80039a4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fe79 	bl	80036a2 <HAL_UARTEx_RxEventCallback>
 80039b0:	e002      	b.n	80039b8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd f8fe 	bl	8000bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e002      	b.n	80039c2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a06:	f023 030c 	bic.w	r3, r3, #12
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	430b      	orrs	r3, r1
 8003a12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <UART_SetConfig+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a34:	f7fe fb9e 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	e002      	b.n	8003a42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7fe fb86 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 8003a40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	0119      	lsls	r1, r3, #4
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009a      	lsls	r2, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2064      	movs	r0, #100	; 0x64
 8003a82:	fb00 f303 	mul.w	r3, r0, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	3332      	adds	r3, #50	; 0x32
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <UART_SetConfig+0x118>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	4419      	add	r1, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009a      	lsls	r2, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <UART_SetConfig+0x118>)
 8003ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2064      	movs	r0, #100	; 0x64
 8003aba:	fb00 f303 	mul.w	r3, r0, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	3332      	adds	r3, #50	; 0x32
 8003ac4:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <UART_SetConfig+0x118>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	51eb851f 	.word	0x51eb851f

08003ae8 <__libc_init_array>:
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	2600      	movs	r6, #0
 8003aec:	4d0c      	ldr	r5, [pc, #48]	; (8003b20 <__libc_init_array+0x38>)
 8003aee:	4c0d      	ldr	r4, [pc, #52]	; (8003b24 <__libc_init_array+0x3c>)
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	42a6      	cmp	r6, r4
 8003af6:	d109      	bne.n	8003b0c <__libc_init_array+0x24>
 8003af8:	f000 f822 	bl	8003b40 <_init>
 8003afc:	2600      	movs	r6, #0
 8003afe:	4d0a      	ldr	r5, [pc, #40]	; (8003b28 <__libc_init_array+0x40>)
 8003b00:	4c0a      	ldr	r4, [pc, #40]	; (8003b2c <__libc_init_array+0x44>)
 8003b02:	1b64      	subs	r4, r4, r5
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	42a6      	cmp	r6, r4
 8003b08:	d105      	bne.n	8003b16 <__libc_init_array+0x2e>
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b10:	4798      	blx	r3
 8003b12:	3601      	adds	r6, #1
 8003b14:	e7ee      	b.n	8003af4 <__libc_init_array+0xc>
 8003b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1a:	4798      	blx	r3
 8003b1c:	3601      	adds	r6, #1
 8003b1e:	e7f2      	b.n	8003b06 <__libc_init_array+0x1e>
 8003b20:	08003b80 	.word	0x08003b80
 8003b24:	08003b80 	.word	0x08003b80
 8003b28:	08003b80 	.word	0x08003b80
 8003b2c:	08003b88 	.word	0x08003b88

08003b30 <memset>:
 8003b30:	4603      	mov	r3, r0
 8003b32:	4402      	add	r2, r0
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d100      	bne.n	8003b3a <memset+0xa>
 8003b38:	4770      	bx	lr
 8003b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3e:	e7f9      	b.n	8003b34 <memset+0x4>

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
